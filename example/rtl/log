
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7+57 (git sha1 81bb952, clang 3.6.0-2ubuntu1 -fPIC -Os)


-- Parsing `alu.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

-- Parsing `arbiter.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `arbiter.v' to AST representation.
Generating RTLIL representation for module `\arbiter'.
Successfully finished Verilog frontend.

-- Parsing `bottleneckSequencer.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend.
Parsing Verilog input from `bottleneckSequencer.v' to AST representation.
Generating RTLIL representation for module `\BottleneckSequencer'.
Successfully finished Verilog frontend.

-- Parsing `bottleneck.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend.
Parsing Verilog input from `bottleneck.v' to AST representation.
Generating RTLIL representation for module `\bottleneck'.
Successfully finished Verilog frontend.

-- Parsing `bridge.v' using frontend `verilog' --

5. Executing Verilog-2005 frontend.
Parsing Verilog input from `bridge.v' to AST representation.
Generating RTLIL representation for module `\bridge'.
Successfully finished Verilog frontend.

-- Parsing `GPIA.v' using frontend `verilog' --

6. Executing Verilog-2005 frontend.
Parsing Verilog input from `GPIA.v' to AST representation.
Generating RTLIL representation for module `\GPIA'.
Successfully finished Verilog frontend.

-- Parsing `polaris.v' using frontend `verilog' --

7. Executing Verilog-2005 frontend.
Parsing Verilog input from `polaris.v' to AST representation.
Generating RTLIL representation for module `\PolarisCPU'.
Generating RTLIL representation for module `\CSRs'.
Successfully finished Verilog frontend.

-- Parsing `seq.v' using frontend `verilog' --

8. Executing Verilog-2005 frontend.
Parsing Verilog input from `seq.v' to AST representation.
Generating RTLIL representation for module `\Sequencer'.
Successfully finished Verilog frontend.

-- Parsing `sram.v' using frontend `verilog' --

9. Executing Verilog-2005 frontend.
Parsing Verilog input from `sram.v' to AST representation.
Generating RTLIL representation for module `\sram'.
Successfully finished Verilog frontend.

-- Parsing `TOP.v' using frontend `verilog' --

10. Executing Verilog-2005 frontend.
Parsing Verilog input from `TOP.v' to AST representation.
Generating RTLIL representation for module `\TOP'.
Successfully finished Verilog frontend.

-- Parsing `xrs.v' using frontend `verilog' --

11. Executing Verilog-2005 frontend.
Parsing Verilog input from `xrs.v' to AST representation.
Generating RTLIL representation for module `\xrs'.
Generating RTLIL representation for module `\ram'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top TOP -blif top.blif' --

12. Executing SYNTH_ICE40 pass.

12.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Successfully finished Verilog frontend.

12.2. Executing HIERARCHY pass (managing design hierarchy).

12.2.1. Analyzing design hierarchy..
Top module:  \TOP
Used module:     \sram
Used module:     \bridge
Used module:     \bottleneck
Used module:         \BottleneckSequencer
Used module:     \arbiter
Used module:     \PolarisCPU
Used module:         \CSRs
Used module:         \alu
Used module:         \xrs
Used module:             \ram
Used module:         \Sequencer

12.2.2. Analyzing design hierarchy..
Top module:  \TOP
Used module:     \sram
Used module:     \bridge
Used module:     \bottleneck
Used module:         \BottleneckSequencer
Used module:     \arbiter
Used module:     \PolarisCPU
Used module:         \CSRs
Used module:         \alu
Used module:         \xrs
Used module:             \ram
Used module:         \Sequencer
Removing unused module `\GPIA'.
Removed 1 unused modules.
Warning: Resizing cell port TOP.bot.m_err_align_o from 0 bits to 1 bits.
Warning: Resizing cell port TOP.cpu.cdat_o from 0 bits to 64 bits.
Warning: Resizing cell port TOP.cpu.cwe_o from 0 bits to 1 bits.
Warning: Resizing cell port TOP.cpu.coe_o from 0 bits to 1 bits.
Warning: Resizing cell port TOP.cpu.cadr_o from 0 bits to 12 bits.
Warning: Resizing cell port TOP.cpu.mie_o from 0 bits to 1 bits.
Warning: Resizing cell port TOP.cpu.mpie_o from 0 bits to 1 bits.
Warning: Resizing cell port TOP.cpu.mepc_o from 0 bits to 64 bits.
Warning: Resizing cell port TOP.cpu.cause_o from 0 bits to 4 bits.
Warning: Resizing cell port TOP.cpu.trap_o from 0 bits to 1 bits.
Warning: Resizing cell port TOP.cpu.fence_o from 0 bits to 1 bits.

12.3. Executing PROC pass (convert processes to netlists).

12.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

12.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

12.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\TOP.$proc$TOP.v:39$2340'.
  Set init value: \cpu_clk = 1'0
Found init rule in `\TOP.$proc$TOP.v:38$2339'.
  Set init value: \div2 = 1'0

12.3.4. Executing PROC_ARST pass (detect async resets in processes).

12.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ram.$proc$xrs.v:69$2346'.
     1/4: $0\dout[15:0]
     2/4: $0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349
     3/4: $0$memwr$\mem$xrs.v:71$2345_DATA[15:0]$2348
     4/4: $0$memwr$\mem$xrs.v:71$2345_ADDR[4:0]$2347
Creating decoders for process `\xrs.$proc$xrs.v:22$2341'.
     1/1: $0\addr[4:0]
Creating decoders for process `\TOP.$proc$TOP.v:39$2340'.
     1/1: $1\cpu_clk[0:0]
Creating decoders for process `\TOP.$proc$TOP.v:38$2339'.
     1/1: $1\div2[0:0]
Creating decoders for process `\TOP.$proc$TOP.v:41$2336'.
     1/2: $0\div2[0:0]
     2/2: $0\cpu_clk[0:0]
Creating decoders for process `\CSRs.$proc$polaris.v:571$1209'.
     1/11: $0\irqEn[0:0]
     2/11: $0\mtime[63:0]
     3/11: $0\minstret[63:0]
     4/11: $0\mcycle[63:0]
     5/11: $0\mbadaddr[63:0]
     6/11: $0\mcause[4:0]
     7/11: $0\mepc[63:0]
     8/11: $0\mscratch[63:0]
     9/11: $0\mtvec[63:0]
    10/11: $0\mpie[0:0]
    11/11: $0\mie[0:0]
Creating decoders for process `\PolarisCPU.$proc$polaris.v:195$1033'.
     1/14: $0\trap[0:0]
     2/14: $0\ccr[7:0]
     3/14: $0\alub[63:0]
     4/14: $0\alua[63:0]
     5/14: $0\ir[31:0]
     6/14: $0\xt4[0:0]
     7/14: $0\xt3[0:0]
     8/14: $0\xt2[0:0]
     9/14: $0\xt1[0:0]
    10/14: $0\xt0[0:0]
    11/14: $0\ft0[0:0]
    12/14: $0\ia[63:0]
    13/14: $0\pc[63:0]
    14/14: $0\rst[0:0]
Creating decoders for process `\bottleneck.$proc$bottleneck.v:132$718'.
     1/6: $0\ack3[0:0]
     2/6: $0\ack2[0:0]
     3/6: $0\ack1[0:0]
     4/6: $0\hold3[15:0]
     5/6: $0\hold2[15:0]
     6/6: $0\hold1[15:0]
Creating decoders for process `\arbiter.$proc$arbiter.v:87$100'.
     1/2: $0\reserve_d[0:0]
     2/2: $0\reserve_i[0:0]

12.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).

12.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ram.\dout' using process `\ram.$proc$xrs.v:69$2346'.
  created $dff cell `$procdff$2384' with positive edge clock.
Creating register for signal `\ram.$memwr$\mem$xrs.v:71$2345_ADDR' using process `\ram.$proc$xrs.v:69$2346'.
  created $dff cell `$procdff$2385' with positive edge clock.
Creating register for signal `\ram.$memwr$\mem$xrs.v:71$2345_DATA' using process `\ram.$proc$xrs.v:69$2346'.
  created $dff cell `$procdff$2386' with positive edge clock.
Creating register for signal `\ram.$memwr$\mem$xrs.v:71$2345_EN' using process `\ram.$proc$xrs.v:69$2346'.
  created $dff cell `$procdff$2387' with positive edge clock.
Creating register for signal `\xrs.\addr' using process `\xrs.$proc$xrs.v:22$2341'.
  created $dff cell `$procdff$2388' with positive edge clock.
Creating register for signal `\TOP.\div2' using process `\TOP.$proc$TOP.v:41$2336'.
  created $dff cell `$procdff$2389' with positive edge clock.
Creating register for signal `\TOP.\cpu_clk' using process `\TOP.$proc$TOP.v:41$2336'.
  created $dff cell `$procdff$2390' with positive edge clock.
Creating register for signal `\CSRs.\mepc' using process `\CSRs.$proc$polaris.v:571$1209'.
  created $dff cell `$procdff$2391' with positive edge clock.
Creating register for signal `\CSRs.\mie' using process `\CSRs.$proc$polaris.v:571$1209'.
  created $dff cell `$procdff$2392' with positive edge clock.
Creating register for signal `\CSRs.\mpie' using process `\CSRs.$proc$polaris.v:571$1209'.
  created $dff cell `$procdff$2393' with positive edge clock.
Creating register for signal `\CSRs.\mtvec' using process `\CSRs.$proc$polaris.v:571$1209'.
  created $dff cell `$procdff$2394' with positive edge clock.
Creating register for signal `\CSRs.\mscratch' using process `\CSRs.$proc$polaris.v:571$1209'.
  created $dff cell `$procdff$2395' with positive edge clock.
Creating register for signal `\CSRs.\mcause' using process `\CSRs.$proc$polaris.v:571$1209'.
  created $dff cell `$procdff$2396' with positive edge clock.
Creating register for signal `\CSRs.\mbadaddr' using process `\CSRs.$proc$polaris.v:571$1209'.
  created $dff cell `$procdff$2397' with positive edge clock.
Creating register for signal `\CSRs.\mcycle' using process `\CSRs.$proc$polaris.v:571$1209'.
  created $dff cell `$procdff$2398' with positive edge clock.
Creating register for signal `\CSRs.\mtime' using process `\CSRs.$proc$polaris.v:571$1209'.
  created $dff cell `$procdff$2399' with positive edge clock.
Creating register for signal `\CSRs.\minstret' using process `\CSRs.$proc$polaris.v:571$1209'.
  created $dff cell `$procdff$2400' with positive edge clock.
Creating register for signal `\CSRs.\irqEn' using process `\CSRs.$proc$polaris.v:571$1209'.
  created $dff cell `$procdff$2401' with positive edge clock.
Creating register for signal `\PolarisCPU.\ft0' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2402' with positive edge clock.
Creating register for signal `\PolarisCPU.\rst' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2403' with positive edge clock.
Creating register for signal `\PolarisCPU.\pc' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2404' with positive edge clock.
Creating register for signal `\PolarisCPU.\ia' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2405' with positive edge clock.
Creating register for signal `\PolarisCPU.\ir' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2406' with positive edge clock.
Creating register for signal `\PolarisCPU.\xt0' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2407' with positive edge clock.
Creating register for signal `\PolarisCPU.\xt1' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2408' with positive edge clock.
Creating register for signal `\PolarisCPU.\xt2' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2409' with positive edge clock.
Creating register for signal `\PolarisCPU.\xt3' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2410' with positive edge clock.
Creating register for signal `\PolarisCPU.\xt4' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2411' with positive edge clock.
Creating register for signal `\PolarisCPU.\alua' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2412' with positive edge clock.
Creating register for signal `\PolarisCPU.\alub' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2413' with positive edge clock.
Creating register for signal `\PolarisCPU.\ccr' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2414' with positive edge clock.
Creating register for signal `\PolarisCPU.\trap' using process `\PolarisCPU.$proc$polaris.v:195$1033'.
  created $dff cell `$procdff$2415' with positive edge clock.
Creating register for signal `\bottleneck.\ack3' using process `\bottleneck.$proc$bottleneck.v:132$718'.
  created $dff cell `$procdff$2416' with positive edge clock.
Creating register for signal `\bottleneck.\ack2' using process `\bottleneck.$proc$bottleneck.v:132$718'.
  created $dff cell `$procdff$2417' with positive edge clock.
Creating register for signal `\bottleneck.\ack1' using process `\bottleneck.$proc$bottleneck.v:132$718'.
  created $dff cell `$procdff$2418' with positive edge clock.
Creating register for signal `\bottleneck.\hold1' using process `\bottleneck.$proc$bottleneck.v:132$718'.
  created $dff cell `$procdff$2419' with positive edge clock.
Creating register for signal `\bottleneck.\hold2' using process `\bottleneck.$proc$bottleneck.v:132$718'.
  created $dff cell `$procdff$2420' with positive edge clock.
Creating register for signal `\bottleneck.\hold3' using process `\bottleneck.$proc$bottleneck.v:132$718'.
  created $dff cell `$procdff$2421' with positive edge clock.
Creating register for signal `\arbiter.\reserve_i' using process `\arbiter.$proc$arbiter.v:87$100'.
  created $dff cell `$procdff$2422' with positive edge clock.
Creating register for signal `\arbiter.\reserve_d' using process `\arbiter.$proc$arbiter.v:87$100'.
  created $dff cell `$procdff$2423' with positive edge clock.

12.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ram.$proc$xrs.v:69$2346'.
Removing empty process `ram.$proc$xrs.v:69$2346'.
Removing empty process `xrs.$proc$xrs.v:22$2341'.
Removing empty process `TOP.$proc$TOP.v:39$2340'.
Removing empty process `TOP.$proc$TOP.v:38$2339'.
Found and cleaned up 1 empty switch in `\TOP.$proc$TOP.v:41$2336'.
Removing empty process `TOP.$proc$TOP.v:41$2336'.
Removing empty process `CSRs.$proc$polaris.v:571$1209'.
Removing empty process `PolarisCPU.$proc$polaris.v:195$1033'.
Found and cleaned up 3 empty switches in `\bottleneck.$proc$bottleneck.v:132$718'.
Removing empty process `bottleneck.$proc$bottleneck.v:132$718'.
Removing empty process `arbiter.$proc$arbiter.v:87$100'.
Cleaned up 5 empty switches.

12.4. Executing FLATTEN pass (flatten design).
Mapping TOP.cpu using PolarisCPU.
Mapping TOP.wb_bridge using bridge.
Mapping TOP.ram using sram.
Mapping TOP.bot using bottleneck.
Mapping TOP.arb using arbiter.
Mapping TOP.cpu.s using Sequencer.
Mapping TOP.cpu.csrs using CSRs.
Mapping TOP.cpu.alu using alu.
Mapping TOP.cpu.xrs using xrs.
Mapping TOP.bot.bs using BottleneckSequencer.
Mapping TOP.cpu.xrs.column0 using ram.
Mapping TOP.cpu.xrs.column1 using ram.
Mapping TOP.cpu.xrs.column2 using ram.
Mapping TOP.cpu.xrs.column3 using ram.
No more expansions possible.
Deleting now unused module ram.
Deleting now unused module xrs.
Deleting now unused module sram.
Deleting now unused module Sequencer.
Deleting now unused module CSRs.
Deleting now unused module PolarisCPU.
Deleting now unused module bridge.
Deleting now unused module bottleneck.
Deleting now unused module BottleneckSequencer.
Deleting now unused module arbiter.
Deleting now unused module alu.

12.5. Executing TRIBUF pass.

12.6. Executing DEMINOUT pass (demote inout ports to input or output).

12.7. Executing SYNTH pass.

12.7.1. Executing PROC pass (convert processes to netlists).

12.7.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

12.7.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

12.7.1.3. Executing PROC_INIT pass (extract init attributes).

12.7.1.4. Executing PROC_ARST pass (detect async resets in processes).

12.7.1.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

12.7.1.6. Executing PROC_DLATCH pass (convert process syncs to latches).

12.7.1.7. Executing PROC_DFF pass (convert process syncs to FFs).

12.7.1.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

12.7.2. Executing OPT_EXPR pass (perform const folding).
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$431' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$431_Y = \bot.bs.ack3'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$429' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$429_Y = \bot.bs.ack2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$427' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$427_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:163$1414' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:163$1414_Y = \cpu.s.ir [3]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:152$1371' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:152$1371_Y = \cpu.s.isOpR'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:152$1369' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:152$1369_Y = \cpu.s.xt3'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:152$1367' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:152$1367_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:163$1413' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:163$1413_Y = \cpu.s.useAlu2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:148$1347' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:148$1347_Y = \cpu.s.ir [3]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:138$1312' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:138$1312_Y = \cpu.s.isOpI'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:138$1310' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:138$1310_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:138$1308' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:138$1308_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:148$1346' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:148$1346_Y = \cpu.s.useAlu'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:233$1799' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:233$1799_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:217$1691' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:217$1691_Y = \cpu.s.fn3_is_111'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:233$1797' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:233$1797_Y = \cpu.s.isCsrRcI'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:233$1795' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:233$1795_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:230$1779' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:230$1779_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:214$1682' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:214$1682_Y = \cpu.s.fn3_is_011'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:230$1777' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:230$1777_Y = \cpu.s.isCsrRc'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:230$1775' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:230$1775_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:227$1759' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:227$1759_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:216$1688' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:216$1688_Y = \cpu.s.fn3_is_110'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:227$1757' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:227$1757_Y = \cpu.s.isCsrRsI'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:227$1755' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:227$1755_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:224$1739' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:224$1739_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:213$1679' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:213$1679_Y = \cpu.s.fn3_is_010'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:224$1737' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:224$1737_Y = \cpu.s.isCsrRs'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:224$1735' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:224$1735_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:162$1411' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:162$1411_Y = \cpu.s.fn3_is_111'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:162$1410' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:162$1410_Y = \cpu.s.useAlu2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:161$1408' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:161$1408_Y = \cpu.s.fn3_is_110'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:161$1407' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:161$1407_Y = \cpu.s.useAlu2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:147$1344' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:147$1344_Y = \cpu.s.fn3_is_111'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:147$1343' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:147$1343_Y = \cpu.s.useAlu'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:146$1341' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:146$1341_Y = \cpu.s.fn3_is_110'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:146$1340' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:146$1340_Y = \cpu.s.useAlu'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:192$1576' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:192$1576_Y = \cpu.s.isBr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:192$1574' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:192$1574_Y = \cpu.s.xt3'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:192$1572' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:192$1572_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:157$1391' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:157$1391_Y = \cpu.s.fn3_is_011'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:157$1390' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:157$1390_Y = \cpu.s.useAlu2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:156$1388' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:156$1388_Y = \cpu.s.fn3_is_010'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:156$1387' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:156$1387_Y = \cpu.s.useAlu2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:154$1382' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:154$1382_Y = \cpu.s.ir [30]'.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:126$1282' in module `TOP' with $logic_not.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:154$1380' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:154$1380_Y = \cpu.s.fn3_is_000'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:154$1379' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:154$1379_Y = \cpu.s.useAlu2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:142$1324' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:142$1324_Y = \cpu.s.fn3_is_011'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:142$1323' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:142$1323_Y = \cpu.s.useAlu'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:141$1321' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:141$1321_Y = \cpu.s.fn3_is_010'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:141$1320' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:141$1320_Y = \cpu.s.useAlu'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:193$1582' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:193$1582_Y = \cpu.s.isBr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:193$1580' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:193$1580_Y = \cpu.s.xt4'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:193$1578' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:193$1578_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:209$1666' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:209$1666_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:209$1664' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:209$1664_Y = \cpu.s.isEBreak'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:209$1662' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:209$1662_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:208$1660' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:208$1660_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:208$1658' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:208$1658_Y = \cpu.s.isECall'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:208$1656' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:208$1656_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:125$1279' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:125$1279_Y = \cpu.s.xt4'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:125$1276' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:125$1276_Y = \cpu.s.xt3'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:125$1273' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:125$1273_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:125$1270' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:125$1270_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:125$1267' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:125$1267_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:125$1264' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:125$1264_Y = \cpu.s.ft0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:125$1261' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:125$1261_Y = \cpu.s.trap'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:125$1259' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:125$1259_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:120$1218' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:120$1218_Y = \cpu.s.trap_o'.
Replacing $and cell `$techmap\cpu.csrs.$and$polaris.v:488$1054' (const_and) in module `\TOP' with constant driver `$techmap\cpu.csrs.$and$polaris.v:488$1054_Y = 1'0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:120$1215' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:120$1215_Y = \cpu.s.take_irq'.
Replacing $not cell `$techmap\cpu.s.$not$seq.v:120$1216' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$not$seq.v:120$1216_Y = 1'1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:120$1213' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:120$1213_Y = \cpu.s.ft0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:120$1211' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:120$1211_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:186$1542' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:186$1542_Y = \cpu.s.dack_i'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:186$1540' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:186$1540_Y = \cpu.s.isStore'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:186$1538' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:186$1538_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:186$1536' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:186$1536_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:183$1522' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:183$1522_Y = \cpu.s.dack_i'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:183$1520' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:183$1520_Y = \cpu.s.isLoad'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:183$1518' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:183$1518_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:183$1516' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:183$1516_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:182$1513' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:182$1513_Y = \cpu.s.dack_i'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:182$1511' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:182$1511_Y = \cpu.s.isLoad'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:182$1509' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:182$1509_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:182$1507' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:182$1507_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:187$1551' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:187$1551_Y = \cpu.s.dack_i'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:187$1549' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:187$1549_Y = \cpu.s.isStore'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:187$1547' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:187$1547_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:187$1545' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:187$1545_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:173$1460' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:173$1460_Y = \cpu.s.ir [6]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:177$1491' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:177$1491_Y = \cpu.s.isLuiAuipc'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:177$1489' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:177$1489_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:177$1487' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:177$1487_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:172$1458' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:172$1458_Y = \cpu.s.isJal'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:172$1456' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:172$1456_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:172$1454' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:172$1454_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:169$1440' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:169$1440_Y = \cpu.s.isJalr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:169$1438' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:169$1438_Y = \cpu.s.xt3'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:169$1436' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:169$1436_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:153$1376' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:153$1376_Y = \cpu.s.ir [30]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:153$1374' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:153$1374_Y = \cpu.s.fn3_is_000'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:153$1373' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:153$1373_Y = \cpu.s.useAlu2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:139$1315' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:139$1315_Y = \cpu.s.fn3_is_000'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:139$1314' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:139$1314_Y = \cpu.s.useAlu'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:160$1405' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:160$1405_Y = \cpu.s.ir [30]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:160$1403' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:160$1403_Y = \cpu.s.fn3_is_101'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:160$1402' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:160$1402_Y = \cpu.s.useAlu2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:145$1338' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:145$1338_Y = \cpu.s.ir [30]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:145$1336' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:145$1336_Y = \cpu.s.fn3_is_101'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:145$1335' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:145$1335_Y = \cpu.s.useAlu'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:158$1394' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:158$1394_Y = \cpu.s.fn3_is_100'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:158$1393' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:158$1393_Y = \cpu.s.useAlu2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:143$1327' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:143$1327_Y = \cpu.s.fn3_is_100'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:143$1326' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:143$1326_Y = \cpu.s.useAlu'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:155$1385' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:155$1385_Y = \cpu.s.fn3_is_001'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:155$1384' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:155$1384_Y = \cpu.s.useAlu2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:140$1318' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:140$1318_Y = \cpu.s.fn3_is_001'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:140$1317' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:140$1317_Y = \cpu.s.useAlu'.
Replacing $pos cell `$techmap\cpu.alu.$extend$alu.v:47$20' (0) in module `\TOP' with constant driver `$techmap\cpu.alu.$extend$alu.v:47$20_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:159$1399' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:159$1399_Y = \cpu.s.ir [30]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:159$1397' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:159$1397_Y = \cpu.s.fn3_is_101'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:159$1396' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:159$1396_Y = \cpu.s.useAlu2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:144$1332' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:144$1332_Y = \cpu.s.ir [30]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:144$1330' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:144$1330_Y = \cpu.s.fn3_is_101'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:144$1329' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:144$1329_Y = \cpu.s.useAlu'.
Replacing $pos cell `$techmap\cpu.alu.$extend$alu.v:62$34' (0) in module `\TOP' with constant driver `$techmap\cpu.alu.$extend$alu.v:62$34_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.alu.$extend$alu.v:64$37' (0) in module `\TOP' with constant driver `$techmap\cpu.alu.$extend$alu.v:64$37_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.alu.$extend$alu.v:65$40' (0) in module `\TOP' with constant driver `$techmap\cpu.alu.$extend$alu.v:65$40_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:190$1027' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:190$1027_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$424' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$424_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$421' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$421_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$418' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$418_Y = \bot.bs.MAdrI2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$416' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$416_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$414' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$414_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$412' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$412_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$410' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$410_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$408' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:60$408_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$378' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$378_Y = \bot.bs.ack3'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$376' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$376_Y = \bot.bs.ack2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$373' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$373_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$370' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$370_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$367' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$367_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$364' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$364_Y = \bot.bs.MAdrI2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$362' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$362_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$360' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$360_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$358' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$358_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$356' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$356_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$354' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:58$354_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$323' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$323_Y = \bot.bs.ack3'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$320' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$320_Y = \bot.bs.ack2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$317' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$317_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$314' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$314_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$311' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$311_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$308' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$308_Y = \bot.bs.MAdrI2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$306' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$306_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$304' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$304_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$302' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$302_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$300' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$300_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$298' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:56$298_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$265' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$265_Y = \bot.bs.ack3'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$262' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$262_Y = \bot.bs.ack2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$259' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$259_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$256' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$256_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$253' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$253_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$250' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$250_Y = \bot.bs.MAdrI2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$248' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$248_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$246' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$246_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$244' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$244_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$242' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$242_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$240' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:54$240_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$195' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$195_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$192' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$192_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$189' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$189_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$186' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$186_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$184' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$184_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$182' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$182_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$180' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$180_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$178' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:51$178_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$153' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$153_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$150' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$150_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$147' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$147_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$144' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$144_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$142' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$142_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$140' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$140_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$138' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$138_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$136' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:49$136_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:48$133' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:48$133_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:48$131' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:48$131_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:48$128' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:48$128_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:48$126' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:48$126_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:48$124' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:48$124_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:48$122' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:48$122_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:47$119' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:47$119_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:47$116' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:47$116_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:47$114' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:47$114_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:47$112' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:47$112_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:47$110' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:47$110_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$486' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$486_Y = \bot.bs.SAckI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$484' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$484_Y = \bot.bs.ack3'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$482' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$482_Y = \bot.bs.ack2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$480' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$480_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$477' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$477_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$474' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$474_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$471' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$471_Y = \bot.bs.MAdrI2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$469' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$469_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$467' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$467_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$465' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$465_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$463' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$463_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$461' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:62$461_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$238' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$238_Y = \bot.bs.SAckI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$236' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$236_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$233' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$233_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$230' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$230_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$227' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$227_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$225' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$225_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$223' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$223_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$221' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$221_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$219' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:53$219_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:122$1244' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:122$1244_Y = \cpu.s.iack_i'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:122$1241' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:122$1241_Y = \cpu.s.trap_o'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:122$1238' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:122$1238_Y = \cpu.s.take_irq'.
Replacing $not cell `$techmap\cpu.s.$not$seq.v:122$1239' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$not$seq.v:122$1239_Y = 1'1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:122$1236' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:122$1236_Y = \cpu.s.ft0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:122$1234' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:122$1234_Y = \cpu.s.rst'.
Optimizing away select inverter for $mux cell `$techmap\cpu.$ternary$polaris.v:193$1031' in module `TOP'.
Replacing $pos cell `$techmap\bot.$extend$bottleneck.v:89$711' (0) in module `\TOP' with constant driver `$techmap\bot.$extend$bottleneck.v:89$711_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\bot.$extend$bottleneck.v:88$707' (0) in module `\TOP' with constant driver `$techmap\bot.$extend$bottleneck.v:88$707_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $and cell `$techmap\arb.$and$arbiter.v:79$93' (const_and) in module `\TOP' with constant driver `$techmap\arb.$and$arbiter.v:79$93_Y = 1'0'.
Replacing $or cell `$techmap\arb.$or$arbiter.v:79$95' in module `\TOP' with identity for port B.
Replacing $pos cell `$techmap\bot.$extend$bottleneck.v:87$701' (0) in module `\TOP' with constant driver `$techmap\bot.$extend$bottleneck.v:87$701_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\bot.$extend$bottleneck.v:86$696' (0) in module `\TOP' with constant driver `$techmap\bot.$extend$bottleneck.v:86$696_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\bot.$extend$bottleneck.v:85$690' (0) in module `\TOP' with constant driver `$techmap\bot.$extend$bottleneck.v:85$690_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\bot.$extend$bottleneck.v:84$685' (0) in module `\TOP' with constant driver `$techmap\bot.$extend$bottleneck.v:84$685_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $eq cell `$techmap\bot.$eq$bottleneck.v:52$639' in module `TOP' with $logic_not.
Replacing $pos cell `$techmap\bot.$extend$bottleneck.v:83$680' (0) in module `\TOP' with constant driver `$techmap\bot.$extend$bottleneck.v:83$680_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:189$1024' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:189$1024_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Optimizing away select inverter for $mux cell `$techmap\cpu.$ternary$polaris.v:189$1025' in module `TOP'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:188$1022' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:188$1022_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:124$1257' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:124$1257_Y = \cpu.s.take_irq'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:124$1255' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:124$1255_Y = \cpu.s.ft0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:124$1253' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:124$1253_Y = \cpu.s.rst'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:124$1258' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:124$1258_Y = 1'0'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:251$1818' (0) in module `\TOP' with constant driver `$techmap\cpu.s.$ternary$seq.v:251$1818_Y = 0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:123$1251' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:123$1251_Y = \cpu.s.trap'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:123$1248' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:123$1248_Y = \cpu.s.take_irq'.
Replacing $not cell `$techmap\cpu.s.$not$seq.v:123$1249' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$not$seq.v:123$1249_Y = 1'1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:123$1246' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:123$1246_Y = \cpu.s.rst'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:586$2213' in module `\TOP' with identity for port B.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:199$1624' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:199$1624_Y = \cpu.s.ccr [7]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:199$1622' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:199$1622_Y = \cpu.s.fn3_is_111'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:199$1620' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:199$1620_Y = \cpu.s.xt4'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:199$1619' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:199$1619_Y = \cpu.s.isBr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:198$1617' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:198$1617_Y = \cpu.s.ccr [6]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:198$1615' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:198$1615_Y = \cpu.s.fn3_is_110'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:198$1613' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:198$1613_Y = \cpu.s.xt4'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:198$1612' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:198$1612_Y = \cpu.s.isBr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:197$1610' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:197$1610_Y = \cpu.s.ccr [5]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:197$1608' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:197$1608_Y = \cpu.s.fn3_is_101'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:197$1606' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:197$1606_Y = \cpu.s.xt4'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:197$1605' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:197$1605_Y = \cpu.s.isBr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:196$1603' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:196$1603_Y = \cpu.s.ccr [4]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:196$1601' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:196$1601_Y = \cpu.s.fn3_is_100'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:196$1599' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:196$1599_Y = \cpu.s.xt4'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:196$1598' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:196$1598_Y = \cpu.s.isBr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:195$1596' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:195$1596_Y = \cpu.s.ccr [1]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:195$1594' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:195$1594_Y = \cpu.s.fn3_is_001'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:195$1592' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:195$1592_Y = \cpu.s.xt4'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:195$1591' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:195$1591_Y = \cpu.s.isBr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:194$1589' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:194$1589_Y = \cpu.s.ccr [0]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:194$1587' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:194$1587_Y = \cpu.s.fn3_is_000'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:194$1585' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:194$1585_Y = \cpu.s.xt4'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:194$1584' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:194$1584_Y = \cpu.s.isBr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:211$1673' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:211$1673_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:211$1671' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:211$1671_Y = \cpu.s.isMRet'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:211$1669' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:211$1669_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:119$1210' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:119$1210_Y = \cpu.s.rst'.
Optimizing away select inverter for $mux cell `$techmap\cpu.$ternary$polaris.v:186$1019' in module `TOP'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:232$1793' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:232$1793_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:232$1791' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:232$1791_Y = \cpu.s.isCsrRcI'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:232$1789' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:232$1789_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:229$1773' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:229$1773_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:229$1771' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:229$1771_Y = \cpu.s.isCsrRc'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:229$1769' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:229$1769_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:226$1753' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:226$1753_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:226$1751' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:226$1751_Y = \cpu.s.isCsrRsI'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:226$1749' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:226$1749_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:223$1733' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:223$1733_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:223$1731' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:223$1731_Y = \cpu.s.isCsrRs'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:223$1729' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:223$1729_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:221$1719' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:221$1719_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:215$1685' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:215$1685_Y = \cpu.s.fn3_is_101'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:221$1717' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:221$1717_Y = \cpu.s.isCsrRwI'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:221$1715' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:221$1715_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:219$1705' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:219$1705_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:212$1676' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:212$1676_Y = \cpu.s.fn3_is_001'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:219$1703' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:219$1703_Y = \cpu.s.isCsrRw'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:219$1701' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:219$1701_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:170$1446' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:170$1446_Y = \cpu.s.isJal'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:170$1444' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:170$1444_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:170$1442' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:170$1442_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:166$1422' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:166$1422_Y = \cpu.s.isJalr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:166$1420' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:166$1420_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:166$1418' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:166$1418_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:190$1564' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:190$1564_Y = \cpu.s.isBr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:190$1562' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:190$1562_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:190$1560' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:190$1560_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:185$1534' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:185$1534_Y = \cpu.s.isStore'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:185$1532' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:185$1532_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:185$1530' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:185$1530_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:150$1359' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:150$1359_Y = \cpu.s.isOpR'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:150$1357' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:150$1357_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:150$1355' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:150$1355_Y = \cpu.s.rst'.
Replacing $or cell `$techmap\cpu.$or$polaris.v:129$924' in module `\TOP' with identity for port A.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:228$1767' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:228$1767_Y = \cpu.s.csrok_i'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:228$1765' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:228$1765_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:228$1763' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:228$1763_Y = \cpu.s.isCsrRc'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:228$1761' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:228$1761_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:222$1727' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:222$1727_Y = \cpu.s.csrok_i'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:222$1725' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:222$1725_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:222$1723' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:222$1723_Y = \cpu.s.isCsrRs'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:222$1721' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:222$1721_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:218$1699' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:218$1699_Y = \cpu.s.csrok_i'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:218$1697' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:218$1697_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:218$1695' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:218$1695_Y = \cpu.s.isCsrRw'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:218$1693' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:218$1693_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:189$1558' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:189$1558_Y = \cpu.s.isBr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:189$1556' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:189$1556_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:189$1554' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:189$1554_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:184$1528' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:184$1528_Y = \cpu.s.isStore'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:184$1526' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:184$1526_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:184$1524' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:184$1524_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:180$1499' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:180$1499_Y = \cpu.s.isLoad'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:180$1497' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:180$1497_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:180$1495' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:180$1495_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:167$1428' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:167$1428_Y = \cpu.s.isJalr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:167$1426' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:167$1426_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:167$1424' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:167$1424_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:149$1353' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:149$1353_Y = \cpu.s.isOpR'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:149$1351' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:149$1351_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:149$1349' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:149$1349_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:136$1300' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:136$1300_Y = \cpu.s.isOpI'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:136$1298' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:136$1298_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:136$1296' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:136$1296_Y = \cpu.s.rst'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:176$996' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:176$996_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:175$993' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:175$993_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:507$1105' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:507$1105_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:506$1102' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:506$1102_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:505$1099' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:505$1099_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:504$1096' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:504$1096_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:504$1097' (?) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:504$1097_Y = $techmap\cpu.csrs.$extend$polaris.v:504$1096_Y'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:503$1093' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:503$1093_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:502$1090' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:502$1090_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:501$1087' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:501$1087_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:500$1084' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:500$1084_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:499$1081' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:499$1081_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:498$1078' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:498$1078_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:497$1075' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:497$1075_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:497$1076' (?) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:497$1076_Y = $techmap\cpu.csrs.$extend$polaris.v:497$1075_Y'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:496$1072' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:496$1072_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:496$1073' (?) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:496$1073_Y = $techmap\cpu.csrs.$extend$polaris.v:496$1072_Y'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:495$1069' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:495$1069_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:494$1066' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:494$1066_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:494$1067' (?) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:494$1067_Y = $techmap\cpu.csrs.$extend$polaris.v:494$1066_Y'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:493$1063' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:493$1063_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:492$1060' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:492$1060_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:492$1061' (?) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:492$1061_Y = $techmap\cpu.csrs.$extend$polaris.v:492$1060_Y'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:491$1057' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:491$1057_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:491$1058' (?) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:491$1058_Y = $techmap\cpu.csrs.$extend$polaris.v:491$1057_Y'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:490$1055' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:490$1055_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:491$1059' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:492$1062' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:494$1068' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:496$1074' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:497$1077' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:504$1098' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.$or$polaris.v:130$925' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:174$990' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:174$990_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:173$988' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:173$988_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:172$985' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:172$985_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:191$1570' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:191$1570_Y = \cpu.s.isBr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:191$1568' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:191$1568_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:191$1566' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:191$1566_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:151$1365' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:151$1365_Y = \cpu.s.isOpR'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:151$1363' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:151$1363_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:151$1361' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:151$1361_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:181$1505' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:181$1505_Y = \cpu.s.isLoad'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:181$1503' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:181$1503_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:181$1501' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:181$1501_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:168$1434' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:168$1434_Y = \cpu.s.isJalr'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:168$1432' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:168$1432_Y = \cpu.s.xt2'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:168$1430' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:168$1430_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:137$1306' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:137$1306_Y = \cpu.s.isOpI'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:137$1304' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:137$1304_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:137$1302' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:137$1302_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:174$1468' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:174$1468_Y = \cpu.s.isLuiAuipc'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:174$1466' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:174$1466_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:174$1464' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:174$1464_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:171$1452' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:171$1452_Y = \cpu.s.isJal'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:171$1450' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:171$1450_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:171$1448' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:171$1448_Y = \cpu.s.rst'.
Optimizing away select inverter for $mux cell `$techmap\cpu.$ternary$polaris.v:172$986' in module `TOP'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:171$982' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:171$982_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:170$979' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:170$979_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:169$976' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:169$976_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:168$973' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:168$973_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:167$970' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:167$970_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:166$967' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:166$967_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:165$965' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:165$965_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.xrs.$extend$xrs.v:23$2343' (0) in module `\TOP' with constant driver `$techmap\cpu.xrs.$extend$xrs.v:23$2343_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:163$962' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:163$962_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:176$1484' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:176$1484_Y = \cpu.s.ir [5]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:176$1482' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:176$1482_Y = \cpu.s.isLuiAuipc'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:176$1480' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:176$1480_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:176$1478' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:176$1478_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:175$1476' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:175$1476_Y = \cpu.s.ir [5]'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:175$1474' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:175$1474_Y = \cpu.s.isLuiAuipc'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:175$1472' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:175$1472_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:175$1470' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:175$1470_Y = \cpu.s.rst'.
Optimizing away select inverter for $mux cell `$techmap\cpu.$ternary$polaris.v:163$963' in module `TOP'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:162$959' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:162$959_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:161$956' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:161$956_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:160$954' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:160$954_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:149$947' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:149$947_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $not cell `$techmap\cpu.$not$polaris.v:143$939' (double_invert) in module `\TOP' with constant driver `$techmap\cpu.$not$polaris.v:143$939_Y = $techmap\cpu.alu.$reduce_or$alu.v:34$7_Y'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:140$935' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:140$935_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:139$932' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:139$932_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$extend$polaris.v:138$930' (0) in module `\TOP' with constant driver `$techmap\cpu.$extend$polaris.v:138$930_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:148$900' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:148$900_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\bot.$extend$bottleneck.v:69$676' (0) in module `\TOP' with constant driver `$techmap\bot.$extend$bottleneck.v:69$676_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $eq cell `$techmap\wb_bridge.$eq$bridge.v:36$730' in module `TOP' with $logic_not.
Replacing $eq cell `$techmap\wb_bridge.$eq$bridge.v:24$719' in module `TOP' with $logic_not.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:137$880' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:137$880_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:137$881' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:137$881_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:136$877' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:136$877_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:136$878' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:136$878_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:135$874' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:135$874_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:135$875' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:135$875_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:134$871' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:134$871_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:134$872' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:134$872_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:133$868' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:133$868_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:133$869' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:133$869_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:132$866' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:132$866_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:132$867' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:132$867_Y = 0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:133$870' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:134$873' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:135$876' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:136$879' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:137$882' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:147$897' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:147$897_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $eq cell `$techmap\wb_bridge.$eq$bridge.v:41$734' in module `TOP' with $logic_not.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:129$860' (16'0000000000000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:129$860_Y = 0'.
Replacing $eq cell `$techmap\wb_bridge.$eq$bridge.v:40$733' in module `TOP' with $logic_not.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:129$861' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:129$861_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:128$857' (16'0000000000000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:128$857_Y = 0'.
Replacing $eq cell `$techmap\wb_bridge.$eq$bridge.v:39$732' in module `TOP' with $logic_not.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:128$858' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:128$858_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:127$855' (16'0000000000000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:127$855_Y = 0'.
Replacing $eq cell `$techmap\wb_bridge.$eq$bridge.v:38$731' in module `TOP' with $logic_not.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:127$856' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:127$856_Y = 0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:128$859' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:129$862' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:146$894' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:146$894_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $eq cell `$techmap\wb_bridge.$eq$bridge.v:44$736' in module `TOP' with inverter.
Replacing $eq cell `$techmap\wb_bridge.$eq$bridge.v:43$735' (1) in module `\TOP' with constant driver `$techmap\wb_bridge.$eq$bridge.v:43$735_Y = \wb_bridge.f_adr_i [2]'.
Replacing $and cell `$techmap\wb_bridge.$and$bridge.v:47$737' (const_and) in module `\TOP' with constant driver `$techmap\wb_bridge.$and$bridge.v:47$737_Y = 1'0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:124$852' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:124$852_Y = 0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:125$854' in module `\TOP' with identity for port B.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:145$892' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:145$892_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\arb.$ternary$arbiter.v:73$75' (?) in module `\TOP' with constant driver `$techmap\arb.$ternary$arbiter.v:73$75_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\arb.$or$arbiter.v:73$77' in module `\TOP' with identity for port B.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:109$838' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:109$838_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:109$839' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:109$839_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:108$835' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:108$835_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:108$836' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:108$836_Y = 0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:108$837' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:109$840' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:103$827' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:103$827_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:103$828' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:103$828_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:102$824' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:102$824_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:102$825' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:102$825_Y = 0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:102$826' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:103$829' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:97$816' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:97$816_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:97$817' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:97$817_Y = 0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:97$818' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:91$805' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:91$805_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:91$806' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:91$806_Y = 0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:91$807' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:85$794' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:85$794_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:85$795' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:85$795_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:84$791' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:84$791_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:84$792' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:84$792_Y = 0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:84$793' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:85$796' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:79$783' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:79$783_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:79$784' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:79$784_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$extend$bridge.v:78$780' (8'00000000) in module `\TOP' with constant driver `$techmap\wb_bridge.$extend$bridge.v:78$780_Y = 0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:78$781' (?) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:78$781_Y = 0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:78$782' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:79$785' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:65$760' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:64$757' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:63$754' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:62$751' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\arb.$and$arbiter.v:75$81' (const_and) in module `\TOP' with constant driver `$techmap\arb.$and$arbiter.v:75$81_Y = 1'0'.
Replacing $or cell `$techmap\arb.$or$arbiter.v:75$83' in module `\TOP' with identity for port B.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$176' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$176_Y = \bot.bs.SAckI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$173' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$173_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$170' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$170_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$167' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$167_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$164' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$164_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$162' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$162_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$160' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$160_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$158' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$158_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$156' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:50$156_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:46$107' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:46$107_Y = \bot.bs.aligned'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:46$105' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:46$105_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:46$103' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:46$103_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:46$101' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:46$101_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:204$1646' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:204$1646_Y = \cpu.s.xt2'.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:200$1626' in module `TOP' with $logic_not.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:204$1644' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:204$1644_Y = \cpu.s.isFence'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:204$1642' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:204$1642_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:203$1640' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:203$1640_Y = \cpu.s.xt1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:203$1638' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:203$1638_Y = \cpu.s.isFence'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:203$1636' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:203$1636_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:231$1787' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:231$1787_Y = \cpu.s.csrok_i'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:231$1785' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:231$1785_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:231$1783' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:231$1783_Y = \cpu.s.isCsrRcI'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:231$1781' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:231$1781_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:225$1747' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:225$1747_Y = \cpu.s.csrok_i'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:225$1745' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:225$1745_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:225$1743' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:225$1743_Y = \cpu.s.isCsrRsI'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:225$1741' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:225$1741_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:220$1713' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:220$1713_Y = \cpu.s.csrok_i'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:220$1711' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:220$1711_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:220$1709' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:220$1709_Y = \cpu.s.isCsrRwI'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:220$1707' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:220$1707_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:202$1634' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:202$1634_Y = \cpu.s.xt0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:202$1632' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:202$1632_Y = \cpu.s.isFence'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:202$1630' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:202$1630_Y = \cpu.s.rst'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:205$1652' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:205$1652_Y = \cpu.s.xt3'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:205$1650' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:205$1650_Y = \cpu.s.isFence'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:205$1648' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:205$1648_Y = \cpu.s.rst'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:256$1823' (0) in module `\TOP' with constant driver `$techmap\cpu.s.$ternary$seq.v:256$1823_Y = 0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:599$2240' in module `\TOP' with identity for port A.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:121$1231' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:121$1231_Y = \cpu.s.iack_i'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:121$1228' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:121$1228_Y = \cpu.s.trap_o'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:121$1225' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:121$1225_Y = \cpu.s.take_irq'.
Replacing $not cell `$techmap\cpu.s.$not$seq.v:121$1226' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$not$seq.v:121$1226_Y = 1'1'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:121$1223' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:121$1223_Y = \cpu.s.ft0'.
Replacing $reduce_or cell `$techmap\cpu.s.$reduce_or$seq.v:121$1221' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.s.$reduce_or$seq.v:121$1221_Y = \cpu.s.rst'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:253$1820' (0) in module `\TOP' with constant driver `$techmap\cpu.s.$ternary$seq.v:253$1820_Y = 0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:591$2219' in module `\TOP' with identity for port B.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:252$1819' (0) in module `\TOP' with constant driver `$techmap\cpu.s.$ternary$seq.v:252$1819_Y = 0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:571$2170' in module `\TOP' with identity for port B.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:254$1821' (0) in module `\TOP' with constant driver `$techmap\cpu.s.$ternary$seq.v:254$1821_Y = 0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:563$2161' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:255$1822' (0) in module `\TOP' with constant driver `$techmap\cpu.s.$ternary$seq.v:255$1822_Y = 0'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:250$1817' (0) in module `\TOP' with constant driver `$techmap\cpu.s.$ternary$seq.v:250$1817_Y = 0'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:569$1206' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:569$1206_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $not cell `$techmap\cpu.csrs.$not$polaris.v:569$1204' (1'0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$not$polaris.v:569$1204_Y = 1'1'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:568$1201' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:568$1201_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $and cell `$techmap\cpu.csrs.$and$polaris.v:568$1199' (const_and) in module `\TOP' with constant driver `$techmap\cpu.csrs.$and$polaris.v:568$1199_Y = 1'0'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:568$1202' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:568$1202_Y = $techmap\cpu.csrs.$extend$polaris.v:568$1201_Y'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:569$1208' in module `\TOP' with identity for port B.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:566$1195' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:566$1195_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:565$1190' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:565$1190_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:563$1185' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:563$1185_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Optimizing away select inverter for $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:563$1186' in module `TOP'.
Optimizing away select inverter for $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:558$1179' in module `TOP'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:548$1165' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:548$1165_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Optimizing away select inverter for $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:548$1166' in module `TOP'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:547$1162' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:547$1162_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:547$1163' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:547$1163_Y = $techmap\cpu.csrs.$extend$polaris.v:547$1162_Y'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:546$1159' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:546$1159_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:545$1157' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:545$1157_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:547$1164' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:537$1149' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:537$1149_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Optimizing away select inverter for $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:537$1150' in module `TOP'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:536$1146' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:536$1146_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.csrs.$extend$polaris.v:535$1144' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$extend$polaris.v:535$1144_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Optimizing away select inverter for $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:528$1139' in module `TOP'.
Optimizing away select inverter for $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:521$1127' in module `TOP'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:518$1119' (?) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:518$1119_Y = 0'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:519$1122' in module `\TOP' with identity for port B.
Optimizing away select inverter for $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:513$1114' in module `TOP'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$458' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$458_Y = \bot.bs.SAckI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$456' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$456_Y = \bot.bs.ack3'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$454' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$454_Y = \bot.bs.ack2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$452' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$452_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$449' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$449_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$446' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$446_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$443' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$443_Y = \bot.bs.MAdrI2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$441' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$441_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$439' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$439_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$437' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$437_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$435' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$435_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$433' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:61$433_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$406' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$406_Y = \bot.bs.SAckI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$404' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$404_Y = \bot.bs.ack3'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$402' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$402_Y = \bot.bs.ack2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$399' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$399_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$396' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$396_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$393' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$393_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$390' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$390_Y = \bot.bs.MAdrI2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$388' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$388_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$386' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$386_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$384' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$384_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$382' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$382_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$380' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:59$380_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$352' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$352_Y = \bot.bs.SAckI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$350' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$350_Y = \bot.bs.ack3'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$347' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$347_Y = \bot.bs.ack2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$344' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$344_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$341' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$341_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$338' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$338_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$335' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$335_Y = \bot.bs.MAdrI2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$333' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$333_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$331' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$331_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$329' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$329_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$327' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$327_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$325' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:57$325_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$296' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$296_Y = \bot.bs.SAckI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$293' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$293_Y = \bot.bs.ack3'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$290' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$290_Y = \bot.bs.ack2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$287' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$287_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$284' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$284_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$281' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$281_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$278' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$278_Y = \bot.bs.MAdrI2'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$276' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$276_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$274' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$274_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$272' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$272_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$270' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$270_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$268' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:55$268_Y = \bot.bs.ResetI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$216' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$216_Y = \bot.bs.SAckI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$214' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$214_Y = \bot.bs.ack1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$211' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$211_Y = \bot.bs.MAdrI0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$208' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$208_Y = \bot.bs.MAdrI1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$205' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$205_Y = \bot.bs.MSiz0'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$203' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$203_Y = \bot.bs.MSiz1'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$201' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$201_Y = \bot.bs.MStbI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$199' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$199_Y = \bot.bs.MCycI'.
Replacing $reduce_or cell `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$197' (unary_buffer) in module `\TOP' with constant driver `$techmap\bot.bs.$reduce_or$bottleneckSequencer.v:52$197_Y = \bot.bs.ResetI'.
Replacing $pos cell `$techmap\wb_bridge.$or$bridge.v:133$870' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$or$bridge.v:133$870_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$or$bridge.v:134$873' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$or$bridge.v:134$873_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$or$bridge.v:135$876' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$or$bridge.v:135$876_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$or$bridge.v:136$879' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$or$bridge.v:136$879_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$or$bridge.v:137$882' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$or$bridge.v:137$882_Y = 0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:138$885' in module `\TOP' with identity for port B.
Replacing $logic_not cell `$techmap\wb_bridge.$eq$bridge.v:41$734' (2'00) in module `\TOP' with constant driver `$techmap\wb_bridge.$eq$bridge.v:41$734_Y = 1'1'.
Replacing $pos cell `$techmap\wb_bridge.$or$bridge.v:128$859' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$or$bridge.v:128$859_Y = 0'.
Replacing $pos cell `$techmap\wb_bridge.$or$bridge.v:129$862' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$or$bridge.v:129$862_Y = 0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:130$865' in module `\TOP' with identity for port B.
Replacing $not cell `$techmap\wb_bridge.$eq$bridge.v:44$736' (1'0) in module `\TOP' with constant driver `$techmap\wb_bridge.$eq$bridge.v:44$736_Y = 1'1'.
Replacing $logic_not cell `$techmap\wb_bridge.$eq$bridge.v:40$733' (2'01) in module `\TOP' with constant driver `$techmap\wb_bridge.$eq$bridge.v:40$733_Y = 1'0'.
Replacing $and cell `$techmap\wb_bridge.$and$bridge.v:51$741' (const_and) in module `\TOP' with constant driver `$techmap\wb_bridge.$and$bridge.v:51$741_Y = 1'0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:67$767' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:66$764' in module `\TOP' with identity for port A.
Replacing $logic_not cell `$techmap\wb_bridge.$eq$bridge.v:39$732' (2'10) in module `\TOP' with constant driver `$techmap\wb_bridge.$eq$bridge.v:39$732_Y = 1'0'.
Replacing $and cell `$techmap\wb_bridge.$and$bridge.v:50$740' (const_and) in module `\TOP' with constant driver `$techmap\wb_bridge.$and$bridge.v:50$740_Y = 1'0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:65$761' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:64$758' in module `\TOP' with identity for port A.
Replacing $logic_not cell `$techmap\wb_bridge.$eq$bridge.v:38$731' (2'11) in module `\TOP' with constant driver `$techmap\wb_bridge.$eq$bridge.v:38$731_Y = 1'0'.
Replacing $and cell `$techmap\wb_bridge.$and$bridge.v:49$739' (const_and) in module `\TOP' with constant driver `$techmap\wb_bridge.$and$bridge.v:49$739_Y = 1'0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:63$755' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:62$752' in module `\TOP' with identity for port A.

12.7.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:491$1059': $techmap\cpu.csrs.$or$polaris.v:491$1059_Y = $techmap\cpu.csrs.$ternary$polaris.v:490$1056_Y
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:492$1062': $techmap\cpu.csrs.$or$polaris.v:492$1062_Y = $techmap\cpu.csrs.$or$polaris.v:491$1059_Y
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:494$1068': $techmap\cpu.csrs.$or$polaris.v:494$1068_Y = $techmap\cpu.csrs.$or$polaris.v:493$1065_Y
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:496$1074': $techmap\cpu.csrs.$or$polaris.v:496$1074_Y = $techmap\cpu.csrs.$or$polaris.v:495$1071_Y
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:497$1077': $techmap\cpu.csrs.$or$polaris.v:497$1077_Y = $techmap\cpu.csrs.$or$polaris.v:496$1074_Y
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:504$1098': $techmap\cpu.csrs.$or$polaris.v:504$1098_Y = $techmap\cpu.csrs.$or$polaris.v:503$1095_Y
  removing buffer cell `$techmap\cpu.csrs.$extend$polaris.v:512$1111': $techmap\cpu.csrs.$extend$polaris.v:512$1111_Y = \cpu.csrs.cdat_i [11]
  removing buffer cell `$techmap\cpu.csrs.$extend$polaris.v:513$1113': $techmap\cpu.csrs.$extend$polaris.v:513$1113_Y = \cpu.csrs.irqEn
  removing buffer cell `$techmap\cpu.csrs.$extend$polaris.v:519$1120': $techmap\cpu.csrs.$extend$polaris.v:519$1120_Y = \cpu.csrs.mpie
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:519$1122': $techmap\cpu.csrs.$or$polaris.v:519$1122_Y = $techmap\cpu.csrs.$ternary$polaris.v:519$1121_Y
  removing buffer cell `$techmap\cpu.csrs.$extend$polaris.v:520$1123': $techmap\cpu.csrs.$extend$polaris.v:520$1123_Y = \cpu.csrs.cdat_i [3]
  removing buffer cell `$techmap\cpu.csrs.$extend$polaris.v:521$1126': $techmap\cpu.csrs.$extend$polaris.v:521$1126_Y = \cpu.csrs.mie
  removing buffer cell `$techmap\cpu.csrs.$extend$polaris.v:525$1131': $techmap\cpu.csrs.$extend$polaris.v:525$1131_Y = \cpu.csrs.mie
  removing buffer cell `$techmap\cpu.csrs.$extend$polaris.v:527$1135': $techmap\cpu.csrs.$extend$polaris.v:527$1135_Y = \cpu.csrs.cdat_i [7]
  removing buffer cell `$techmap\cpu.csrs.$extend$polaris.v:528$1138': $techmap\cpu.csrs.$extend$polaris.v:528$1138_Y = \cpu.csrs.mpie
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:547$1164': $techmap\cpu.csrs.$or$polaris.v:547$1164_Y = $techmap\cpu.csrs.$or$polaris.v:546$1161_Y
  removing buffer cell `$techmap\cpu.csrs.$extend$polaris.v:558$1178': $techmap\cpu.csrs.$extend$polaris.v:558$1178_Y = \cpu.csrs.mcause
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:569$1208': $techmap\cpu.csrs.$or$polaris.v:569$1208_Y = $techmap\cpu.csrs.$ternary$polaris.v:569$1207_Y
  removing buffer cell `$techmap\cpu.s.$or$seq.v:563$2161': $techmap\cpu.s.$or$seq.v:563$2161_Y = \cpu.s.out1713
  removing buffer cell `$techmap\cpu.s.$or$seq.v:571$2170': $techmap\cpu.s.$or$seq.v:571$2170_Y = \cpu.s.out1519
  removing buffer cell `$techmap\cpu.s.$or$seq.v:586$2213': $techmap\cpu.s.$or$seq.v:586$2213_Y = \cpu.s.out1518
  removing buffer cell `$techmap\cpu.s.$or$seq.v:591$2219': $techmap\cpu.s.$or$seq.v:591$2219_Y = \cpu.s.out1520
  removing buffer cell `$techmap\cpu.s.$or$seq.v:599$2240': $techmap\cpu.s.$or$seq.v:599$2240_Y = $techmap\cpu.s.$or$seq.v:599$2239_Y
  removing buffer cell `$techmap\arb.$or$arbiter.v:73$77': $techmap\arb.$or$arbiter.v:73$77_Y = $techmap\arb.$ternary$arbiter.v:73$76_Y
  removing buffer cell `$techmap\arb.$or$arbiter.v:75$83': $techmap\arb.$or$arbiter.v:75$83_Y = $techmap\arb.$and$arbiter.v:75$82_Y
  removing buffer cell `$techmap\arb.$or$arbiter.v:79$95': $techmap\arb.$or$arbiter.v:79$95_Y = $techmap\arb.$and$arbiter.v:79$94_Y
  removing buffer cell `$techmap\bot.$extend$bottleneck.v:58$645': $techmap\bot.$extend$bottleneck.v:58$645_Y = \bot.m_we_i
  removing buffer cell `$techmap\bot.$extend$bottleneck.v:59$647': $techmap\bot.$extend$bottleneck.v:59$647_Y = \bot.m_stb_i
  removing buffer cell `$techmap\bot.$extend$bottleneck.v:60$651': $techmap\bot.$extend$bottleneck.v:60$651_Y = \bot.m_siz_i [0]
  removing buffer cell `$techmap\bot.$extend$bottleneck.v:61$655': $techmap\bot.$extend$bottleneck.v:61$655_Y = \bot.m_signed_i
  removing buffer cell `$techmap\bot.$extend$bottleneck.v:63$657': $techmap\bot.$extend$bottleneck.v:63$657_Y = \bot.m_dat_i [63:48]
  removing buffer cell `$techmap\bot.$extend$bottleneck.v:64$659': $techmap\bot.$extend$bottleneck.v:64$659_Y = \bot.m_dat_i [47:32]
  removing buffer cell `$techmap\bot.$extend$bottleneck.v:65$662': $techmap\bot.$extend$bottleneck.v:65$662_Y = \bot.m_dat_i [31:16]
  removing buffer cell `$techmap\bot.$extend$bottleneck.v:66$665': $techmap\bot.$extend$bottleneck.v:66$665_Y = \bot.m_dat_i [15:0]
  removing buffer cell `$techmap\bot.$extend$bottleneck.v:91$714': $techmap\bot.$extend$bottleneck.v:91$714_Y = \bot.s_ack_i
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:62$751': $techmap\wb_bridge.$or$bridge.v:62$751_Y = \wb_bridge.den
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:62$752': $techmap\wb_bridge.$or$bridge.v:62$752_Y = $techmap\wb_bridge.$or$bridge.v:62$751_Y
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:63$754': $techmap\wb_bridge.$or$bridge.v:63$754_Y = \wb_bridge.den
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:63$755': $techmap\wb_bridge.$or$bridge.v:63$755_Y = $techmap\wb_bridge.$or$bridge.v:63$754_Y
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:64$757': $techmap\wb_bridge.$or$bridge.v:64$757_Y = \wb_bridge.den
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:64$758': $techmap\wb_bridge.$or$bridge.v:64$758_Y = $techmap\wb_bridge.$or$bridge.v:64$757_Y
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:65$760': $techmap\wb_bridge.$or$bridge.v:65$760_Y = \wb_bridge.den
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:65$761': $techmap\wb_bridge.$or$bridge.v:65$761_Y = $techmap\wb_bridge.$or$bridge.v:65$760_Y
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:66$764': $techmap\wb_bridge.$or$bridge.v:66$764_Y = $techmap\wb_bridge.$or$bridge.v:66$763_Y
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:67$767': $techmap\wb_bridge.$or$bridge.v:67$767_Y = $techmap\wb_bridge.$or$bridge.v:67$766_Y
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:76$775': $techmap\wb_bridge.$extend$bridge.v:76$775_Y = \wb_bridge.f_dat_i [7:0]
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:77$777': $techmap\wb_bridge.$extend$bridge.v:77$777_Y = \wb_bridge.f_dat_i [15:8]
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:78$782': $techmap\wb_bridge.$or$bridge.v:78$782_Y = $techmap\wb_bridge.$or$bridge.v:77$779_Y
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:79$785': $techmap\wb_bridge.$or$bridge.v:79$785_Y = $techmap\wb_bridge.$or$bridge.v:78$782_Y
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:82$786': $techmap\wb_bridge.$extend$bridge.v:82$786_Y = \wb_bridge.f_dat_i [7:0]
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:83$788': $techmap\wb_bridge.$extend$bridge.v:83$788_Y = \wb_bridge.f_dat_i [7:0]
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:84$793': $techmap\wb_bridge.$or$bridge.v:84$793_Y = $techmap\wb_bridge.$or$bridge.v:83$790_Y
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:85$796': $techmap\wb_bridge.$or$bridge.v:85$796_Y = $techmap\wb_bridge.$or$bridge.v:84$793_Y
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:88$797': $techmap\wb_bridge.$extend$bridge.v:88$797_Y = \wb_bridge.f_dat_i [7:0]
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:89$799': $techmap\wb_bridge.$extend$bridge.v:89$799_Y = \wb_bridge.f_dat_i [15:8]
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:90$802': $techmap\wb_bridge.$extend$bridge.v:90$802_Y = \wb_bridge.f_dat_i [15:8]
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:91$807': $techmap\wb_bridge.$or$bridge.v:91$807_Y = $techmap\wb_bridge.$or$bridge.v:90$804_Y
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:94$808': $techmap\wb_bridge.$extend$bridge.v:94$808_Y = \wb_bridge.f_dat_i [7:0]
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:95$810': $techmap\wb_bridge.$extend$bridge.v:95$810_Y = \wb_bridge.f_dat_i [7:0]
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:96$813': $techmap\wb_bridge.$extend$bridge.v:96$813_Y = \wb_bridge.f_dat_i [7:0]
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:97$818': $techmap\wb_bridge.$or$bridge.v:97$818_Y = $techmap\wb_bridge.$or$bridge.v:96$815_Y
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:100$819': $techmap\wb_bridge.$extend$bridge.v:100$819_Y = \wb_bridge.f_dat_i [7:0]
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:101$821': $techmap\wb_bridge.$extend$bridge.v:101$821_Y = \wb_bridge.f_dat_i [15:8]
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:102$826': $techmap\wb_bridge.$or$bridge.v:102$826_Y = $techmap\wb_bridge.$or$bridge.v:101$823_Y
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:103$829': $techmap\wb_bridge.$or$bridge.v:103$829_Y = $techmap\wb_bridge.$or$bridge.v:102$826_Y
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:106$830': $techmap\wb_bridge.$extend$bridge.v:106$830_Y = \wb_bridge.f_dat_i [7:0]
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:107$832': $techmap\wb_bridge.$extend$bridge.v:107$832_Y = \wb_bridge.f_dat_i [7:0]
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:108$837': $techmap\wb_bridge.$or$bridge.v:108$837_Y = $techmap\wb_bridge.$or$bridge.v:107$834_Y
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:109$840': $techmap\wb_bridge.$or$bridge.v:109$840_Y = $techmap\wb_bridge.$or$bridge.v:108$837_Y
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:112$841': $techmap\wb_bridge.$extend$bridge.v:112$841_Y = \wb_bridge.f_dat_i [7:0]
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:113$843': $techmap\wb_bridge.$extend$bridge.v:113$843_Y = \wb_bridge.f_dat_i [15:8]
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:114$846': $techmap\wb_bridge.$extend$bridge.v:114$846_Y = \wb_bridge.f_dat_i [15:8]
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:115$849': $techmap\wb_bridge.$extend$bridge.v:115$849_Y = \wb_bridge.f_dat_i [15:8]
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:125$854': $techmap\wb_bridge.$or$bridge.v:125$854_Y = $techmap\wb_bridge.$ternary$bridge.v:125$853_Y
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:130$863': $techmap\wb_bridge.$extend$bridge.v:130$863_Y = \wb_bridge.wb_dat_i [15:0]
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:130$865': $techmap\wb_bridge.$or$bridge.v:130$865_Y = $techmap\wb_bridge.$ternary$bridge.v:130$864_Y
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:138$883': $techmap\wb_bridge.$extend$bridge.v:138$883_Y = \wb_bridge.wb_dat_i [15:8]
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:138$885': $techmap\wb_bridge.$or$bridge.v:138$885_Y = $techmap\wb_bridge.$ternary$bridge.v:138$884_Y
  removing buffer cell `$techmap\wb_bridge.$extend$bridge.v:139$886': $techmap\wb_bridge.$extend$bridge.v:139$886_Y = \wb_bridge.wb_dat_i [7:0]
  removing buffer cell `$techmap\cpu.$or$polaris.v:130$925': $techmap\cpu.$or$polaris.v:130$925_Y = \cpu.icdat_i
  removing buffer cell `$techmap\cpu.$extend$polaris.v:177$999': $techmap\cpu.$extend$polaris.v:177$999_Y = \cpu.ir [19:15]
  removing buffer cell `$techmap\cpu.$extend$polaris.v:178$1001': $techmap\cpu.$extend$polaris.v:178$1001_Y = \cpu.ir [24:20]
  removing buffer cell `$techmap\cpu.$extend$polaris.v:179$1004': $techmap\cpu.$extend$polaris.v:179$1004_Y = \cpu.ir [11:7]
  removing buffer cell `$techmap\cpu.$or$polaris.v:129$924': $techmap\cpu.$or$polaris.v:129$924_Y = \cpu.icvalid_i
  removing unused `$not' cell `$techmap\cpu.$not$polaris.v:191$1029'.
  removing unused `$not' cell `$techmap\cpu.$not$polaris.v:187$1021'.
  removing unused `$logic_not' cell `$techmap\cpu.$logic_not$polaris.v:180$1008'.
  removing unused `$logic_not' cell `$techmap\cpu.$logic_not$polaris.v:158$953'.
  removing unused `$logic_not' cell `$techmap\cpu.$logic_not$polaris.v:157$951'.
  removing unused `$and' cell `$techmap\cpu.$and$polaris.v:135$928'.
  removing unused `$reduce_or' cell `$techmap\cpu.$reduce_or$polaris.v:132$926'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:148$901'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:148$902'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:147$899'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:147$898'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:146$896'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:146$895'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:145$893'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:142$891'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:141$890'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:140$889'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:139$888'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:139$887'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:138$884'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:130$864'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:125$853'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:107$834'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:107$833'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:106$831'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:101$823'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:101$822'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:100$820'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:96$815'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:96$814'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:95$812'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:95$811'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:94$809'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:90$804'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:90$803'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:89$801'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:89$800'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:88$798'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:83$790'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:83$789'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:82$787'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:77$779'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:77$778'.
  removing unused `$mux' cell `$techmap\wb_bridge.$ternary$bridge.v:76$776'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:67$768'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:67$766'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:66$765'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:66$763'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:65$762'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:64$759'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:63$756'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:62$753'.
  removing unused `$and' cell `$techmap\wb_bridge.$and$bridge.v:58$748'.
  removing unused `$and' cell `$techmap\wb_bridge.$and$bridge.v:57$747'.
  removing unused `$and' cell `$techmap\wb_bridge.$and$bridge.v:56$746'.
  removing unused `$and' cell `$techmap\wb_bridge.$and$bridge.v:55$745'.
  removing unused `$and' cell `$techmap\wb_bridge.$and$bridge.v:54$744'.
  removing unused `$and' cell `$techmap\wb_bridge.$and$bridge.v:53$743'.
  removing unused `$eq' cell `$techmap\wb_bridge.$eq$bridge.v:34$728'.
  removing unused `$eq' cell `$techmap\wb_bridge.$eq$bridge.v:33$727'.
  removing unused `$eq' cell `$techmap\wb_bridge.$eq$bridge.v:32$726'.
  removing unused `$eq' cell `$techmap\wb_bridge.$eq$bridge.v:31$725'.
  removing unused `$eq' cell `$techmap\wb_bridge.$eq$bridge.v:30$724'.
  removing unused `$eq' cell `$techmap\wb_bridge.$eq$bridge.v:29$723'.
  removing unused `$mux' cell `$techmap\bot.$ternary$bottleneck.v:61$656'.
  removing unused `$and' cell `$techmap\bot.$and$bottleneck.v:57$644'.
  removing unused `$not' cell `$techmap\bot.$not$bottleneck.v:57$643'.
  removing unused `$or' cell `$techmap\cpu.s.$or$seq.v:548$2127'.
  removing unused `$or' cell `$techmap\cpu.s.$or$seq.v:548$2126'.
  removing unused `$or' cell `$techmap\cpu.s.$or$seq.v:548$2125'.
  removing unused `$or' cell `$techmap\cpu.s.$or$seq.v:540$2124'.
  removing unused `$or' cell `$techmap\cpu.s.$or$seq.v:540$2123'.
  removing unused `$or' cell `$techmap\cpu.s.$or$seq.v:540$2122'.
  removing unused `$or' cell `$techmap\cpu.s.$or$seq.v:540$2121'.
  removing unused `$or' cell `$techmap\cpu.s.$or$seq.v:540$2120'.
  removing unused `$mux' cell `$techmap\cpu.s.$ternary$seq.v:517$2084'.
  removing unused `$mux' cell `$techmap\cpu.s.$ternary$seq.v:504$2071'.
  removing unused `$mux' cell `$techmap\cpu.s.$ternary$seq.v:490$2057'.
  removing unused `$mux' cell `$techmap\cpu.s.$ternary$seq.v:477$2044'.
  removing unused `$mux' cell `$techmap\cpu.s.$ternary$seq.v:467$2034'.
  removing unused `$mux' cell `$techmap\cpu.s.$ternary$seq.v:459$2026'.
  removing unused `$mux' cell `$techmap\cpu.s.$ternary$seq.v:437$2004'.
  removing unused `$mux' cell `$techmap\cpu.s.$ternary$seq.v:435$2002'.
  removing unused `$mux' cell `$techmap\cpu.s.$ternary$seq.v:433$2000'.
  removing unused `$mux' cell `$techmap\cpu.s.$ternary$seq.v:431$1998'.
  removing unused `$and' cell `$techmap\cpu.s.$and$seq.v:124$1256'.
  removing unused `$not' cell `$techmap\cpu.s.$not$seq.v:124$1254'.
  removing unused `$add' cell `$techmap\cpu.csrs.$add$polaris.v:568$1200'.
  removing unused `$not' cell `$techmap\cpu.csrs.$not$polaris.v:568$1198'.
  removing unused `$not' cell `$techmap\cpu.csrs.$not$polaris.v:563$1183'.
  removing unused `$logic_not' cell `$techmap\cpu.csrs.$logic_not$polaris.v:551$1170'.
  removing unused `$logic_not' cell `$techmap\cpu.csrs.$logic_not$polaris.v:543$1156'.
  removing unused `$logic_not' cell `$techmap\cpu.csrs.$logic_not$polaris.v:533$1143'.
  removing unused `$logic_not' cell `$techmap\cpu.csrs.$logic_not$polaris.v:523$1130'.
  removing unused `$logic_not' cell `$techmap\cpu.csrs.$logic_not$polaris.v:516$1118'.
  removing unused `$logic_not' cell `$techmap\cpu.csrs.$logic_not$polaris.v:510$1110'.
  removing unused `$and' cell `$techmap\cpu.csrs.$and$polaris.v:488$1053'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:158$602'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:158$601'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:158$600'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:158$599'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:158$598'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:158$597'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:158$596'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:158$595'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:156$589'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:156$588'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:156$587'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:156$586'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:156$585'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:156$584'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:156$583'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:146$571'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:141$566'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:133$558'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:128$553'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:121$546'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:116$541'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:111$536'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:106$531'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:100$525'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:95$520'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:92$517'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:90$515'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:85$510'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:81$506'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:75$500'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:72$497'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:66$491'.
  removing unused `$mux' cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:63$488'.
  removing unused `$and' cell `$techmap\bot.bs.$and$bottleneckSequencer.v:46$109'.
  removing unused `$not' cell `$techmap\bot.bs.$not$bottleneckSequencer.v:46$108'.
  removing unused `$and' cell `$techmap\bot.bs.$and$bottleneckSequencer.v:46$106'.
  removing unused `$and' cell `$techmap\bot.bs.$and$bottleneckSequencer.v:46$104'.
  removing unused `$not' cell `$techmap\bot.bs.$not$bottleneckSequencer.v:46$102'.
  removing unused non-port wire \bot.bs.SSignedO_MSignedI.
  removing unused non-port wire \bot.bs.MErrAlignO_1.
  removing unused non-port wire \bot.bs.aligned.
  removing unused non-port wire \bot.bs.R1391.
  removing unused non-port wire \bot.bs.out1408.
  removing unused non-port wire \bot.bs.out1411.
  removing unused non-port wire \bot.bs.out1417.
  removing unused non-port wire \bot.bs.out1420.
  removing unused non-port wire \bot.bs.out1426.
  removing unused non-port wire \bot.bs.out1430.
  removing unused non-port wire \bot.bs.out1435.
  removing unused non-port wire \bot.bs.out1437.
  removing unused non-port wire \bot.bs.out1440.
  removing unused non-port wire \bot.bs.out1445.
  removing unused non-port wire \bot.bs.out1451.
  removing unused non-port wire \bot.bs.out1456.
  removing unused non-port wire \bot.bs.out1461.
  removing unused non-port wire \bot.bs.out1466.
  removing unused non-port wire \bot.bs.out1473.
  removing unused non-port wire \bot.bs.out1478.
  removing unused non-port wire \bot.bs.out1486.
  removing unused non-port wire \bot.bs.out1491.
  removing unused non-port wire \cpu.csrs.coe_i.
  removing unused non-port wire \cpu.csrs.tick_i.
  removing unused non-port wire \cpu.csrs.mcause_irq_i.
  removing unused non-port wire \cpu.csrs.mepc_pc.
  removing unused non-port wire \cpu.csrs.irq_i.
  removing unused non-port wire \cpu.csrs.take_irq_o.
  removing unused non-port wire \cpu.csrs.csrd_misa.
  removing unused non-port wire \cpu.csrs.csrd_mvendorid.
  removing unused non-port wire \cpu.csrs.csrd_marchid.
  removing unused non-port wire \cpu.csrs.csrd_mimpid.
  removing unused non-port wire \cpu.csrs.csrd_mhartid.
  removing unused non-port wire \cpu.csrs.csrd_medeleg.
  removing unused non-port wire \cpu.csrs.csrd_mideleg.
  removing unused non-port wire \cpu.csrs.csrd_mip.
  removing unused non-port wire \cpu.csrs.irqEn_irqEn.
  removing unused non-port wire \cpu.csrs.mie_mie.
  removing unused non-port wire \cpu.csrs.mpie_mpie.
  removing unused non-port wire \cpu.csrs.mtvec_mtvec.
  removing unused non-port wire \cpu.csrs.mepc_mepc.
  removing unused non-port wire \cpu.csrs.mcause_mcause.
  removing unused non-port wire \cpu.s.take_irq.
  removing unused non-port wire \cpu.s.mcause_irq_o.
  removing unused non-port wire \cpu.s.mepc_pc.
  removing unused non-port wire \cpu.s.coe_o.
  removing unused non-port wire \cpu.s.fence_o.
  removing unused non-port wire \cpu.s.R1396.
  removing unused non-port wire \cpu.s.out1522.
  removing unused non-port wire \cpu.s.out1523.
  removing unused non-port wire \cpu.s.out1524.
  removing unused non-port wire \cpu.s.out1525.
  removing unused non-port wire \cpu.s.out1526.
  removing unused non-port wire \cpu.s.out1527.
  removing unused non-port wire \cpu.s.out1528.
  removing unused non-port wire \cpu.s.out1703.
  removing unused non-port wire \cpu.s.out1705.
  removing unused non-port wire \cpu.s.out1707.
  removing unused non-port wire \cpu.s.out1709.
  removing unused non-port wire \cpu.s.out1731.
  removing unused non-port wire \cpu.s.out1739.
  removing unused non-port wire \cpu.s.out1749.
  removing unused non-port wire \cpu.s.out1762.
  removing unused non-port wire \cpu.s.out1776.
  removing unused non-port wire \cpu.s.out1789.
  removing unused non-port wire \arb.idat_i.
  removing unused non-port wire \arb.iwe_i.
  removing unused non-port wire \arb.isiz_i.
  removing unused non-port wire \arb.isigned_i.
  removing unused non-port wire \bot.m_err_align_o.
  removing unused non-port wire \bot.s_cyc_o.
  removing unused non-port wire \bot.s_signed_o.
  removing unused non-port wire \bot.SSignedO_MSignedI.
  removing unused non-port wire \bot.MErrAlignO_1.
  removing unused non-port wire \ram.sram_ce_on.
  removing unused non-port wire \wb_bridge.f_signed_i.
  removing unused non-port wire \wb_bridge.f_dat_o.
  removing unused non-port wire \wb_bridge.ab7.
  removing unused non-port wire \wb_bridge.ab6.
  removing unused non-port wire \wb_bridge.ab5.
  removing unused non-port wire \wb_bridge.ab4.
  removing unused non-port wire \wb_bridge.ab3.
  removing unused non-port wire \wb_bridge.ab2.
  removing unused non-port wire \wb_bridge.ah3.
  removing unused non-port wire \wb_bridge.ah2.
  removing unused non-port wire \wb_bridge.ah1.
  removing unused non-port wire \wb_bridge.ah0.
  removing unused non-port wire \wb_bridge.aw1.
  removing unused non-port wire \wb_bridge.aw0.
  removing unused non-port wire \wb_bridge.wen1.
  removing unused non-port wire \wb_bridge.hen3.
  removing unused non-port wire \wb_bridge.hen2.
  removing unused non-port wire \wb_bridge.hen1.
  removing unused non-port wire \wb_bridge.ben7.
  removing unused non-port wire \wb_bridge.ben6.
  removing unused non-port wire \wb_bridge.ben5.
  removing unused non-port wire \wb_bridge.ben4.
  removing unused non-port wire \wb_bridge.ben3.
  removing unused non-port wire \wb_bridge.ben2.
  removing unused non-port wire \wb_bridge.id2.
  removing unused non-port wire \wb_bridge.id1.
  removing unused non-port wire \wb_bridge.id0.
  removing unused non-port wire \wb_bridge.id2s.
  removing unused non-port wire \wb_bridge.id1s.
  removing unused non-port wire \wb_bridge.id0s.
  removing unused non-port wire \cpu.fence_o.
  removing unused non-port wire \cpu.irq_i.
  removing unused non-port wire \cpu.coe_o.
  removing unused non-port wire \cpu.cvalid_i.
  removing unused non-port wire \cpu.cdat_i.
  removing unused non-port wire \cpu.rmask_i.
  removing unused non-port wire \cpu.alua_alua.
  removing unused non-port wire \cpu.alub_alub.
  removing unused non-port wire \cpu.mepc.
  removing unused non-port wire \cpu.mepc_mux.
  removing unused non-port wire \cpu.mie.
  removing unused non-port wire \cpu.mpie.
  removing unused non-port wire \cpu.coe_1.
  removing unused non-port wire \cpu.take_irq.
  removing unused non-port wire \cpu.mepc_pc.
  removing unused non-port wire \cpu.mcause_irq_o.
  removing unused non-port wire \cpu.rdNotZero.
  removing unused non-port wire \cpu.pc_pc.
  removing unused non-port wire \cpu.ia_ia.
  removing unused non-port wire \cpu.ir_ir.
  removing unused non-port wire \sdati_wide.
  removing unused non-port wire \ssigned.
  removing unused non-port wire \scyc.
  removed 128 unused temporary wires.

12.7.4. Executing CHECK pass (checking for obvious problems).
checking module TOP..
Warning: Wire TOP.\bot.s_dat_16s [63] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [14] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [13] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [12] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [11] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [10] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [9] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [8] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [7] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [6] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [5] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [4] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [3] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [2] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [1] is used but has no driver.
Warning: Wire TOP.\bot.s_dat_16s [0] is used but has no driver.
Warning: found logic loop in module TOP:
    cell $techmap\arb.$and$arbiter.v:66$51 ($and)
    cell $techmap\arb.$and$arbiter.v:76$84 ($and)
    cell $techmap\arb.$and$arbiter.v:82$97 ($and)
    cell $techmap\arb.$not$arbiter.v:66$50 ($not)
    cell $techmap\arb.$or$arbiter.v:67$58 ($or)
    cell $techmap\arb.$or$arbiter.v:76$86 ($or)
    cell $techmap\bot.$or$bottleneck.v:91$717 ($or)
    cell $techmap\bot.$ternary$bottleneck.v:91$715 ($mux)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$113 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$115 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$118 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$121 ($and)
    cell $techmap\bot.bs.$or$bottleneckSequencer.v:159$603 ($or)
    cell $techmap\bot.bs.$ternary$bottleneckSequencer.v:70$495 ($mux)
    cell $techmap\cpu.s.$and$seq.v:186$1544 ($and)
    cell $techmap\cpu.s.$not$seq.v:186$1543 ($not)
    cell $techmap\cpu.s.$or$seq.v:594$2221 ($or)
    cell $techmap\cpu.s.$or$seq.v:594$2222 ($or)
    cell $techmap\cpu.s.$or$seq.v:594$2223 ($or)
    cell $techmap\cpu.s.$ternary$seq.v:391$1958 ($mux)
    wire $techmap\arb.$and$arbiter.v:66$51_Y
    wire $techmap\arb.$and$arbiter.v:76$84_Y
    wire $techmap\arb.$not$arbiter.v:66$50_Y
    wire $techmap\bot.$ternary$bottleneck.v:91$715_Y [0]
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$113_Y
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$115_Y
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$118_Y
    wire $techmap\cpu.s.$not$seq.v:186$1543_Y
    wire $techmap\cpu.s.$or$seq.v:594$2221_Y
    wire $techmap\cpu.s.$or$seq.v:594$2222_Y
    wire \arb.dack_o
    wire \arb.dcyc_i
    wire \arb.en_i
    wire \arb.xack_i
    wire \arb.xcyc_o
    wire \bot.MAckO_SAckI
    wire \bot.bs.R1392
    wire \bot.bs.out1415
    wire \cpu.s.R1458
    wire \cpu.s.out1663
Warning: found logic loop in module TOP:
    cell $techmap\arb.$and$arbiter.v:67$54 ($and)
    cell $techmap\arb.$and$arbiter.v:67$55 ($and)
    cell $techmap\arb.$and$arbiter.v:67$57 ($and)
    cell $techmap\arb.$and$arbiter.v:76$84 ($and)
    cell $techmap\arb.$and$arbiter.v:82$97 ($and)
    cell $techmap\arb.$or$arbiter.v:67$58 ($or)
    cell $techmap\arb.$or$arbiter.v:76$86 ($or)
    cell $techmap\bot.$or$bottleneck.v:91$717 ($or)
    cell $techmap\bot.$ternary$bottleneck.v:91$715 ($mux)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$113 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$115 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$118 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$121 ($and)
    cell $techmap\bot.bs.$or$bottleneckSequencer.v:159$603 ($or)
    cell $techmap\bot.bs.$ternary$bottleneckSequencer.v:70$495 ($mux)
    cell $techmap\cpu.s.$and$seq.v:186$1544 ($and)
    cell $techmap\cpu.s.$not$seq.v:186$1543 ($not)
    cell $techmap\cpu.s.$or$seq.v:594$2221 ($or)
    cell $techmap\cpu.s.$or$seq.v:594$2222 ($or)
    cell $techmap\cpu.s.$or$seq.v:594$2223 ($or)
    cell $techmap\cpu.s.$ternary$seq.v:391$1958 ($mux)
    wire $techmap\arb.$and$arbiter.v:67$54_Y
    wire $techmap\arb.$and$arbiter.v:67$55_Y
    wire $techmap\arb.$and$arbiter.v:67$57_Y
    wire $techmap\arb.$and$arbiter.v:76$84_Y
    wire $techmap\bot.$ternary$bottleneck.v:91$715_Y [0]
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$113_Y
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$115_Y
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$118_Y
    wire $techmap\cpu.s.$not$seq.v:186$1543_Y
    wire $techmap\cpu.s.$or$seq.v:594$2221_Y
    wire $techmap\cpu.s.$or$seq.v:594$2222_Y
    wire \arb.dack_o
    wire \arb.dcyc_i
    wire \arb.en_i
    wire \arb.xack_i
    wire \arb.xcyc_o
    wire \bot.MAckO_SAckI
    wire \bot.bs.R1392
    wire \bot.bs.out1415
    wire \cpu.s.R1458
    wire \cpu.s.out1663
Warning: found logic loop in module TOP:
    cell $techmap\arb.$and$arbiter.v:69$62 ($and)
    cell $techmap\arb.$and$arbiter.v:82$97 ($and)
    cell $techmap\arb.$or$arbiter.v:70$68 ($or)
    cell $techmap\arb.$or$arbiter.v:71$74 ($or)
    cell $techmap\cpu.s.$and$seq.v:186$1544 ($and)
    cell $techmap\cpu.s.$not$seq.v:186$1543 ($not)
    cell $techmap\cpu.s.$or$seq.v:594$2221 ($or)
    cell $techmap\cpu.s.$or$seq.v:594$2222 ($or)
    cell $techmap\cpu.s.$or$seq.v:594$2223 ($or)
    cell $techmap\cpu.s.$ternary$seq.v:391$1958 ($mux)
    wire $techmap\arb.$and$arbiter.v:69$62_Y
    wire $techmap\arb.$or$arbiter.v:70$68_Y
    wire $techmap\cpu.s.$not$seq.v:186$1543_Y
    wire $techmap\cpu.s.$or$seq.v:594$2221_Y
    wire $techmap\cpu.s.$or$seq.v:594$2222_Y
    wire \arb.dack_o
    wire \arb.dcyc_i
    wire \arb.en_d
    wire \cpu.s.R1458
    wire \cpu.s.out1663
Warning: found logic loop in module TOP:
    cell $techmap\arb.$and$arbiter.v:70$65 ($and)
    cell $techmap\arb.$and$arbiter.v:70$67 ($and)
    cell $techmap\arb.$and$arbiter.v:82$97 ($and)
    cell $techmap\arb.$or$arbiter.v:70$68 ($or)
    cell $techmap\arb.$or$arbiter.v:71$74 ($or)
    cell $techmap\cpu.s.$and$seq.v:186$1544 ($and)
    cell $techmap\cpu.s.$not$seq.v:186$1543 ($not)
    cell $techmap\cpu.s.$or$seq.v:594$2221 ($or)
    cell $techmap\cpu.s.$or$seq.v:594$2222 ($or)
    cell $techmap\cpu.s.$or$seq.v:594$2223 ($or)
    cell $techmap\cpu.s.$ternary$seq.v:391$1958 ($mux)
    wire $techmap\arb.$and$arbiter.v:70$65_Y
    wire $techmap\arb.$and$arbiter.v:70$67_Y
    wire $techmap\arb.$or$arbiter.v:70$68_Y
    wire $techmap\cpu.s.$not$seq.v:186$1543_Y
    wire $techmap\cpu.s.$or$seq.v:594$2221_Y
    wire $techmap\cpu.s.$or$seq.v:594$2222_Y
    wire \arb.dack_o
    wire \arb.dcyc_i
    wire \arb.en_d
    wire \cpu.s.R1458
    wire \cpu.s.out1663
Warning: found logic loop in module TOP:
    cell $techmap\arb.$and$arbiter.v:71$71 ($and)
    cell $techmap\arb.$and$arbiter.v:71$72 ($and)
    cell $techmap\arb.$and$arbiter.v:71$73 ($and)
    cell $techmap\arb.$and$arbiter.v:82$97 ($and)
    cell $techmap\arb.$or$arbiter.v:71$74 ($or)
    cell $techmap\cpu.s.$and$seq.v:186$1544 ($and)
    cell $techmap\cpu.s.$not$seq.v:186$1543 ($not)
    cell $techmap\cpu.s.$or$seq.v:594$2221 ($or)
    cell $techmap\cpu.s.$or$seq.v:594$2222 ($or)
    cell $techmap\cpu.s.$or$seq.v:594$2223 ($or)
    cell $techmap\cpu.s.$ternary$seq.v:391$1958 ($mux)
    wire $techmap\arb.$and$arbiter.v:71$71_Y
    wire $techmap\arb.$and$arbiter.v:71$72_Y
    wire $techmap\arb.$and$arbiter.v:71$73_Y
    wire $techmap\cpu.s.$not$seq.v:186$1543_Y
    wire $techmap\cpu.s.$or$seq.v:594$2221_Y
    wire $techmap\cpu.s.$or$seq.v:594$2222_Y
    wire \arb.dack_o
    wire \arb.dcyc_i
    wire \arb.en_d
    wire \cpu.s.R1458
    wire \cpu.s.out1663
Warning: found logic loop in module TOP:
    cell $techmap\arb.$and$arbiter.v:76$85 ($and)
    cell $techmap\arb.$and$arbiter.v:82$97 ($and)
    cell $techmap\arb.$or$arbiter.v:76$86 ($or)
    cell $techmap\bot.$or$bottleneck.v:91$717 ($or)
    cell $techmap\bot.$ternary$bottleneck.v:91$715 ($mux)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$113 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$115 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$118 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$121 ($and)
    cell $techmap\bot.bs.$or$bottleneckSequencer.v:159$603 ($or)
    cell $techmap\bot.bs.$ternary$bottleneckSequencer.v:70$495 ($mux)
    cell $techmap\cpu.s.$and$seq.v:186$1544 ($and)
    cell $techmap\cpu.s.$not$seq.v:186$1543 ($not)
    cell $techmap\cpu.s.$or$seq.v:594$2221 ($or)
    cell $techmap\cpu.s.$or$seq.v:594$2222 ($or)
    cell $techmap\cpu.s.$or$seq.v:594$2223 ($or)
    cell $techmap\cpu.s.$ternary$seq.v:391$1958 ($mux)
    wire $techmap\arb.$and$arbiter.v:76$85_Y
    wire $techmap\bot.$ternary$bottleneck.v:91$715_Y [0]
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$113_Y
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$115_Y
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$118_Y
    wire $techmap\cpu.s.$not$seq.v:186$1543_Y
    wire $techmap\cpu.s.$or$seq.v:594$2221_Y
    wire $techmap\cpu.s.$or$seq.v:594$2222_Y
    wire \arb.dack_o
    wire \arb.dcyc_i
    wire \arb.xack_i
    wire \arb.xcyc_o
    wire \bot.MAckO_SAckI
    wire \bot.bs.R1392
    wire \bot.bs.out1415
    wire \cpu.s.R1458
    wire \cpu.s.out1663
Warning: found logic loop in module TOP:
    cell $techmap\arb.$and$arbiter.v:77$88 ($and)
    cell $techmap\arb.$and$arbiter.v:82$97 ($and)
    cell $techmap\arb.$or$arbiter.v:77$89 ($or)
    cell $techmap\bot.$or$bottleneck.v:91$717 ($or)
    cell $techmap\bot.$ternary$bottleneck.v:91$715 ($mux)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$115 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$118 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$121 ($and)
    cell $techmap\bot.bs.$or$bottleneckSequencer.v:159$603 ($or)
    cell $techmap\bot.bs.$ternary$bottleneckSequencer.v:70$495 ($mux)
    cell $techmap\cpu.s.$and$seq.v:182$1515 ($and)
    cell $techmap\cpu.s.$not$seq.v:182$1514 ($not)
    cell $techmap\cpu.s.$or$seq.v:601$2246 ($or)
    cell $techmap\cpu.s.$ternary$seq.v:371$1938 ($mux)
    wire $techmap\arb.$and$arbiter.v:77$88_Y
    wire $techmap\bot.$ternary$bottleneck.v:91$715_Y [0]
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$115_Y
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$118_Y
    wire $techmap\cpu.s.$not$seq.v:182$1514_Y
    wire \arb.dack_o
    wire \arb.dstb_i
    wire \arb.xack_i
    wire \arb.xstb_o
    wire \bot.MAckO_SAckI
    wire \bot.bs.R1392
    wire \bot.bs.out1415
    wire \cpu.s.R1454
    wire \cpu.s.out1643
Warning: found logic loop in module TOP:
    cell $techmap\arb.$and$arbiter.v:77$88 ($and)
    cell $techmap\arb.$and$arbiter.v:82$97 ($and)
    cell $techmap\arb.$or$arbiter.v:77$89 ($or)
    cell $techmap\bot.$or$bottleneck.v:91$717 ($or)
    cell $techmap\bot.$ternary$bottleneck.v:91$715 ($mux)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$115 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$118 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$121 ($and)
    cell $techmap\bot.bs.$or$bottleneckSequencer.v:159$603 ($or)
    cell $techmap\bot.bs.$ternary$bottleneckSequencer.v:70$495 ($mux)
    cell $techmap\cpu.s.$and$seq.v:183$1523 ($and)
    cell $techmap\cpu.s.$or$seq.v:601$2245 ($or)
    cell $techmap\cpu.s.$or$seq.v:601$2246 ($or)
    cell $techmap\cpu.s.$ternary$seq.v:376$1943 ($mux)
    wire $techmap\arb.$and$arbiter.v:77$88_Y
    wire $techmap\bot.$ternary$bottleneck.v:91$715_Y [0]
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$115_Y
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$118_Y
    wire $techmap\cpu.s.$or$seq.v:601$2245_Y
    wire \arb.dack_o
    wire \arb.dstb_i
    wire \arb.xack_i
    wire \arb.xstb_o
    wire \bot.MAckO_SAckI
    wire \bot.bs.R1392
    wire \bot.bs.out1415
    wire \cpu.s.R1455
    wire \cpu.s.out1648
Warning: found logic loop in module TOP:
    cell $techmap\arb.$and$arbiter.v:77$88 ($and)
    cell $techmap\arb.$and$arbiter.v:82$97 ($and)
    cell $techmap\arb.$or$arbiter.v:77$89 ($or)
    cell $techmap\bot.$or$bottleneck.v:91$717 ($or)
    cell $techmap\bot.$ternary$bottleneck.v:91$715 ($mux)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$115 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$118 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$121 ($and)
    cell $techmap\bot.bs.$or$bottleneckSequencer.v:159$603 ($or)
    cell $techmap\bot.bs.$ternary$bottleneckSequencer.v:70$495 ($mux)
    cell $techmap\cpu.s.$and$seq.v:186$1544 ($and)
    cell $techmap\cpu.s.$not$seq.v:186$1543 ($not)
    cell $techmap\cpu.s.$or$seq.v:601$2244 ($or)
    cell $techmap\cpu.s.$or$seq.v:601$2245 ($or)
    cell $techmap\cpu.s.$or$seq.v:601$2246 ($or)
    cell $techmap\cpu.s.$ternary$seq.v:392$1959 ($mux)
    wire $techmap\arb.$and$arbiter.v:77$88_Y
    wire $techmap\bot.$ternary$bottleneck.v:91$715_Y [0]
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$115_Y
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$118_Y
    wire $techmap\cpu.s.$not$seq.v:186$1543_Y
    wire $techmap\cpu.s.$or$seq.v:601$2244_Y
    wire $techmap\cpu.s.$or$seq.v:601$2245_Y
    wire \arb.dack_o
    wire \arb.dstb_i
    wire \arb.xack_i
    wire \arb.xstb_o
    wire \bot.MAckO_SAckI
    wire \bot.bs.R1392
    wire \bot.bs.out1415
    wire \cpu.s.R1458
    wire \cpu.s.out1664
Warning: found logic loop in module TOP:
    cell $techmap\arb.$and$arbiter.v:77$88 ($and)
    cell $techmap\arb.$and$arbiter.v:82$97 ($and)
    cell $techmap\arb.$or$arbiter.v:77$89 ($or)
    cell $techmap\bot.$or$bottleneck.v:91$717 ($or)
    cell $techmap\bot.$ternary$bottleneck.v:91$715 ($mux)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$115 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$118 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$121 ($and)
    cell $techmap\bot.bs.$or$bottleneckSequencer.v:159$603 ($or)
    cell $techmap\bot.bs.$ternary$bottleneckSequencer.v:70$495 ($mux)
    cell $techmap\cpu.s.$and$seq.v:187$1552 ($and)
    cell $techmap\cpu.s.$or$seq.v:601$2244 ($or)
    cell $techmap\cpu.s.$or$seq.v:601$2245 ($or)
    cell $techmap\cpu.s.$or$seq.v:601$2246 ($or)
    cell $techmap\cpu.s.$ternary$seq.v:400$1967 ($mux)
    wire $techmap\arb.$and$arbiter.v:77$88_Y
    wire $techmap\bot.$ternary$bottleneck.v:91$715_Y [0]
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$115_Y
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$118_Y
    wire $techmap\cpu.s.$or$seq.v:601$2244_Y
    wire $techmap\cpu.s.$or$seq.v:601$2245_Y
    wire \arb.dack_o
    wire \arb.dstb_i
    wire \arb.xack_i
    wire \arb.xstb_o
    wire \bot.MAckO_SAckI
    wire \bot.bs.R1392
    wire \bot.bs.out1415
    wire \cpu.s.R1459
    wire \cpu.s.out1672
Warning: found logic loop in module TOP:
    cell $techmap\arb.$and$arbiter.v:82$97 ($and)
    cell $techmap\arb.$or$arbiter.v:74$80 ($or)
    cell $techmap\arb.$ternary$arbiter.v:74$79 ($mux)
    cell $techmap\bot.$or$bottleneck.v:91$717 ($or)
    cell $techmap\bot.$ternary$bottleneck.v:91$715 ($mux)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:48$135 ($and)
    cell $techmap\bot.bs.$not$bottleneckSequencer.v:48$134 ($not)
    cell $techmap\bot.bs.$or$bottleneckSequencer.v:159$603 ($or)
    cell $techmap\bot.bs.$ternary$bottleneckSequencer.v:79$504 ($mux)
    cell $techmap\cpu.$ternary$polaris.v:148$946 ($mux)
    cell $techmap\cpu.$ternary$polaris.v:151$949 ($mux)
    cell $techmap\cpu.alu.$or$alu.v:67$42 ($or)
    cell $techmap\cpu.alu.$or$alu.v:67$43 ($or)
    cell $techmap\cpu.alu.$or$alu.v:67$44 ($or)
    cell $techmap\cpu.alu.$or$alu.v:67$45 ($or)
    cell $techmap\cpu.alu.$or$alu.v:67$46 ($or)
    cell $techmap\cpu.alu.$or$alu.v:67$47 ($or)
    cell $techmap\cpu.alu.$ternary$alu.v:33$6 ($mux)
    cell $techmap\cpu.s.$and$seq.v:186$1544 ($and)
    cell $techmap\cpu.s.$not$seq.v:186$1543 ($not)
    cell $techmap\cpu.s.$or$seq.v:584$2203 ($or)
    cell $techmap\cpu.s.$or$seq.v:584$2204 ($or)
    cell $techmap\cpu.s.$or$seq.v:584$2205 ($or)
    cell $techmap\cpu.s.$or$seq.v:584$2206 ($or)
    cell $techmap\cpu.s.$or$seq.v:584$2207 ($or)
    cell $techmap\cpu.s.$or$seq.v:584$2208 ($or)
    cell $techmap\cpu.s.$or$seq.v:584$2209 ($or)
    cell $techmap\cpu.s.$or$seq.v:584$2210 ($or)
    cell $techmap\cpu.s.$or$seq.v:584$2211 ($or)
    cell $techmap\cpu.s.$ternary$seq.v:389$1956 ($mux)
    wire $techmap\arb.$ternary$arbiter.v:74$79_Y [0]
    wire $techmap\bot.$ternary$bottleneck.v:91$715_Y [0]
    wire $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    wire $techmap\cpu.alu.$or$alu.v:67$42_Y [0]
    wire $techmap\cpu.alu.$or$alu.v:67$43_Y [0]
    wire $techmap\cpu.alu.$or$alu.v:67$44_Y [0]
    wire $techmap\cpu.alu.$or$alu.v:67$45_Y [0]
    wire $techmap\cpu.alu.$or$alu.v:67$46_Y [0]
    wire $techmap\cpu.s.$not$seq.v:186$1543_Y
    wire $techmap\cpu.s.$or$seq.v:584$2203_Y
    wire $techmap\cpu.s.$or$seq.v:584$2204_Y
    wire $techmap\cpu.s.$or$seq.v:584$2205_Y
    wire $techmap\cpu.s.$or$seq.v:584$2206_Y
    wire $techmap\cpu.s.$or$seq.v:584$2207_Y
    wire $techmap\cpu.s.$or$seq.v:584$2208_Y
    wire $techmap\cpu.s.$or$seq.v:584$2209_Y
    wire $techmap\cpu.s.$or$seq.v:584$2210_Y
    wire \arb.dack_o
    wire \arb.dadr_i [0]
    wire \arb.xack_i
    wire \bot.MAckO_SAckI
    wire \bot.bs.R1393
    wire \bot.bs.out1424
    wire \bot.m_adr_i [0]
    wire \cpu.alu.out_o [0]
    wire \cpu.alu.sum_en_i
    wire \cpu.alu.sums [0]
    wire \cpu.aluXResult [0]
    wire \cpu.s.R1458
    wire \cpu.s.out1661
Warning: found logic loop in module TOP:
    cell $techmap\arb.$and$arbiter.v:82$97 ($and)
    cell $techmap\arb.$or$arbiter.v:74$80 ($or)
    cell $techmap\arb.$ternary$arbiter.v:74$79 ($mux)
    cell $techmap\bot.$or$bottleneck.v:91$717 ($or)
    cell $techmap\bot.$ternary$bottleneck.v:91$715 ($mux)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:48$135 ($and)
    cell $techmap\bot.bs.$not$bottleneckSequencer.v:48$134 ($not)
    cell $techmap\bot.bs.$or$bottleneckSequencer.v:159$603 ($or)
    cell $techmap\bot.bs.$ternary$bottleneckSequencer.v:79$504 ($mux)
    cell $techmap\cpu.$ternary$polaris.v:148$946 ($mux)
    cell $techmap\cpu.s.$and$seq.v:186$1544 ($and)
    cell $techmap\cpu.s.$not$seq.v:186$1543 ($not)
    cell $techmap\cpu.s.$or$seq.v:559$2155 ($or)
    cell $techmap\cpu.s.$or$seq.v:559$2156 ($or)
    cell $techmap\cpu.s.$or$seq.v:559$2157 ($or)
    cell $techmap\cpu.s.$ternary$seq.v:390$1957 ($mux)
    wire $techmap\arb.$ternary$arbiter.v:74$79_Y [0]
    wire $techmap\bot.$ternary$bottleneck.v:91$715_Y [0]
    wire $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    wire $techmap\cpu.s.$not$seq.v:186$1543_Y
    wire $techmap\cpu.s.$or$seq.v:559$2155_Y
    wire $techmap\cpu.s.$or$seq.v:559$2156_Y
    wire \arb.dack_o
    wire \arb.dadr_i [0]
    wire \arb.xack_i
    wire \bot.MAckO_SAckI
    wire \bot.bs.R1393
    wire \bot.bs.out1424
    wire \bot.m_adr_i [0]
    wire \cpu.dadr_alu
    wire \cpu.s.R1458
    wire \cpu.s.out1662
Warning: found logic loop in module TOP:
    cell $techmap\arb.$and$arbiter.v:82$97 ($and)
    cell $techmap\arb.$or$arbiter.v:78$92 ($or)
    cell $techmap\arb.$ternary$arbiter.v:78$91 ($mux)
    cell $techmap\bot.$or$bottleneck.v:91$717 ($or)
    cell $techmap\bot.$ternary$bottleneck.v:91$715 ($mux)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$118 ($and)
    cell $techmap\bot.bs.$and$bottleneckSequencer.v:47$121 ($and)
    cell $techmap\bot.bs.$not$bottleneckSequencer.v:47$117 ($not)
    cell $techmap\bot.bs.$or$bottleneckSequencer.v:159$603 ($or)
    cell $techmap\bot.bs.$ternary$bottleneckSequencer.v:70$495 ($mux)
    cell $techmap\cpu.$ternary$polaris.v:145$945 ($mux)
    cell $techmap\cpu.s.$and$seq.v:186$1544 ($and)
    cell $techmap\cpu.s.$not$seq.v:186$1543 ($not)
    cell $techmap\cpu.s.$or$seq.v:526$2093 ($or)
    cell $techmap\cpu.s.$or$seq.v:526$2094 ($or)
    cell $techmap\cpu.s.$or$seq.v:526$2095 ($or)
    cell $techmap\cpu.s.$ternary$seq.v:393$1960 ($mux)
    wire $techmap\arb.$ternary$arbiter.v:78$91_Y [0]
    wire $techmap\bot.$ternary$bottleneck.v:91$715_Y [0]
    wire $techmap\bot.bs.$and$bottleneckSequencer.v:47$118_Y
    wire $techmap\bot.bs.$not$bottleneckSequencer.v:47$117_Y
    wire $techmap\cpu.s.$not$seq.v:186$1543_Y
    wire $techmap\cpu.s.$or$seq.v:526$2093_Y
    wire $techmap\cpu.s.$or$seq.v:526$2094_Y
    wire \arb.dack_o
    wire \arb.dsiz_i [0]
    wire \arb.xack_i
    wire \bot.MAckO_SAckI
    wire \bot.bs.R1392
    wire \bot.bs.out1415
    wire \bot.m_siz_i [1]
    wire \cpu.dsiz_fn3
    wire \cpu.s.R1458
    wire \cpu.s.out1665
found and reported 29 problems.

12.7.5. Executing OPT pass (performing simple optimizations).

12.7.5.1. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$techmap\wb_bridge.$eq$bridge.v:27$722' (isneq) in module `\TOP' with constant driver `\wb_bridge.den = 1'0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:115$850' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:115$850_Y = 0'.
Replacing $eq cell `$techmap\wb_bridge.$eq$bridge.v:26$721' (isneq) in module `\TOP' with constant driver `\wb_bridge.size_word = 1'0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:114$847' (0) in module `\TOP' with constant driver `$techmap\wb_bridge.$ternary$bridge.v:114$847_Y = 0'.
Replacing $eq cell `$techmap\wb_bridge.$eq$bridge.v:25$720' (1) in module `\TOP' with constant driver `\wb_bridge.size_hword = \bot.s_siz_o'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:114$848' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:115$851' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\wb_bridge.$and$bridge.v:48$738' (const_and) in module `\TOP' with constant driver `\wb_bridge.wen0 = 1'0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:69$772' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:68$769' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\wb_bridge.$eq$bridge.v:35$729' (1) in module `\TOP' with constant driver `\wb_bridge.ab1 = \bot.s_adr_o [0]'.
Replacing $pos cell `$techmap\wb_bridge.$or$bridge.v:69$772' (1'0) in module `\TOP' with constant driver `$techmap\wb_bridge.$or$bridge.v:69$772_Y = 1'0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:69$773' in module `\TOP' with identity for port B.
Replacing $pos cell `$techmap\wb_bridge.$or$bridge.v:68$769' (1'0) in module `\TOP' with constant driver `$techmap\wb_bridge.$or$bridge.v:68$769_Y = 1'0'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:68$770' in module `\TOP' with identity for port B.

12.7.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
  Cell `$techmap\arb.$and$arbiter.v:77$87' is identical to cell `$techmap\arb.$and$arbiter.v:76$84'.
    Redirecting output \Y: $techmap\arb.$and$arbiter.v:77$87_Y = $techmap\arb.$and$arbiter.v:76$84_Y
    Removing $and cell `$techmap\arb.$and$arbiter.v:77$87' from module `\TOP'.
  Cell `$techmap\arb.$not$arbiter.v:67$52' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\arb.$not$arbiter.v:67$52_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\arb.$not$arbiter.v:67$52' from module `\TOP'.
  Cell `$techmap\arb.$not$arbiter.v:69$59' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\arb.$not$arbiter.v:69$59_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\arb.$not$arbiter.v:69$59' from module `\TOP'.
  Cell `$techmap\arb.$not$arbiter.v:70$63' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\arb.$not$arbiter.v:70$63_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\arb.$not$arbiter.v:70$63' from module `\TOP'.
  Cell `$techmap\arb.$not$arbiter.v:71$69' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\arb.$not$arbiter.v:71$69_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\arb.$not$arbiter.v:71$69' from module `\TOP'.
  Cell `$techmap\bot.$and$bottleneck.v:85$688' is identical to cell `$techmap\bot.$and$bottleneck.v:83$678'.
    Redirecting output \Y: $techmap\bot.$and$bottleneck.v:85$688_Y = $techmap\bot.$and$bottleneck.v:83$678_Y
    Removing $and cell `$techmap\bot.$and$bottleneck.v:85$688' from module `\TOP'.
  Cell `$techmap\bot.$and$bottleneck.v:87$699' is identical to cell `$techmap\bot.$and$bottleneck.v:83$678'.
    Redirecting output \Y: $techmap\bot.$and$bottleneck.v:87$699_Y = $techmap\bot.$and$bottleneck.v:83$678_Y
    Removing $and cell `$techmap\bot.$and$bottleneck.v:87$699' from module `\TOP'.
  Cell `$techmap\bot.$not$bottleneck.v:86$693' is identical to cell `$techmap\bot.$not$bottleneck.v:84$682'.
    Redirecting output \Y: $techmap\bot.$not$bottleneck.v:86$693_Y = $techmap\bot.$not$bottleneck.v:84$682_Y
    Removing $not cell `$techmap\bot.$not$bottleneck.v:86$693' from module `\TOP'.
  Cell `$techmap\bot.$not$bottleneck.v:88$704' is identical to cell `$techmap\bot.$not$bottleneck.v:84$682'.
    Redirecting output \Y: $techmap\bot.$not$bottleneck.v:88$704_Y = $techmap\bot.$not$bottleneck.v:84$682_Y
    Removing $not cell `$techmap\bot.$not$bottleneck.v:88$704' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:47$111' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:47$111_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:47$111' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$123' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:48$123_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$123' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$129' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:47$117'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:48$129_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:47$117_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$129' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$137' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:49$137_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$137' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$145' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:47$120'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:49$145_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:47$120_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$145' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$151' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:49$151_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$151' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:50$157' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:50$157_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:50$157' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:50$165' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:47$120'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:50$165_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:47$120_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:50$165' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:50$168' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$148'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:50$168_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$148_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:50$168' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:50$171' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:50$171_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:50$171' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:50$174' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$154'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:50$174_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$154_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:50$174' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:51$179' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:51$179_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:51$179' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:51$187' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:47$120'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:51$187_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:47$120_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:51$187' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:51$190' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$148'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:51$190_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$148_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:51$190' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:51$193' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:51$193_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:51$193' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:52$198' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:52$198_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:52$198' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:52$206' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:47$120'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:52$206_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:47$120_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:52$206' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:52$209' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$148'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:52$209_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$148_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:52$209' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:52$212' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:52$212_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:52$212' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:53$220' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:53$220_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:53$220' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:53$228' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:47$120'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:53$228_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:47$120_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:53$228' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:53$231' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$148'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:53$231_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$148_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:53$231' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:53$234' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:53$234_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:53$234' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$241' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:54$241_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$241' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$254' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$148'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:54$254_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$148_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$254' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$257' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:54$257_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$257' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$260' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$154'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:54$260_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$154_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$260' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$269' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:55$269_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$269' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$279' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$251'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:55$279_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:54$251_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$279' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$282' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$148'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:55$282_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$148_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$282' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$285' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:55$285_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$285' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$288' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$154'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:55$288_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$154_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$288' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$291' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$263'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:55$291_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:54$263_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$291' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$294' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$266'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:55$294_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:54$266_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:55$294' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:56$299' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:56$299_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:56$299' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:56$309' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$251'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:56$309_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:54$251_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:56$309' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:56$312' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$148'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:56$312_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$148_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:56$312' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:56$315' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:56$315_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:56$315' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:56$318' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$154'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:56$318_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$154_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:56$318' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:56$321' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$263'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:56$321_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:54$263_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:56$321' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:57$326' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:57$326_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:57$326' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:57$336' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$251'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:57$336_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:54$251_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:57$336' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:57$339' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$148'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:57$339_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$148_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:57$339' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:57$342' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:57$342_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:57$342' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:57$345' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$154'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:57$345_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$154_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:57$345' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:57$348' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$263'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:57$348_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:54$263_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:57$348' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:58$355' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:58$355_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:58$355' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:58$365' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$251'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:58$365_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:54$251_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:58$365' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:58$368' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$148'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:58$368_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$148_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:58$368' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:58$371' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:58$371_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:58$371' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:58$374' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$154'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:58$374_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$154_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:58$374' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:59$381' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:59$381_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:59$381' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:59$391' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$251'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:59$391_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:54$251_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:59$391' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:59$394' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$148'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:59$394_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$148_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:59$394' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:59$397' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:59$397_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:59$397' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:59$400' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$154'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:59$400_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$154_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:59$400' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:60$409' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:60$409_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:60$409' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:60$419' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$251'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:60$419_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:54$251_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:60$419' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:60$422' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$148'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:60$422_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$148_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:60$422' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:60$425' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:60$425_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:60$425' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:61$434' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:61$434_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:61$434' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:61$444' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$251'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:61$444_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:54$251_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:61$444' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:61$447' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$148'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:61$447_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$148_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:61$447' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:61$450' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:61$450_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:61$450' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:61$459' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:52$217'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:61$459_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:52$217_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:61$459' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:62$462' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:62$462_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:62$462' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:62$472' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$251'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:62$472_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:54$251_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:62$472' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:62$475' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:49$148'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:62$475_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:49$148_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:62$475' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:62$478' is identical to cell `$techmap\bot.bs.$not$bottleneckSequencer.v:48$134'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:62$478_Y = $techmap\bot.bs.$not$bottleneckSequencer.v:48$134_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:62$478' from module `\TOP'.
  Cell `$techmap\cpu.alu.$not$alu.v:65$39' is identical to cell `$techmap\cpu.$not$polaris.v:143$941'.
    Redirecting output \Y: $techmap\cpu.alu.$not$alu.v:65$39_Y = $techmap\cpu.$not$polaris.v:143$941_Y
    Removing $not cell `$techmap\cpu.alu.$not$alu.v:65$39' from module `\TOP'.
  Cell `$techmap\cpu.csrs.$not$polaris.v:565$1187' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\cpu.csrs.$not$polaris.v:565$1187_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\cpu.csrs.$not$polaris.v:565$1187' from module `\TOP'.
  Cell `$techmap\cpu.csrs.$not$polaris.v:566$1192' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\cpu.csrs.$not$polaris.v:566$1192_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\cpu.csrs.$not$polaris.v:566$1192' from module `\TOP'.
  Cell `$techmap\cpu.csrs.$not$polaris.v:569$1203' is identical to cell `$techmap\arb.$not$arbiter.v:66$48'.
    Redirecting output \Y: $techmap\cpu.csrs.$not$polaris.v:569$1203_Y = $techmap\arb.$not$arbiter.v:66$48_Y
    Removing $not cell `$techmap\cpu.csrs.$not$polaris.v:569$1203' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:145$1337' is identical to cell `$techmap\cpu.s.$and$seq.v:144$1331'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:145$1337_Y = $techmap\cpu.s.$and$seq.v:144$1331_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:145$1337' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:154$1381' is identical to cell `$techmap\cpu.s.$and$seq.v:153$1375'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:154$1381_Y = $techmap\cpu.s.$and$seq.v:153$1375_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:154$1381' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:160$1404' is identical to cell `$techmap\cpu.s.$and$seq.v:159$1398'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:160$1404_Y = $techmap\cpu.s.$and$seq.v:159$1398_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:160$1404' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:195$1593' is identical to cell `$techmap\cpu.s.$and$seq.v:194$1586'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:195$1593_Y = $techmap\cpu.s.$and$seq.v:194$1586_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:195$1593' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:196$1600' is identical to cell `$techmap\cpu.s.$and$seq.v:194$1586'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:196$1600_Y = $techmap\cpu.s.$and$seq.v:194$1586_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:196$1600' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:197$1607' is identical to cell `$techmap\cpu.s.$and$seq.v:194$1586'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:197$1607_Y = $techmap\cpu.s.$and$seq.v:194$1586_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:197$1607' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:198$1614' is identical to cell `$techmap\cpu.s.$and$seq.v:194$1586'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:198$1614_Y = $techmap\cpu.s.$and$seq.v:194$1586_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:198$1614' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:199$1621' is identical to cell `$techmap\cpu.s.$and$seq.v:194$1586'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:199$1621_Y = $techmap\cpu.s.$and$seq.v:194$1586_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:199$1621' from module `\TOP'.
  Cell `$techmap\cpu.s.$eq$seq.v:135$1294' is identical to cell `$techmap\cpu.s.$eq$seq.v:134$1291'.
    Redirecting output \Y: $techmap\cpu.s.$eq$seq.v:135$1294_Y = $techmap\cpu.s.$eq$seq.v:134$1291_Y
    Removing $eq cell `$techmap\cpu.s.$eq$seq.v:135$1294' from module `\TOP'.
  Cell `$techmap\cpu.s.$eq$seq.v:213$1678' is identical to cell `$techmap\cpu.s.$eq$seq.v:212$1675'.
    Redirecting output \Y: $techmap\cpu.s.$eq$seq.v:213$1678_Y = $techmap\cpu.s.$eq$seq.v:212$1675_Y
    Removing $eq cell `$techmap\cpu.s.$eq$seq.v:213$1678' from module `\TOP'.
  Cell `$techmap\cpu.s.$eq$seq.v:214$1681' is identical to cell `$techmap\cpu.s.$eq$seq.v:212$1675'.
    Redirecting output \Y: $techmap\cpu.s.$eq$seq.v:214$1681_Y = $techmap\cpu.s.$eq$seq.v:212$1675_Y
    Removing $eq cell `$techmap\cpu.s.$eq$seq.v:214$1681' from module `\TOP'.
  Cell `$techmap\cpu.s.$eq$seq.v:215$1684' is identical to cell `$techmap\cpu.s.$eq$seq.v:212$1675'.
    Redirecting output \Y: $techmap\cpu.s.$eq$seq.v:215$1684_Y = $techmap\cpu.s.$eq$seq.v:212$1675_Y
    Removing $eq cell `$techmap\cpu.s.$eq$seq.v:215$1684' from module `\TOP'.
  Cell `$techmap\cpu.s.$eq$seq.v:216$1687' is identical to cell `$techmap\cpu.s.$eq$seq.v:212$1675'.
    Redirecting output \Y: $techmap\cpu.s.$eq$seq.v:216$1687_Y = $techmap\cpu.s.$eq$seq.v:212$1675_Y
    Removing $eq cell `$techmap\cpu.s.$eq$seq.v:216$1687' from module `\TOP'.
  Cell `$techmap\cpu.s.$eq$seq.v:217$1690' is identical to cell `$techmap\cpu.s.$eq$seq.v:212$1675'.
    Redirecting output \Y: $techmap\cpu.s.$eq$seq.v:217$1690_Y = $techmap\cpu.s.$eq$seq.v:212$1675_Y
    Removing $eq cell `$techmap\cpu.s.$eq$seq.v:217$1690' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:121$1222' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:121$1222_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:121$1222' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:121$1229' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1219'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:121$1229_Y = $techmap\cpu.s.$not$seq.v:120$1219_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:121$1229' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:122$1235' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:122$1235_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:122$1235' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:122$1242' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1219'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:122$1242_Y = $techmap\cpu.s.$not$seq.v:120$1219_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:122$1242' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:123$1247' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:123$1247_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:123$1247' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:125$1260' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:125$1260_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:125$1260' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:125$1265' is identical to cell `$techmap\cpu.csrs.$not$polaris.v:566$1193'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:125$1265_Y = $techmap\cpu.csrs.$not$polaris.v:566$1193_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:125$1265' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:136$1297' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:136$1297_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:136$1297' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:137$1303' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:137$1303_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:137$1303' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:138$1309' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:138$1309_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:138$1309' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:149$1350' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:149$1350_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:149$1350' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:150$1356' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:150$1356_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:150$1356' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:151$1362' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:151$1362_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:151$1362' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:152$1368' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:152$1368_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:152$1368' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:153$1377' is identical to cell `$techmap\cpu.s.$not$seq.v:144$1333'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:153$1377_Y = $techmap\cpu.s.$not$seq.v:144$1333_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:153$1377' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:159$1400' is identical to cell `$techmap\cpu.s.$not$seq.v:144$1333'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:159$1400_Y = $techmap\cpu.s.$not$seq.v:144$1333_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:159$1400' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:166$1419' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:166$1419_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:166$1419' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:167$1425' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:167$1425_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:167$1425' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:168$1431' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:168$1431_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:168$1431' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:169$1437' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:169$1437_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:169$1437' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:170$1443' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:170$1443_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:170$1443' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:171$1449' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:171$1449_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:171$1449' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:172$1455' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:172$1455_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:172$1455' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:174$1465' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:174$1465_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:174$1465' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:175$1471' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:175$1471_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:175$1471' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:176$1479' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:176$1479_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:176$1479' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:177$1488' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:177$1488_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:177$1488' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:180$1496' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:180$1496_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:180$1496' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:181$1502' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:181$1502_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:181$1502' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:182$1508' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:182$1508_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:182$1508' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:183$1517' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:183$1517_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:183$1517' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:184$1525' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:184$1525_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:184$1525' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:185$1531' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:185$1531_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:185$1531' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:186$1537' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:186$1537_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:186$1537' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:186$1543' is identical to cell `$techmap\cpu.s.$not$seq.v:182$1514'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:186$1543_Y = $techmap\cpu.s.$not$seq.v:182$1514_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:186$1543' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:187$1546' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:187$1546_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:187$1546' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:189$1555' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:189$1555_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:189$1555' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:190$1561' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:190$1561_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:190$1561' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:191$1567' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:191$1567_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:191$1567' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:192$1573' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:192$1573_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:192$1573' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:193$1579' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:193$1579_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:193$1579' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:202$1631' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:202$1631_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:202$1631' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:203$1637' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:203$1637_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:203$1637' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:204$1643' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:204$1643_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:204$1643' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:205$1649' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:205$1649_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:205$1649' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:208$1657' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:208$1657_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:208$1657' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:209$1663' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:209$1663_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:209$1663' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:211$1670' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:211$1670_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:211$1670' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:218$1694' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:218$1694_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:218$1694' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:219$1702' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:219$1702_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:219$1702' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:220$1708' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:220$1708_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:220$1708' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:221$1716' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:221$1716_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:221$1716' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:222$1722' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:222$1722_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:222$1722' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:223$1730' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:223$1730_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:223$1730' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:224$1736' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:224$1736_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:224$1736' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:225$1742' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:225$1742_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:225$1742' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:226$1750' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:226$1750_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:226$1750' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:227$1756' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:227$1756_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:227$1756' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:228$1762' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:228$1762_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:228$1762' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:229$1770' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:229$1770_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:229$1770' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:230$1776' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:230$1776_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:230$1776' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:231$1782' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:231$1782_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:231$1782' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:232$1790' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:232$1790_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:232$1790' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:233$1796' is identical to cell `$techmap\cpu.s.$not$seq.v:120$1212'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:233$1796_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:233$1796' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2306' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2306_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2306' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2308' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2308_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2308' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2310' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2310_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2310' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2312' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2312_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2312' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2314' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2314_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2314' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2316' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2316_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2316' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2318' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2318_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2318' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2320' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2320_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2320' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2322' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2322_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2322' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2324' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2324_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2324' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2326' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2326_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2326' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2328' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2328_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2328' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2330' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2330_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2330' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2332' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2332_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2332' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:27$2334' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:27$2334_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:27$2334' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:34$2289' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:34$2289_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:34$2289' from module `\TOP'.
  Cell `$techmap\ram.$not$sram.v:35$2294' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $techmap\ram.$not$sram.v:35$2294_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$techmap\ram.$not$sram.v:35$2294' from module `\TOP'.
  Cell `$techmap\arb.$and$arbiter.v:67$53' is identical to cell `$techmap\arb.$and$arbiter.v:66$49'.
    Redirecting output \Y: $techmap\arb.$and$arbiter.v:67$53_Y = $techmap\arb.$and$arbiter.v:66$49_Y
    Removing $and cell `$techmap\arb.$and$arbiter.v:67$53' from module `\TOP'.
  Cell `$techmap\wb_bridge.$or$bridge.v:69$773' is identical to cell `$techmap\wb_bridge.$or$bridge.v:68$770'.
    Redirecting output \Y: $techmap\wb_bridge.$or$bridge.v:69$773_Y = $techmap\wb_bridge.$or$bridge.v:68$770_Y
    Removing $pos cell `$techmap\wb_bridge.$or$bridge.v:69$773' from module `\TOP'.
  Cell `$not$TOP.v:44$2338' is identical to cell `$techmap\ram.$not$sram.v:27$2304'.
    Redirecting output \Y: $not$TOP.v:44$2338_Y = $techmap\ram.$not$sram.v:27$2304_Y
    Removing $not cell `$not$TOP.v:44$2338' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$328' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:57$328_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$328' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$330' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:57$330_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$330' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$332' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$305'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:57$332_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$305_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$332' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$334' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$307'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:57$334_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$307_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$334' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$337' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$310'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:57$337_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$310_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$337' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$340' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$313'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:57$340_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$313_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$340' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$343' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$316'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:57$343_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$316_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$343' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$346' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$319'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:57$346_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$319_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$346' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$349' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$322'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:57$349_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$322_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$349' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$351' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$324'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:57$351_Y = \bot.bs.R1401
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$351' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$357' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:58$357_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$357' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$359' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:58$359_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$359' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$361' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$305'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:58$361_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$305_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$361' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$363' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$307'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:58$363_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$307_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$363' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$366' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$310'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:58$366_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$310_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$366' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$369' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$313'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:58$369_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$313_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$369' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$372' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$316'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:58$372_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$316_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$372' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$375' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$319'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:58$375_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$319_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$375' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$383' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:59$383_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$383' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$385' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:59$385_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$385' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$387' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$305'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:59$387_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$305_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$387' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$389' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$307'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:59$389_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$307_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$389' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$392' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$310'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:59$392_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$310_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$392' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$395' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$313'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:59$395_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$313_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$395' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$398' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$316'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:59$398_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$316_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$398' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$401' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$319'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:59$401_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$319_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$401' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$403' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$377'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:59$403_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:58$377_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$403' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$405' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$379'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:59$405_Y = \bot.bs.R1403
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$405' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$411' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:60$411_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$411' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$413' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:60$413_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$413' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$415' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$305'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:60$415_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$305_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$415' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$417' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$307'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:60$417_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$307_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$417' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$420' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$310'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:60$420_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$310_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$420' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$423' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$313'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:60$423_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$313_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$423' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$426' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$316'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:60$426_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$316_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$426' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$436' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:61$436_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$436' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$438' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:61$438_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$438' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$440' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$305'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:61$440_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$305_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$440' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$442' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$307'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:61$442_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$307_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$442' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$445' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$310'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:61$445_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$310_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$445' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$448' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$313'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:61$448_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$313_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$448' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$451' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$316'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:61$451_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$316_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$451' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$453' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$428'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:61$453_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:60$428_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$453' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$455' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$430'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:61$455_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:60$430_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$455' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$457' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$432'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:61$457_Y = \bot.bs.R1405
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$457' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$464' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:62$464_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$464' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$466' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:62$466_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$466' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$468' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$305'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:62$468_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$305_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$468' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$470' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$307'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:62$470_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$307_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$470' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$473' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$310'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:62$473_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$310_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$473' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$476' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$313'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:62$476_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$313_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$476' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$479' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$316'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:62$479_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$316_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$479' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$481' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$428'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:62$481_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:60$428_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$481' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$483' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$430'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:62$483_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:60$430_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$483' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$485' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$432'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:62$485_Y = \bot.bs.R1405
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$485' from module `\TOP'.
  Cell `$techmap\bot.$and$bottleneck.v:86$694' is identical to cell `$techmap\bot.$and$bottleneck.v:84$683'.
    Redirecting output \Y: $techmap\bot.$and$bottleneck.v:86$694_Y = $techmap\bot.$and$bottleneck.v:84$683_Y
    Removing $and cell `$techmap\bot.$and$bottleneck.v:86$694' from module `\TOP'.
  Cell `$techmap\bot.$and$bottleneck.v:88$705' is identical to cell `$techmap\bot.$and$bottleneck.v:84$683'.
    Redirecting output \Y: $techmap\bot.$and$bottleneck.v:88$705_Y = $techmap\bot.$and$bottleneck.v:84$683_Y
    Removing $and cell `$techmap\bot.$and$bottleneck.v:88$705' from module `\TOP'.
  Cell `$techmap\arb.$and$arbiter.v:71$70' is identical to cell `$techmap\arb.$and$arbiter.v:70$64'.
    Redirecting output \Y: $techmap\arb.$and$arbiter.v:71$70_Y = $techmap\arb.$and$arbiter.v:70$64_Y
    Removing $and cell `$techmap\arb.$and$arbiter.v:71$70' from module `\TOP'.
  Cell `$techmap\arb.$and$arbiter.v:71$71' is identical to cell `$techmap\arb.$and$arbiter.v:70$65'.
    Redirecting output \Y: $techmap\arb.$and$arbiter.v:71$71_Y = $techmap\arb.$and$arbiter.v:70$65_Y
    Removing $and cell `$techmap\arb.$and$arbiter.v:71$71' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:121$1224' is identical to cell `$techmap\cpu.s.$and$seq.v:120$1214'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:121$1224_Y = $techmap\cpu.s.$and$seq.v:120$1214_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:121$1224' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:121$1227' is identical to cell `$techmap\cpu.s.$and$seq.v:120$1217'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:121$1227_Y = $techmap\cpu.s.$and$seq.v:120$1217_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:121$1227' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:121$1230' is identical to cell `$techmap\cpu.s.$and$seq.v:120$1220'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:121$1230_Y = \cpu.s.R1392
    Removing $and cell `$techmap\cpu.s.$and$seq.v:121$1230' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:122$1237' is identical to cell `$techmap\cpu.s.$and$seq.v:120$1214'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:122$1237_Y = $techmap\cpu.s.$and$seq.v:120$1214_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:122$1237' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:122$1240' is identical to cell `$techmap\cpu.s.$and$seq.v:120$1217'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:122$1240_Y = $techmap\cpu.s.$and$seq.v:120$1217_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:122$1240' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:122$1243' is identical to cell `$techmap\cpu.s.$and$seq.v:120$1220'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:122$1243_Y = \cpu.s.R1392
    Removing $and cell `$techmap\cpu.s.$and$seq.v:122$1243' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:149$1352' is identical to cell `$techmap\cpu.s.$and$seq.v:136$1299'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:149$1352_Y = $techmap\cpu.s.$and$seq.v:136$1299_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:149$1352' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:150$1358' is identical to cell `$techmap\cpu.s.$and$seq.v:137$1305'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:150$1358_Y = $techmap\cpu.s.$and$seq.v:137$1305_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:150$1358' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:151$1364' is identical to cell `$techmap\cpu.s.$and$seq.v:138$1311'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:151$1364_Y = $techmap\cpu.s.$and$seq.v:138$1311_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:151$1364' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:166$1421' is identical to cell `$techmap\cpu.s.$and$seq.v:136$1299'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:166$1421_Y = $techmap\cpu.s.$and$seq.v:136$1299_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:166$1421' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:167$1427' is identical to cell `$techmap\cpu.s.$and$seq.v:137$1305'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:167$1427_Y = $techmap\cpu.s.$and$seq.v:137$1305_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:167$1427' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:168$1433' is identical to cell `$techmap\cpu.s.$and$seq.v:138$1311'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:168$1433_Y = $techmap\cpu.s.$and$seq.v:138$1311_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:168$1433' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:169$1439' is identical to cell `$techmap\cpu.s.$and$seq.v:152$1370'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:169$1439_Y = $techmap\cpu.s.$and$seq.v:152$1370_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:169$1439' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:170$1445' is identical to cell `$techmap\cpu.s.$and$seq.v:136$1299'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:170$1445_Y = $techmap\cpu.s.$and$seq.v:136$1299_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:170$1445' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:171$1451' is identical to cell `$techmap\cpu.s.$and$seq.v:137$1305'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:171$1451_Y = $techmap\cpu.s.$and$seq.v:137$1305_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:171$1451' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:172$1457' is identical to cell `$techmap\cpu.s.$and$seq.v:138$1311'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:172$1457_Y = $techmap\cpu.s.$and$seq.v:138$1311_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:172$1457' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:174$1467' is identical to cell `$techmap\cpu.s.$and$seq.v:136$1299'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:174$1467_Y = $techmap\cpu.s.$and$seq.v:136$1299_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:174$1467' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:175$1473' is identical to cell `$techmap\cpu.s.$and$seq.v:136$1299'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:175$1473_Y = $techmap\cpu.s.$and$seq.v:136$1299_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:175$1473' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:175$1475' is identical to cell `$techmap\cpu.s.$and$seq.v:174$1469'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:175$1475_Y = \cpu.s.R1446
    Removing $and cell `$techmap\cpu.s.$and$seq.v:175$1475' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:176$1481' is identical to cell `$techmap\cpu.s.$and$seq.v:136$1299'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:176$1481_Y = $techmap\cpu.s.$and$seq.v:136$1299_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:176$1481' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:176$1483' is identical to cell `$techmap\cpu.s.$and$seq.v:174$1469'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:176$1483_Y = \cpu.s.R1446
    Removing $and cell `$techmap\cpu.s.$and$seq.v:176$1483' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:177$1490' is identical to cell `$techmap\cpu.s.$and$seq.v:137$1305'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:177$1490_Y = $techmap\cpu.s.$and$seq.v:137$1305_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:177$1490' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:180$1498' is identical to cell `$techmap\cpu.s.$and$seq.v:136$1299'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:180$1498_Y = $techmap\cpu.s.$and$seq.v:136$1299_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:180$1498' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:181$1504' is identical to cell `$techmap\cpu.s.$and$seq.v:137$1305'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:181$1504_Y = $techmap\cpu.s.$and$seq.v:137$1305_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:181$1504' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:182$1510' is identical to cell `$techmap\cpu.s.$and$seq.v:138$1311'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:182$1510_Y = $techmap\cpu.s.$and$seq.v:138$1311_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:182$1510' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:183$1519' is identical to cell `$techmap\cpu.s.$and$seq.v:138$1311'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:183$1519_Y = $techmap\cpu.s.$and$seq.v:138$1311_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:183$1519' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:183$1521' is identical to cell `$techmap\cpu.s.$and$seq.v:182$1512'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:183$1521_Y = $techmap\cpu.s.$and$seq.v:182$1512_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:183$1521' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:184$1527' is identical to cell `$techmap\cpu.s.$and$seq.v:136$1299'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:184$1527_Y = $techmap\cpu.s.$and$seq.v:136$1299_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:184$1527' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:185$1533' is identical to cell `$techmap\cpu.s.$and$seq.v:137$1305'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:185$1533_Y = $techmap\cpu.s.$and$seq.v:137$1305_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:185$1533' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:186$1539' is identical to cell `$techmap\cpu.s.$and$seq.v:138$1311'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:186$1539_Y = $techmap\cpu.s.$and$seq.v:138$1311_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:186$1539' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:187$1548' is identical to cell `$techmap\cpu.s.$and$seq.v:138$1311'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:187$1548_Y = $techmap\cpu.s.$and$seq.v:138$1311_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:187$1548' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:187$1550' is identical to cell `$techmap\cpu.s.$and$seq.v:186$1541'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:187$1550_Y = $techmap\cpu.s.$and$seq.v:186$1541_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:187$1550' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:189$1557' is identical to cell `$techmap\cpu.s.$and$seq.v:136$1299'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:189$1557_Y = $techmap\cpu.s.$and$seq.v:136$1299_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:189$1557' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:190$1563' is identical to cell `$techmap\cpu.s.$and$seq.v:137$1305'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:190$1563_Y = $techmap\cpu.s.$and$seq.v:137$1305_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:190$1563' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:191$1569' is identical to cell `$techmap\cpu.s.$and$seq.v:138$1311'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:191$1569_Y = $techmap\cpu.s.$and$seq.v:138$1311_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:191$1569' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:192$1575' is identical to cell `$techmap\cpu.s.$and$seq.v:152$1370'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:192$1575_Y = $techmap\cpu.s.$and$seq.v:152$1370_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:192$1575' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:203$1639' is identical to cell `$techmap\cpu.s.$and$seq.v:202$1633'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:203$1639_Y = $techmap\cpu.s.$and$seq.v:202$1633_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:203$1639' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:204$1645' is identical to cell `$techmap\cpu.s.$and$seq.v:202$1633'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:204$1645_Y = $techmap\cpu.s.$and$seq.v:202$1633_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:204$1645' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:205$1651' is identical to cell `$techmap\cpu.s.$and$seq.v:202$1633'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:205$1651_Y = $techmap\cpu.s.$and$seq.v:202$1633_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:205$1651' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:219$1704' is identical to cell `$techmap\cpu.s.$and$seq.v:218$1696'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:219$1704_Y = $techmap\cpu.s.$and$seq.v:218$1696_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:219$1704' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:221$1718' is identical to cell `$techmap\cpu.s.$and$seq.v:220$1710'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:221$1718_Y = $techmap\cpu.s.$and$seq.v:220$1710_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:221$1718' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:223$1732' is identical to cell `$techmap\cpu.s.$and$seq.v:222$1724'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:223$1732_Y = $techmap\cpu.s.$and$seq.v:222$1724_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:223$1732' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:224$1738' is identical to cell `$techmap\cpu.s.$and$seq.v:222$1724'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:224$1738_Y = $techmap\cpu.s.$and$seq.v:222$1724_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:224$1738' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:226$1752' is identical to cell `$techmap\cpu.s.$and$seq.v:225$1744'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:226$1752_Y = $techmap\cpu.s.$and$seq.v:225$1744_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:226$1752' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:227$1758' is identical to cell `$techmap\cpu.s.$and$seq.v:225$1744'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:227$1758_Y = $techmap\cpu.s.$and$seq.v:225$1744_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:227$1758' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:229$1772' is identical to cell `$techmap\cpu.s.$and$seq.v:228$1764'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:229$1772_Y = $techmap\cpu.s.$and$seq.v:228$1764_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:229$1772' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:230$1778' is identical to cell `$techmap\cpu.s.$and$seq.v:228$1764'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:230$1778_Y = $techmap\cpu.s.$and$seq.v:228$1764_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:230$1778' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:232$1792' is identical to cell `$techmap\cpu.s.$and$seq.v:231$1784'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:232$1792_Y = $techmap\cpu.s.$and$seq.v:231$1784_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:232$1792' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:233$1798' is identical to cell `$techmap\cpu.s.$and$seq.v:231$1784'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:233$1798_Y = $techmap\cpu.s.$and$seq.v:231$1784_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:233$1798' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:47$113' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:47$113_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:47$113' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:47$115' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:47$115_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:47$115' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:48$125' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:48$125_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:48$125' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:48$127' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:48$127_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:48$127' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:48$130' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:47$118'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:48$130_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:47$118_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:48$130' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$139' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:49$139_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$139' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$141' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:49$141_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$141' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$143' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$305'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:49$143_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$305_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$143' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$159' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:50$159_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$159' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$161' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:50$161_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$161' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$163' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$305'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:50$163_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$305_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$163' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$166' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$146'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:50$166_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:49$146_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$166' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$169' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$149'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:50$169_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:49$149_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$169' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$172' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$152'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:50$172_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:49$152_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$172' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$175' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$155'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:50$175_Y = \bot.bs.R1394
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:50$175' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$181' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:51$181_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$181' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$183' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:51$183_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$183' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$185' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$305'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:51$185_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$305_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$185' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$188' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$146'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:51$188_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:49$146_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$188' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$191' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$149'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:51$191_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:49$149_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$191' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$194' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$152'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:51$194_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:49$152_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$194' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$200' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:52$200_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$200' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$202' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:52$202_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$202' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$204' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$305'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:52$204_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$305_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$204' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$207' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$146'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:52$207_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:49$146_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$207' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$210' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$149'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:52$210_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:49$149_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$210' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$213' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$152'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:52$213_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:49$152_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$213' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$215' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$196'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:52$215_Y = \bot.bs.R1396
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:52$215' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$222' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:53$222_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$222' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$224' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:53$224_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$224' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$226' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$305'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:53$226_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$305_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$226' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$229' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$146'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:53$229_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:49$146_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$229' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$232' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$149'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:53$232_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:49$149_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$232' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$235' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:49$152'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:53$235_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:49$152_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$235' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$237' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:51$196'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:53$237_Y = \bot.bs.R1396
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:53$237' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$243' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:54$243_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$243' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2307' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2307_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2307' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2309' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2309_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2309' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2311' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2311_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2311' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2313' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2313_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2313' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2315' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2315_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2315' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2317' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2317_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2317' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2319' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2319_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2319' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2321' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2321_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2321' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2323' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2323_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2323' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2325' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2325_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2325' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2327' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2327_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2327' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2329' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2329_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2329' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2331' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2331_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2331' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2333' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2333_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2333' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:27$2335' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:27$2335_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:27$2335' from module `\TOP'.
  Cell `$techmap\ram.$and$sram.v:34$2290' is identical to cell `$techmap\ram.$and$sram.v:27$2305'.
    Redirecting output \Y: $techmap\ram.$and$sram.v:34$2290_Y = $techmap\ram.$and$sram.v:27$2305_Y
    Removing $and cell `$techmap\ram.$and$sram.v:34$2290' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$245' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:54$245_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$245' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$247' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$305'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:54$247_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$305_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$247' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$249' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$307'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:54$249_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$307_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$249' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$252' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$310'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:54$252_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$310_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$252' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$255' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$313'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:54$255_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$313_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$255' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$258' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$316'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:54$258_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$316_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$258' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$261' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$319'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:54$261_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$319_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$261' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$264' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$322'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:54$264_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$322_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$264' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$271' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$301'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:55$271_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$301_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$271' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$273' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$303'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:55$273_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$303_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$273' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$275' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$305'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:55$275_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$305_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$275' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$277' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$307'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:55$277_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$307_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$277' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$280' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$310'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:55$280_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$310_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$280' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$283' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$313'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:55$283_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$313_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$283' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$286' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$316'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:55$286_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$316_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$286' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$289' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$319'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:55$289_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$319_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$289' from module `\TOP'.
  Cell `$techmap\arb.$and$arbiter.v:66$49' is identical to cell `$techmap\arb.$and$arbiter.v:70$64'.
    Redirecting output \Y: $techmap\arb.$and$arbiter.v:66$49_Y = $techmap\arb.$and$arbiter.v:70$64_Y
    Removing $and cell `$techmap\arb.$and$arbiter.v:66$49' from module `\TOP'.
  Cell `$techmap\arb.$and$arbiter.v:67$54' is identical to cell `$techmap\arb.$and$arbiter.v:70$65'.
    Redirecting output \Y: $techmap\arb.$and$arbiter.v:67$54_Y = $techmap\arb.$and$arbiter.v:70$65_Y
    Removing $and cell `$techmap\arb.$and$arbiter.v:67$54' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$292' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$322'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:55$292_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:56$322_Y
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$292' from module `\TOP'.
  Cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$295' is identical to cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$267'.
    Redirecting output \Y: $techmap\bot.bs.$and$bottleneckSequencer.v:55$295_Y = \bot.bs.R1399
    Removing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$295' from module `\TOP'.
  Cell `$techmap\arb.$and$arbiter.v:67$55' is identical to cell `$techmap\arb.$and$arbiter.v:71$72'.
    Redirecting output \Y: $techmap\arb.$and$arbiter.v:67$55_Y = $techmap\arb.$and$arbiter.v:71$72_Y
    Removing $and cell `$techmap\arb.$and$arbiter.v:67$55' from module `\TOP'.
Removed a total of 361 cells.

12.7.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:101$526 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:102$527 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:104$529 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:105$530 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:107$532 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:108$533 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:109$534 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:110$535 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:112$537 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:114$539 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:115$540 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:117$542 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:118$543 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:119$544 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:120$545 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:122$547 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:123$548 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:124$549 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:126$551 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:127$552 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:129$554 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:130$555 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:131$556 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:132$557 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:134$559 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:135$560 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:136$561 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:137$562 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:138$563 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:140$565 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:142$567 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:143$568 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:144$569 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:145$570 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:147$572 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:148$573 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:149$574 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:150$575 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:65$490 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:67$492 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:68$493 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:69$494 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:70$495 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:71$496 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:74$499 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:76$501 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:77$502 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:78$503 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:79$504 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:80$505 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:83$508 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:84$509 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:86$511 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:87$512 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:88$513 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:89$514 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:91$516 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:94$519 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:96$521 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:97$522 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:98$523 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:99$524 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:138$931 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:139$933 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:140$936 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:143$942 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:151$949 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:160$955 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:161$957 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:162$960 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:163$963 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:165$966 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:166$968 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:167$971 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:168$974 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:169$977 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:170$980 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:171$983 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:172$986 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:173$989 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:174$991 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:175$994 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:176$997 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:177$1000 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:178$1002 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:179$1005 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:181$1009 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:182$1011 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:183$1013 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:184$1015 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:185$1017 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:186$1019 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:188$1023 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:189$1025 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:192$1030 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:193$1031 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:33$6 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:38$11 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:39$13 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:47$21 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:50$23
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:52$25
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:54$27
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:56$29
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:58$31 (pure)
      Removing pure flag from root mux $techmap\cpu.alu.$ternary$alu.v:50$23.
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:62$35 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:64$38 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:65$41 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:490$1056 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:493$1064 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:495$1070 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:498$1079 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:499$1082 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:500$1085 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:501$1088 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:502$1091 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:503$1094 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:505$1100 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:506$1103 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:507$1106 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:512$1112 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:513$1114 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:519$1121 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:520$1124 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:521$1127 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:525$1132 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:526$1133 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:527$1136 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:528$1139 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:535$1145 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:536$1147 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:537$1150 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:540$1153 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:545$1158 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:546$1160 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:548$1166 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:554$1171 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:555$1172 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:556$1174 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:557$1176 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:558$1179 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:561$1182 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:563$1186 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:565$1191 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:566$1196 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:569$1207 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2376 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2379 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2382 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:58$646 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$648 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$649 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:60$652 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:60$653 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:63$658 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:64$660 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:65$663 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:66$666 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:66$668 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$670 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$671 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$673 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:69$677 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:83$681 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:84$686 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:85$691 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:86$697 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:87$702 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:88$708 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:89$712 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$715 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$716 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:73$76
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$78 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$79 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$90 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$91 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:234$1801 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:235$1802 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:236$1803 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:237$1804 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:238$1805 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:239$1806 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:240$1807 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:241$1808 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:242$1809 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:243$1810 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:244$1811 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:245$1812 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:246$1813 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:247$1814 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:248$1815 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:249$1816 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:257$1824 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:258$1825 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:259$1826 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:260$1827 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:261$1828 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:262$1829 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:263$1830 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:264$1831 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:265$1832 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:266$1833 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:267$1834 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:268$1835 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:269$1836 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:270$1837 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:271$1838 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:272$1839 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:273$1840 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:274$1841 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:275$1842 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:276$1843 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:277$1844 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:278$1845 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:279$1846 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:280$1847 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:281$1848 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:282$1849 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:283$1850 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:284$1851 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:285$1852 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:286$1853 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:287$1854 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:288$1855 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:289$1856 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:290$1857 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:291$1858 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:292$1859 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:293$1860 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:294$1861 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:295$1862 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:296$1863 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:297$1864 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:298$1865 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:299$1866 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:300$1867 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:301$1868 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:302$1869 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:303$1870 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:304$1871 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:305$1872 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:306$1873 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:307$1874 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:308$1875 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:309$1876 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:310$1877 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:311$1878 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:312$1879 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:313$1880 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:314$1881 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:315$1882 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:316$1883 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:317$1884 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:318$1885 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:319$1886 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:320$1887 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:321$1888 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:322$1889 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:323$1890 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:324$1891 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:325$1892 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:326$1893 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:327$1894 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:328$1895 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:329$1896 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:330$1897 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:331$1898 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:332$1899 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:333$1900 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:334$1901 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:335$1902 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:336$1903 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:337$1904 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:338$1905 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:339$1906 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:340$1907 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:341$1908 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:342$1909 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:343$1910 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:344$1911 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:345$1912 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:346$1913 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:347$1914 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:348$1915 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:349$1916 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:350$1917 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:351$1918 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:352$1919 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:353$1920 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:354$1921 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:355$1922 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:356$1923 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:357$1924 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:358$1925 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:359$1926 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:360$1927 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:361$1928 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:362$1929 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:363$1930 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:364$1931 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:365$1932 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:366$1933 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:367$1934 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:368$1935 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:369$1936 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:370$1937 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:371$1938 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:372$1939 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:373$1940 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:374$1941 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:375$1942 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:376$1943 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:377$1944 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:378$1945 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:379$1946 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:380$1947 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:381$1948 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:382$1949 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:383$1950 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:384$1951 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:385$1952 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:386$1953 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:387$1954 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:388$1955 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:389$1956 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:390$1957 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:391$1958 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:392$1959 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:393$1960 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:394$1961 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:395$1962 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:396$1963 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:397$1964 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:398$1965 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:399$1966 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:400$1967 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:401$1968 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:402$1969 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:403$1970 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:404$1971 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:405$1972 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:406$1973 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:407$1974 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:408$1975 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:409$1976 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:410$1977 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:411$1978 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:412$1979 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:413$1980 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:414$1981 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:415$1982 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:416$1983 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:417$1984 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:418$1985 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:419$1986 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:420$1987 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:421$1988 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:422$1989 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:423$1990 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:424$1991 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:425$1992 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:426$1993 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:427$1994 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:428$1995 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:429$1996 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:430$1997 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:432$1999 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:434$2001 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:436$2003 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:438$2005 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:439$2006 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:440$2007 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:441$2008 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:442$2009 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:443$2010 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:444$2011 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:445$2012 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:446$2013 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:447$2014 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:448$2015 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:449$2016 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:450$2017 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:451$2018 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:452$2019 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:453$2020 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:454$2021 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:455$2022 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:456$2023 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:457$2024 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:458$2025 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:460$2027 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:461$2028 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:462$2029 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:463$2030 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:464$2031 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:465$2032 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:466$2033 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:468$2035 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:469$2036 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:470$2037 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:471$2038 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:472$2039 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:473$2040 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:474$2041 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:475$2042 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:476$2043 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:478$2045 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:479$2046 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:480$2047 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:481$2048 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:482$2049 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:483$2050 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:484$2051 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:485$2052 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:486$2053 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:487$2054 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:488$2055 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:489$2056 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:491$2058 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:492$2059 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:493$2060 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:494$2061 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:495$2062 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:496$2063 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:497$2064 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:498$2065 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:499$2066 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:500$2067 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:501$2068 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:502$2069 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:503$2070 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:505$2072 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:506$2073 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:507$2074 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:508$2075 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:509$2076 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:510$2077 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:511$2078 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:512$2079 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:513$2080 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:514$2081 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:515$2082 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:516$2083 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:518$2085 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:519$2086 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:520$2087 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:521$2088 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:522$2089 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:523$2090 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:524$2091 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:525$2092 (pure)
    Root of a mux tree: $techmap\cpu.xrs.$ternary$xrs.v:23$2344
    Root of a mux tree: $techmap\cpu.xrs.column0.$procmux$2364 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column0.$procmux$2367 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column0.$procmux$2370 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column1.$procmux$2364 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column1.$procmux$2367 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column1.$procmux$2370 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column2.$procmux$2364 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column2.$procmux$2367 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column2.$procmux$2370 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column3.$procmux$2364 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column3.$procmux$2367 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column3.$procmux$2370 (pure)
    Root of a mux tree: $procmux$2373 (pure)
    Root of a mux tree: $techmap\wb_bridge.$ternary$bridge.v:112$842 (pure)
    Root of a mux tree: $techmap\wb_bridge.$ternary$bridge.v:113$844 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:50$23 (rerun as non-pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

12.7.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TOP.
    New input vector for $reduce_or cell $techmap\cpu.xrs.$reduce_or$xrs.v:23$2342: { \cpu.xrs.addr [0] \cpu.xrs.addr [1] \cpu.xrs.addr [2] \cpu.xrs.addr [3] \cpu.xrs.addr [4] }
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:551$1169: { \cpu.csrs.mcause_we \cpu.csrs.mcause_11 \cpu.csrs.mcause_3 \cpu.csrs.mcause_2 }
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:543$1155: { \cpu.csrs.mepc_we \cpu.csrs.mepc_ia }
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:533$1142: { \cpu_reset \cpu.csrs.mtvec_we }
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:523$1129: { \cpu.csrs.mstatus_we \cpu.csrs.mpie_1 \cpu.csrs.mpie_mie }
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:516$1117: { \cpu.csrs.mstatus_we \cpu.csrs.mie_mpie \cpu.csrs.mie_0 }
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:510$1109: { \cpu_reset \cpu.csrs.irqEn_cdat }
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:442$1052: { \cpu.csrs.csrv_minstret \cpu.csrs.csrv_mtime \cpu.csrs.csrv_mcycle \cpu.csrs.csrv_mip \cpu.csrs.csrv_mbadaddr \cpu.csrs.csrv_mcause \cpu.csrs.csrv_mepc \cpu.csrs.csrv_mscratch \cpu.csrs.csrv_mtvec \cpu.csrs.csrv_mie \cpu.csrs.csrv_mideleg \cpu.csrs.csrv_medeleg \cpu.csrs.csrv_mstatus \cpu.csrs.csrv_mhartid \cpu.csrs.csrv_mimpid \cpu.csrs.csrv_marchid \cpu.csrs.csrv_mvendorid \cpu.csrs.csrv_misa }
    New input vector for $reduce_or cell $techmap\cpu.alu.$reduce_or$alu.v:34$7: { \cpu.alu.out_o [0] \cpu.alu.out_o [1] \cpu.alu.out_o [2] \cpu.alu.out_o [3] \cpu.alu.out_o [4] \cpu.alu.out_o [5] \cpu.alu.out_o [6] \cpu.alu.out_o [7] \cpu.alu.out_o [8] \cpu.alu.out_o [9] \cpu.alu.out_o [10] \cpu.alu.out_o [11] \cpu.alu.out_o [12] \cpu.alu.out_o [13] \cpu.alu.out_o [14] \cpu.alu.out_o [15] \cpu.alu.out_o [16] \cpu.alu.out_o [17] \cpu.alu.out_o [18] \cpu.alu.out_o [19] \cpu.alu.out_o [20] \cpu.alu.out_o [21] \cpu.alu.out_o [22] \cpu.alu.out_o [23] \cpu.alu.out_o [24] \cpu.alu.out_o [25] \cpu.alu.out_o [26] \cpu.alu.out_o [27] \cpu.alu.out_o [28] \cpu.alu.out_o [29] \cpu.alu.out_o [30] \cpu.alu.out_o [31] \cpu.alu.out_o [32] \cpu.alu.out_o [33] \cpu.alu.out_o [34] \cpu.alu.out_o [35] \cpu.alu.out_o [36] \cpu.alu.out_o [37] \cpu.alu.out_o [38] \cpu.alu.out_o [39] \cpu.alu.out_o [40] \cpu.alu.out_o [41] \cpu.alu.out_o [42] \cpu.alu.out_o [43] \cpu.alu.out_o [44] \cpu.alu.out_o [45] \cpu.alu.out_o [46] \cpu.alu.out_o [47] \cpu.alu.out_o [48] \cpu.alu.out_o [49] \cpu.alu.out_o [50] \cpu.alu.out_o [51] \cpu.alu.out_o [52] \cpu.alu.out_o [53] \cpu.alu.out_o [54] \cpu.alu.out_o [55] \cpu.alu.out_o [56] \cpu.alu.out_o [57] \cpu.alu.out_o [58] \cpu.alu.out_o [59] \cpu.alu.out_o [60] \cpu.alu.out_o [61] \cpu.alu.out_o [62] \cpu.alu.out_o [63] }
    New input vector for $reduce_or cell $techmap\cpu.$reduce_or$polaris.v:180$1007: { \cpu.pc_mepc \cpu.pc_mtvec \cpu.pc_alu \cpu.pc_pcPlus4 \cpu.pc_mbvec }
    New input vector for $reduce_or cell $techmap\cpu.$reduce_or$polaris.v:158$952: { \cpu.alub_imm5 \cpu.alub_imm12sb \cpu.alub_imm20uj \cpu.alub_imm20u \cpu.alub_imm12s \cpu.alub_imm12i \cpu.alub_rdat }
    New input vector for $reduce_or cell $techmap\cpu.$reduce_or$polaris.v:157$950: { \cpu.alua_cdat \cpu.alua_ia \cpu.alua_0 \cpu.alua_rdat }
    New input vector for $reduce_or cell $techmap\cpu.$reduce_or$polaris.v:133$927: { \cpu.ir [15] \cpu.ir [16] \cpu.ir [17] \cpu.ir [18] \cpu.ir [19] }
    Consolidated identical input bits for $mux cell $techmap\cpu.xrs.column0.$procmux$2364:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349
      New ports: A=1'0, B=1'1, Y=$techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0]
      New connections: $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [15:1] = { $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] }
    Consolidated identical input bits for $mux cell $techmap\cpu.xrs.column1.$procmux$2364:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349
      New ports: A=1'0, B=1'1, Y=$techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0]
      New connections: $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [15:1] = { $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] }
    Consolidated identical input bits for $mux cell $techmap\cpu.xrs.column2.$procmux$2364:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349
      New ports: A=1'0, B=1'1, Y=$techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0]
      New connections: $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [15:1] = { $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] }
    Consolidated identical input bits for $mux cell $techmap\cpu.xrs.column3.$procmux$2364:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349
      New ports: A=1'0, B=1'1, Y=$techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0]
      New connections: $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [15:1] = { $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] }
  Optimizing cells in module \TOP.
Performed a total of 17 changes.

12.7.5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:104$529' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:104$529_Y [31:1] \bot.plus6 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528_Y [31:1] \bot.bs.out1448 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:104$529' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:105$530' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:105$530_Y [31:1] \bot.SDatO_MDatI63_48 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528_Y [31:1] \bot.bs.out1448 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:105$530' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:107$532' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:107$532_Y [31:1] \bot.bs.out1452 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528_Y [31:1] \bot.bs.out1448 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:107$532' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:108$533' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:108$533_Y [31:1] \bot.bs.out1453 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528_Y [31:1] \bot.bs.out1448 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:108$533' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:109$534' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:109$534_Y [31:1] \bot.bs.out1454 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528_Y [31:1] \bot.bs.out1448 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:109$534' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:110$535' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:110$535_Y [31:1] \bot.Hold3_SDatI } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528_Y [31:1] \bot.bs.out1448 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:110$535' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:114$539' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:114$539_Y [31:1] \bot.plus4 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538_Y [31:1] \bot.bs.out1458 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:114$539' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:115$540' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:115$540_Y [31:1] \bot.SDatO_MDatI47_32 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538_Y [31:1] \bot.bs.out1458 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:115$540' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:117$542' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:117$542_Y [31:1] \bot.bs.out1462 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538_Y [31:1] \bot.bs.out1458 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:117$542' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:118$543' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:118$543_Y [31:1] \bot.bs.out1463 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538_Y [31:1] \bot.bs.out1458 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:118$543' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:119$544' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:119$544_Y [31:1] \bot.bs.out1464 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538_Y [31:1] \bot.bs.out1458 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:119$544' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:120$545' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:120$545_Y [31:1] \bot.Hold2_SDatI } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538_Y [31:1] \bot.bs.out1458 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:120$545' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:122$547' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:122$547_Y [31:1] \bot.bs.out1467 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538_Y [31:1] \bot.bs.out1458 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:122$547' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:124$549' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:123$548'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:124$549_Y [31:1] \bot.bs.out1469 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:123$548_Y [31:1] \bot.bs.out1468 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:124$549' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:126$551' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:126$551_Y [31:1] \bot.bs.out1471 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550_Y [31:1] \bot.bs.out1470 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:126$551' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:127$552' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:127$552_Y [31:1] \bot.bs.out1472 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550_Y [31:1] \bot.bs.out1470 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:127$552' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:129$554' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:129$554_Y [31:1] \bot.bs.out1474 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550_Y [31:1] \bot.bs.out1470 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:129$554' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:130$555' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:130$555_Y [31:1] \bot.bs.out1475 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550_Y [31:1] \bot.bs.out1470 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:130$555' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:131$556' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:131$556_Y [31:1] \bot.bs.out1476 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550_Y [31:1] \bot.bs.out1470 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:131$556' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:132$557' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:132$557_Y [31:1] \bot.bs.out1477 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550_Y [31:1] \bot.bs.out1470 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:132$557' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:134$559' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:134$559_Y [31:1] \bot.bs.out1479 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550_Y [31:1] \bot.bs.out1470 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:134$559' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:135$560' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:135$560_Y [31:1] \bot.bs.out1480 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550_Y [31:1] \bot.bs.out1470 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:135$560' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:137$562' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:136$561'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:137$562_Y [31:1] \bot.bs.out1482 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:136$561_Y [31:1] \bot.bs.out1481 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:137$562' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:138$563' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:136$561'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:138$563_Y [31:1] \bot.bs.out1483 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:136$561_Y [31:1] \bot.bs.out1481 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:138$563' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:140$565' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:140$565_Y [31:1] \bot.bs.out1485 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564_Y [31:1] \bot.bs.out1484 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:140$565' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:142$567' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:142$567_Y [31:1] \bot.bs.out1487 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564_Y [31:1] \bot.bs.out1484 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:142$567' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:143$568' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:143$568_Y [31:1] \bot.bs.out1488 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564_Y [31:1] \bot.bs.out1484 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:143$568' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:144$569' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:144$569_Y [31:1] \bot.bs.out1489 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564_Y [31:1] \bot.bs.out1484 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:144$569' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:145$570' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:145$570_Y [31:1] \bot.bs.out1490 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564_Y [31:1] \bot.bs.out1484 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:145$570' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:148$573' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:147$572'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:148$573_Y [31:1] \bot.bs.out1493 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:147$572_Y [31:1] \bot.bs.out1492 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:148$573' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:149$574' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:147$572'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:149$574_Y [31:1] \bot.bs.out1494 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:147$572_Y [31:1] \bot.bs.out1492 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:149$574' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:65$490' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:65$490_Y [31:1] \bot.bs.out1410 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489_Y [31:1] \bot.bs.out1409 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:65$490' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:67$492' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:67$492_Y [31:1] \bot.bs.out1412 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489_Y [31:1] \bot.bs.out1409 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:67$492' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:68$493' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:68$493_Y [31:1] \bot.bs.out1413 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489_Y [31:1] \bot.bs.out1409 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:68$493' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:69$494' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:69$494_Y [31:1] \bot.bs.out1414 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489_Y [31:1] \bot.bs.out1409 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:69$494' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:70$495' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:70$495_Y [31:1] \bot.bs.out1415 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489_Y [31:1] \bot.bs.out1409 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:70$495' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:71$496' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:71$496_Y [31:1] \bot.bs.out1416 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489_Y [31:1] \bot.bs.out1409 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:71$496' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:74$499' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:74$499_Y [31:1] \bot.bs.out1419 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498_Y [31:1] \bot.bs.out1418 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:74$499' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:76$501' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:76$501_Y [31:1] \bot.bs.out1421 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498_Y [31:1] \bot.bs.out1418 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:76$501' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:77$502' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:77$502_Y [31:1] \bot.bs.out1422 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498_Y [31:1] \bot.bs.out1418 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:77$502' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:78$503' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:78$503_Y [31:1] \bot.bs.out1423 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498_Y [31:1] \bot.bs.out1418 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:78$503' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:79$504' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:79$504_Y [31:1] \bot.bs.out1424 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498_Y [31:1] \bot.bs.out1418 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:79$504' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:80$505' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:80$505_Y [31:1] \bot.bs.out1425 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498_Y [31:1] \bot.bs.out1418 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:80$505' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:83$508' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:83$508_Y [31:1] \bot.bs.out1428 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507_Y [31:1] \bot.bs.out1427 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:83$508' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:84$509' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:84$509_Y [31:1] \bot.bs.out1429 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507_Y [31:1] \bot.bs.out1427 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:84$509' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:86$511' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:86$511_Y [31:1] \bot.bs.out1431 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507_Y [31:1] \bot.bs.out1427 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:86$511' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:87$512' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:87$512_Y [31:1] \bot.bs.out1432 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507_Y [31:1] \bot.bs.out1427 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:87$512' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:88$513' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:88$513_Y [31:1] \bot.bs.out1433 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507_Y [31:1] \bot.bs.out1427 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:88$513' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:89$514' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:89$514_Y [31:1] \bot.bs.out1434 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507_Y [31:1] \bot.bs.out1427 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:89$514' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:94$519' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:94$519_Y [31:1] \bot.bs.out1439 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518_Y [31:1] \bot.bs.out1438 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:94$519' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:96$521' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:96$521_Y [31:1] \bot.bs.out1441 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518_Y [31:1] \bot.bs.out1438 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:96$521' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:97$522' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:97$522_Y [31:1] \bot.bs.out1442 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518_Y [31:1] \bot.bs.out1438 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:97$522' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:98$523' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:98$523_Y [31:1] \bot.bs.out1443 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518_Y [31:1] \bot.bs.out1438 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:98$523' from module `\TOP'.
  Cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:99$524' is identical to cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518'.
    Redirecting output \Y: { $techmap\bot.bs.$ternary$bottleneckSequencer.v:99$524_Y [31:1] \bot.bs.out1444 } = { $techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518_Y [31:1] \bot.bs.out1438 }
    Removing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:99$524' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:235$1802' is identical to cell `$techmap\cpu.s.$ternary$seq.v:234$1801'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:235$1802_Y [31:1] \cpu.pc_mbvec } = { $techmap\cpu.s.$ternary$seq.v:234$1801_Y [31:1] \cpu.s.out1506 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:235$1802' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:236$1803' is identical to cell `$techmap\cpu.s.$ternary$seq.v:234$1801'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:236$1803_Y [31:1] \cpu.s.out1508 } = { $techmap\cpu.s.$ternary$seq.v:234$1801_Y [31:1] \cpu.s.out1506 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:236$1803' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:237$1804' is identical to cell `$techmap\cpu.s.$ternary$seq.v:234$1801'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:237$1804_Y [31:1] \cpu.s.out1509 } = { $techmap\cpu.s.$ternary$seq.v:234$1801_Y [31:1] \cpu.s.out1506 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:237$1804' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:239$1806' is identical to cell `$techmap\cpu.s.$ternary$seq.v:238$1805'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:239$1806_Y [31:1] \arb.icyc_i } = { $techmap\cpu.s.$ternary$seq.v:238$1805_Y [31:1] \cpu.iadr_pc }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:239$1806' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:242$1809' is identical to cell `$techmap\cpu.s.$ternary$seq.v:241$1808'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:242$1809_Y [31:1] \cpu.ia_pc } = { $techmap\cpu.s.$ternary$seq.v:241$1808_Y [31:1] \cpu.pc_pcPlus4 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:242$1809' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:243$1810' is identical to cell `$techmap\cpu.s.$ternary$seq.v:241$1808'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:243$1810_Y [31:1] \cpu.ir_idat } = { $techmap\cpu.s.$ternary$seq.v:241$1808_Y [31:1] \cpu.pc_pcPlus4 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:243$1810' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:244$1811' is identical to cell `$techmap\cpu.s.$ternary$seq.v:241$1808'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:244$1811_Y [31:1] \cpu.xt0_o } = { $techmap\cpu.s.$ternary$seq.v:241$1808_Y [31:1] \cpu.pc_pcPlus4 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:244$1811' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:246$1813' is identical to cell `$techmap\cpu.s.$ternary$seq.v:245$1812'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:246$1813_Y [31:1] \cpu.pc_mtvec } = { $techmap\cpu.s.$ternary$seq.v:245$1812_Y [31:1] \cpu.csrs.mepc_ia }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:246$1813' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:247$1814' is identical to cell `$techmap\cpu.s.$ternary$seq.v:245$1812'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:247$1814_Y [31:1] \cpu.csrs.mpie_mie } = { $techmap\cpu.s.$ternary$seq.v:245$1812_Y [31:1] \cpu.csrs.mepc_ia }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:247$1814' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:248$1815' is identical to cell `$techmap\cpu.s.$ternary$seq.v:245$1812'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:248$1815_Y [31:1] \cpu.s.out1520 } = { $techmap\cpu.s.$ternary$seq.v:245$1812_Y [31:1] \cpu.csrs.mepc_ia }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:248$1815' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:249$1816' is identical to cell `$techmap\cpu.s.$ternary$seq.v:245$1812'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:249$1816_Y [31:1] \cpu.s.out1521 } = { $techmap\cpu.s.$ternary$seq.v:245$1812_Y [31:1] \cpu.csrs.mepc_ia }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:249$1816' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:258$1825' is identical to cell `$techmap\cpu.s.$ternary$seq.v:257$1824'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:258$1825_Y [31:1] \cpu.csrs.mcause_2 } = { $techmap\cpu.s.$ternary$seq.v:257$1824_Y [31:1] \cpu.s.out1529 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:258$1825' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:270$1837' is identical to cell `$techmap\cpu.s.$ternary$seq.v:269$1836'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:270$1837_Y [31:1] \cpu.s.out1542 } = { $techmap\cpu.s.$ternary$seq.v:269$1836_Y [31:1] \cpu.s.out1541 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:270$1837' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:272$1839' is identical to cell `$techmap\cpu.s.$ternary$seq.v:271$1838'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:272$1839_Y [31:1] \cpu.s.out1544 } = { $techmap\cpu.s.$ternary$seq.v:271$1838_Y [31:1] \cpu.s.out1543 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:272$1839' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:273$1840' is identical to cell `$techmap\cpu.s.$ternary$seq.v:271$1838'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:273$1840_Y [31:1] \cpu.s.out1545 } = { $techmap\cpu.s.$ternary$seq.v:271$1838_Y [31:1] \cpu.s.out1543 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:273$1840' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:275$1842' is identical to cell `$techmap\cpu.s.$ternary$seq.v:274$1841'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:275$1842_Y [31:1] \cpu.s.out1547 } = { $techmap\cpu.s.$ternary$seq.v:274$1841_Y [31:1] \cpu.s.out1546 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:275$1842' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:276$1843' is identical to cell `$techmap\cpu.s.$ternary$seq.v:274$1841'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:276$1843_Y [31:1] \cpu.s.out1548 } = { $techmap\cpu.s.$ternary$seq.v:274$1841_Y [31:1] \cpu.s.out1546 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:276$1843' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:277$1844' is identical to cell `$techmap\cpu.s.$ternary$seq.v:274$1841'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:277$1844_Y [31:1] \cpu.s.out1549 } = { $techmap\cpu.s.$ternary$seq.v:274$1841_Y [31:1] \cpu.s.out1546 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:277$1844' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:278$1845' is identical to cell `$techmap\cpu.s.$ternary$seq.v:274$1841'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:278$1845_Y [31:1] \cpu.s.out1550 } = { $techmap\cpu.s.$ternary$seq.v:274$1841_Y [31:1] \cpu.s.out1546 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:278$1845' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:282$1849' is identical to cell `$techmap\cpu.s.$ternary$seq.v:281$1848'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:282$1849_Y [31:1] \cpu.s.out1554 } = { $techmap\cpu.s.$ternary$seq.v:281$1848_Y [31:1] \cpu.s.out1553 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:282$1849' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:283$1850' is identical to cell `$techmap\cpu.s.$ternary$seq.v:281$1848'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:283$1850_Y [31:1] \cpu.s.out1555 } = { $techmap\cpu.s.$ternary$seq.v:281$1848_Y [31:1] \cpu.s.out1553 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:283$1850' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:285$1852' is identical to cell `$techmap\cpu.s.$ternary$seq.v:284$1851'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:285$1852_Y [31:1] \cpu.s.out1557 } = { $techmap\cpu.s.$ternary$seq.v:284$1851_Y [31:1] \cpu.s.out1556 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:285$1852' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:286$1853' is identical to cell `$techmap\cpu.s.$ternary$seq.v:284$1851'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:286$1853_Y [31:1] \cpu.s.out1558 } = { $techmap\cpu.s.$ternary$seq.v:284$1851_Y [31:1] \cpu.s.out1556 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:286$1853' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:290$1857' is identical to cell `$techmap\cpu.s.$ternary$seq.v:289$1856'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:290$1857_Y [31:1] \cpu.s.out1562 } = { $techmap\cpu.s.$ternary$seq.v:289$1856_Y [31:1] \cpu.s.out1561 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:290$1857' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:292$1859' is identical to cell `$techmap\cpu.s.$ternary$seq.v:291$1858'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:292$1859_Y [31:1] \cpu.s.out1564 } = { $techmap\cpu.s.$ternary$seq.v:291$1858_Y [31:1] \cpu.s.out1563 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:292$1859' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:296$1863' is identical to cell `$techmap\cpu.s.$ternary$seq.v:295$1862'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:296$1863_Y [31:1] \cpu.s.out1568 } = { $techmap\cpu.s.$ternary$seq.v:295$1862_Y [31:1] \cpu.s.out1567 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:296$1863' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:298$1865' is identical to cell `$techmap\cpu.s.$ternary$seq.v:297$1864'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:298$1865_Y [31:1] \cpu.s.out1570 } = { $techmap\cpu.s.$ternary$seq.v:297$1864_Y [31:1] \cpu.s.out1569 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:298$1865' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:299$1866' is identical to cell `$techmap\cpu.s.$ternary$seq.v:297$1864'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:299$1866_Y [31:1] \cpu.s.out1571 } = { $techmap\cpu.s.$ternary$seq.v:297$1864_Y [31:1] \cpu.s.out1569 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:299$1866' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:301$1868' is identical to cell `$techmap\cpu.s.$ternary$seq.v:300$1867'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:301$1868_Y [31:1] \cpu.s.out1573 } = { $techmap\cpu.s.$ternary$seq.v:300$1867_Y [31:1] \cpu.s.out1572 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:301$1868' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:303$1870' is identical to cell `$techmap\cpu.s.$ternary$seq.v:302$1869'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:303$1870_Y [31:1] \cpu.s.out1575 } = { $techmap\cpu.s.$ternary$seq.v:302$1869_Y [31:1] \cpu.s.out1574 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:303$1870' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:304$1871' is identical to cell `$techmap\cpu.s.$ternary$seq.v:302$1869'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:304$1871_Y [31:1] \cpu.s.out1576 } = { $techmap\cpu.s.$ternary$seq.v:302$1869_Y [31:1] \cpu.s.out1574 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:304$1871' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:305$1872' is identical to cell `$techmap\cpu.s.$ternary$seq.v:302$1869'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:305$1872_Y [31:1] \cpu.s.out1577 } = { $techmap\cpu.s.$ternary$seq.v:302$1869_Y [31:1] \cpu.s.out1574 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:305$1872' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:306$1873' is identical to cell `$techmap\cpu.s.$ternary$seq.v:302$1869'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:306$1873_Y [31:1] \cpu.s.out1578 } = { $techmap\cpu.s.$ternary$seq.v:302$1869_Y [31:1] \cpu.s.out1574 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:306$1873' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:309$1876' is identical to cell `$techmap\cpu.s.$ternary$seq.v:308$1875'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:309$1876_Y [31:1] \cpu.s.out1581 } = { $techmap\cpu.s.$ternary$seq.v:308$1875_Y [31:1] \cpu.s.out1580 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:309$1876' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:310$1877' is identical to cell `$techmap\cpu.s.$ternary$seq.v:308$1875'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:310$1877_Y [31:1] \cpu.s.out1582 } = { $techmap\cpu.s.$ternary$seq.v:308$1875_Y [31:1] \cpu.s.out1580 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:310$1877' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:313$1880' is identical to cell `$techmap\cpu.s.$ternary$seq.v:312$1879'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:313$1880_Y [31:1] \cpu.s.out1585 } = { $techmap\cpu.s.$ternary$seq.v:312$1879_Y [31:1] \cpu.s.out1584 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:313$1880' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:314$1881' is identical to cell `$techmap\cpu.s.$ternary$seq.v:312$1879'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:314$1881_Y [31:1] \cpu.s.out1586 } = { $techmap\cpu.s.$ternary$seq.v:312$1879_Y [31:1] \cpu.s.out1584 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:314$1881' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:316$1883' is identical to cell `$techmap\cpu.s.$ternary$seq.v:315$1882'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:316$1883_Y [31:1] \cpu.s.out1588 } = { $techmap\cpu.s.$ternary$seq.v:315$1882_Y [31:1] \cpu.s.out1587 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:316$1883' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:317$1884' is identical to cell `$techmap\cpu.s.$ternary$seq.v:315$1882'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:317$1884_Y [31:1] \cpu.s.out1589 } = { $techmap\cpu.s.$ternary$seq.v:315$1882_Y [31:1] \cpu.s.out1587 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:317$1884' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:321$1888' is identical to cell `$techmap\cpu.s.$ternary$seq.v:320$1887'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:321$1888_Y [31:1] \cpu.s.out1593 } = { $techmap\cpu.s.$ternary$seq.v:320$1887_Y [31:1] \cpu.s.out1592 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:321$1888' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:323$1890' is identical to cell `$techmap\cpu.s.$ternary$seq.v:322$1889'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:323$1890_Y [31:1] \cpu.s.out1595 } = { $techmap\cpu.s.$ternary$seq.v:322$1889_Y [31:1] \cpu.s.out1594 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:323$1890' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:329$1896' is identical to cell `$techmap\cpu.s.$ternary$seq.v:328$1895'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:329$1896_Y [31:1] \cpu.s.out1601 } = { $techmap\cpu.s.$ternary$seq.v:328$1895_Y [31:1] \cpu.s.out1600 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:329$1896' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:330$1897' is identical to cell `$techmap\cpu.s.$ternary$seq.v:328$1895'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:330$1897_Y [31:1] \cpu.s.out1602 } = { $techmap\cpu.s.$ternary$seq.v:328$1895_Y [31:1] \cpu.s.out1600 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:330$1897' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:331$1898' is identical to cell `$techmap\cpu.s.$ternary$seq.v:328$1895'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:331$1898_Y [31:1] \cpu.s.out1603 } = { $techmap\cpu.s.$ternary$seq.v:328$1895_Y [31:1] \cpu.s.out1600 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:331$1898' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:333$1900' is identical to cell `$techmap\cpu.s.$ternary$seq.v:332$1899'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:333$1900_Y [31:1] \cpu.s.out1605 } = { $techmap\cpu.s.$ternary$seq.v:332$1899_Y [31:1] \cpu.s.out1604 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:333$1900' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:335$1902' is identical to cell `$techmap\cpu.s.$ternary$seq.v:334$1901'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:335$1902_Y [31:1] \cpu.s.out1607 } = { $techmap\cpu.s.$ternary$seq.v:334$1901_Y [31:1] \cpu.s.out1606 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:335$1902' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:336$1903' is identical to cell `$techmap\cpu.s.$ternary$seq.v:334$1901'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:336$1903_Y [31:1] \cpu.s.out1608 } = { $techmap\cpu.s.$ternary$seq.v:334$1901_Y [31:1] \cpu.s.out1606 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:336$1903' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:338$1905' is identical to cell `$techmap\cpu.s.$ternary$seq.v:337$1904'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:338$1905_Y [31:1] \cpu.s.out1610 } = { $techmap\cpu.s.$ternary$seq.v:337$1904_Y [31:1] \cpu.s.out1609 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:338$1905' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:339$1906' is identical to cell `$techmap\cpu.s.$ternary$seq.v:337$1904'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:339$1906_Y [31:1] \cpu.s.out1611 } = { $techmap\cpu.s.$ternary$seq.v:337$1904_Y [31:1] \cpu.s.out1609 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:339$1906' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:341$1908' is identical to cell `$techmap\cpu.s.$ternary$seq.v:340$1907'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:341$1908_Y [31:1] \cpu.s.out1613 } = { $techmap\cpu.s.$ternary$seq.v:340$1907_Y [31:1] \cpu.s.out1612 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:341$1908' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:342$1909' is identical to cell `$techmap\cpu.s.$ternary$seq.v:340$1907'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:342$1909_Y [31:1] \cpu.s.out1614 } = { $techmap\cpu.s.$ternary$seq.v:340$1907_Y [31:1] \cpu.s.out1612 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:342$1909' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:343$1910' is identical to cell `$techmap\cpu.s.$ternary$seq.v:340$1907'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:343$1910_Y [31:1] \cpu.s.out1615 } = { $techmap\cpu.s.$ternary$seq.v:340$1907_Y [31:1] \cpu.s.out1612 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:343$1910' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:345$1912' is identical to cell `$techmap\cpu.s.$ternary$seq.v:344$1911'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:345$1912_Y [31:1] \cpu.s.out1617 } = { $techmap\cpu.s.$ternary$seq.v:344$1911_Y [31:1] \cpu.s.out1616 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:345$1912' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:346$1913' is identical to cell `$techmap\cpu.s.$ternary$seq.v:344$1911'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:346$1913_Y [31:1] \cpu.alub_imm20uj } = { $techmap\cpu.s.$ternary$seq.v:344$1911_Y [31:1] \cpu.s.out1616 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:346$1913' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:348$1915' is identical to cell `$techmap\cpu.s.$ternary$seq.v:347$1914'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:348$1915_Y [31:1] \cpu.s.out1620 } = { $techmap\cpu.s.$ternary$seq.v:347$1914_Y [31:1] \cpu.s.out1619 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:348$1915' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:349$1916' is identical to cell `$techmap\cpu.s.$ternary$seq.v:347$1914'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:349$1916_Y [31:1] \cpu.s.out1621 } = { $techmap\cpu.s.$ternary$seq.v:347$1914_Y [31:1] \cpu.s.out1619 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:349$1916' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:352$1919' is identical to cell `$techmap\cpu.s.$ternary$seq.v:351$1918'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:352$1919_Y [31:1] \cpu.alub_imm20u } = { $techmap\cpu.s.$ternary$seq.v:351$1918_Y [31:1] \cpu.s.out1623 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:352$1919' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:356$1923' is identical to cell `$techmap\cpu.s.$ternary$seq.v:355$1922'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:356$1923_Y [31:1] \cpu.s.out1628 } = { $techmap\cpu.s.$ternary$seq.v:355$1922_Y [31:1] \cpu.s.out1627 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:356$1923' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:357$1924' is identical to cell `$techmap\cpu.s.$ternary$seq.v:355$1922'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:357$1924_Y [31:1] \cpu.s.out1629 } = { $techmap\cpu.s.$ternary$seq.v:355$1922_Y [31:1] \cpu.s.out1627 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:357$1924' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:358$1925' is identical to cell `$techmap\cpu.s.$ternary$seq.v:355$1922'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:358$1925_Y [31:1] \cpu.s.out1630 } = { $techmap\cpu.s.$ternary$seq.v:355$1922_Y [31:1] \cpu.s.out1627 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:358$1925' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:359$1926' is identical to cell `$techmap\cpu.s.$ternary$seq.v:355$1922'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:359$1926_Y [31:1] \cpu.s.out1631 } = { $techmap\cpu.s.$ternary$seq.v:355$1922_Y [31:1] \cpu.s.out1627 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:359$1926' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:363$1930' is identical to cell `$techmap\cpu.s.$ternary$seq.v:362$1929'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:363$1930_Y [31:1] \cpu.s.out1635 } = { $techmap\cpu.s.$ternary$seq.v:362$1929_Y [31:1] \cpu.s.out1634 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:363$1930' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:365$1932' is identical to cell `$techmap\cpu.s.$ternary$seq.v:364$1931'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:365$1932_Y [31:1] \cpu.s.out1637 } = { $techmap\cpu.s.$ternary$seq.v:364$1931_Y [31:1] \cpu.s.out1636 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:365$1932' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:366$1933' is identical to cell `$techmap\cpu.s.$ternary$seq.v:364$1931'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:366$1933_Y [31:1] \cpu.s.out1638 } = { $techmap\cpu.s.$ternary$seq.v:364$1931_Y [31:1] \cpu.s.out1636 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:366$1933' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:368$1935' is identical to cell `$techmap\cpu.s.$ternary$seq.v:367$1934'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:368$1935_Y [31:1] \cpu.s.out1640 } = { $techmap\cpu.s.$ternary$seq.v:367$1934_Y [31:1] \cpu.s.out1639 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:368$1935' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:369$1936' is identical to cell `$techmap\cpu.s.$ternary$seq.v:367$1934'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:369$1936_Y [31:1] \cpu.s.out1641 } = { $techmap\cpu.s.$ternary$seq.v:367$1934_Y [31:1] \cpu.s.out1639 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:369$1936' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:370$1937' is identical to cell `$techmap\cpu.s.$ternary$seq.v:367$1934'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:370$1937_Y [31:1] \cpu.s.out1642 } = { $techmap\cpu.s.$ternary$seq.v:367$1934_Y [31:1] \cpu.s.out1639 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:370$1937' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:371$1938' is identical to cell `$techmap\cpu.s.$ternary$seq.v:367$1934'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:371$1938_Y [31:1] \cpu.s.out1643 } = { $techmap\cpu.s.$ternary$seq.v:367$1934_Y [31:1] \cpu.s.out1639 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:371$1938' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:372$1939' is identical to cell `$techmap\cpu.s.$ternary$seq.v:367$1934'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:372$1939_Y [31:1] \cpu.s.out1644 } = { $techmap\cpu.s.$ternary$seq.v:367$1934_Y [31:1] \cpu.s.out1639 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:372$1939' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:374$1941' is identical to cell `$techmap\cpu.s.$ternary$seq.v:373$1940'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:374$1941_Y [31:1] \cpu.s.out1646 } = { $techmap\cpu.s.$ternary$seq.v:373$1940_Y [31:1] \cpu.s.out1645 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:374$1941' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:375$1942' is identical to cell `$techmap\cpu.s.$ternary$seq.v:373$1940'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:375$1942_Y [31:1] \cpu.s.out1647 } = { $techmap\cpu.s.$ternary$seq.v:373$1940_Y [31:1] \cpu.s.out1645 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:375$1942' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:376$1943' is identical to cell `$techmap\cpu.s.$ternary$seq.v:373$1940'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:376$1943_Y [31:1] \cpu.s.out1648 } = { $techmap\cpu.s.$ternary$seq.v:373$1940_Y [31:1] \cpu.s.out1645 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:376$1943' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:377$1944' is identical to cell `$techmap\cpu.s.$ternary$seq.v:373$1940'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:377$1944_Y [31:1] \cpu.s.out1649 } = { $techmap\cpu.s.$ternary$seq.v:373$1940_Y [31:1] \cpu.s.out1645 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:377$1944' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:378$1945' is identical to cell `$techmap\cpu.s.$ternary$seq.v:373$1940'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:378$1945_Y [31:1] \cpu.s.out1650 } = { $techmap\cpu.s.$ternary$seq.v:373$1940_Y [31:1] \cpu.s.out1645 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:378$1945' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:379$1946' is identical to cell `$techmap\cpu.s.$ternary$seq.v:373$1940'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:379$1946_Y [31:1] \cpu.s.out1651 } = { $techmap\cpu.s.$ternary$seq.v:373$1940_Y [31:1] \cpu.s.out1645 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:379$1946' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:380$1947' is identical to cell `$techmap\cpu.s.$ternary$seq.v:373$1940'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:380$1947_Y [31:1] \cpu.rdat_ddat } = { $techmap\cpu.s.$ternary$seq.v:373$1940_Y [31:1] \cpu.s.out1645 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:380$1947' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:381$1948' is identical to cell `$techmap\cpu.s.$ternary$seq.v:373$1940'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:381$1948_Y [31:1] \cpu.s.out1653 } = { $techmap\cpu.s.$ternary$seq.v:373$1940_Y [31:1] \cpu.s.out1645 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:381$1948' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:383$1950' is identical to cell `$techmap\cpu.s.$ternary$seq.v:382$1949'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:383$1950_Y [31:1] \cpu.s.out1655 } = { $techmap\cpu.s.$ternary$seq.v:382$1949_Y [31:1] \cpu.s.out1654 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:383$1950' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:385$1952' is identical to cell `$techmap\cpu.s.$ternary$seq.v:384$1951'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:385$1952_Y [31:1] \cpu.s.out1657 } = { $techmap\cpu.s.$ternary$seq.v:384$1951_Y [31:1] \cpu.s.out1656 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:385$1952' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:386$1953' is identical to cell `$techmap\cpu.s.$ternary$seq.v:384$1951'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:386$1953_Y [31:1] \cpu.alub_imm12s } = { $techmap\cpu.s.$ternary$seq.v:384$1951_Y [31:1] \cpu.s.out1656 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:386$1953' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:387$1954' is identical to cell `$techmap\cpu.s.$ternary$seq.v:384$1951'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:387$1954_Y [31:1] \cpu.s.out1659 } = { $techmap\cpu.s.$ternary$seq.v:384$1951_Y [31:1] \cpu.s.out1656 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:387$1954' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:389$1956' is identical to cell `$techmap\cpu.s.$ternary$seq.v:388$1955'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:389$1956_Y [31:1] \cpu.s.out1661 } = { $techmap\cpu.s.$ternary$seq.v:388$1955_Y [31:1] \cpu.s.out1660 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:389$1956' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:390$1957' is identical to cell `$techmap\cpu.s.$ternary$seq.v:388$1955'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:390$1957_Y [31:1] \cpu.s.out1662 } = { $techmap\cpu.s.$ternary$seq.v:388$1955_Y [31:1] \cpu.s.out1660 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:390$1957' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:391$1958' is identical to cell `$techmap\cpu.s.$ternary$seq.v:388$1955'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:391$1958_Y [31:1] \cpu.s.out1663 } = { $techmap\cpu.s.$ternary$seq.v:388$1955_Y [31:1] \cpu.s.out1660 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:391$1958' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:392$1959' is identical to cell `$techmap\cpu.s.$ternary$seq.v:388$1955'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:392$1959_Y [31:1] \cpu.s.out1664 } = { $techmap\cpu.s.$ternary$seq.v:388$1955_Y [31:1] \cpu.s.out1660 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:392$1959' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:393$1960' is identical to cell `$techmap\cpu.s.$ternary$seq.v:388$1955'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:393$1960_Y [31:1] \cpu.s.out1665 } = { $techmap\cpu.s.$ternary$seq.v:388$1955_Y [31:1] \cpu.s.out1660 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:393$1960' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:394$1961' is identical to cell `$techmap\cpu.s.$ternary$seq.v:388$1955'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:394$1961_Y [31:1] \cpu.s.out1666 } = { $techmap\cpu.s.$ternary$seq.v:388$1955_Y [31:1] \cpu.s.out1660 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:394$1961' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:395$1962' is identical to cell `$techmap\cpu.s.$ternary$seq.v:388$1955'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:395$1962_Y [31:1] \cpu.s.out1667 } = { $techmap\cpu.s.$ternary$seq.v:388$1955_Y [31:1] \cpu.s.out1660 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:395$1962' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:396$1963' is identical to cell `$techmap\cpu.s.$ternary$seq.v:388$1955'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:396$1963_Y [31:1] \cpu.s.out1668 } = { $techmap\cpu.s.$ternary$seq.v:388$1955_Y [31:1] \cpu.s.out1660 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:396$1963' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:398$1965' is identical to cell `$techmap\cpu.s.$ternary$seq.v:397$1964'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:398$1965_Y [31:1] \cpu.s.out1670 } = { $techmap\cpu.s.$ternary$seq.v:397$1964_Y [31:1] \cpu.s.out1669 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:398$1965' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:399$1966' is identical to cell `$techmap\cpu.s.$ternary$seq.v:397$1964'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:399$1966_Y [31:1] \cpu.s.out1671 } = { $techmap\cpu.s.$ternary$seq.v:397$1964_Y [31:1] \cpu.s.out1669 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:399$1966' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:400$1967' is identical to cell `$techmap\cpu.s.$ternary$seq.v:397$1964'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:400$1967_Y [31:1] \cpu.s.out1672 } = { $techmap\cpu.s.$ternary$seq.v:397$1964_Y [31:1] \cpu.s.out1669 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:400$1967' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:401$1968' is identical to cell `$techmap\cpu.s.$ternary$seq.v:397$1964'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:401$1968_Y [31:1] \cpu.s.out1673 } = { $techmap\cpu.s.$ternary$seq.v:397$1964_Y [31:1] \cpu.s.out1669 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:401$1968' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:402$1969' is identical to cell `$techmap\cpu.s.$ternary$seq.v:397$1964'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:402$1969_Y [31:1] \cpu.s.out1674 } = { $techmap\cpu.s.$ternary$seq.v:397$1964_Y [31:1] \cpu.s.out1669 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:402$1969' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:403$1970' is identical to cell `$techmap\cpu.s.$ternary$seq.v:397$1964'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:403$1970_Y [31:1] \cpu.s.out1675 } = { $techmap\cpu.s.$ternary$seq.v:397$1964_Y [31:1] \cpu.s.out1669 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:403$1970' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:404$1971' is identical to cell `$techmap\cpu.s.$ternary$seq.v:397$1964'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:404$1971_Y [31:1] \cpu.s.out1676 } = { $techmap\cpu.s.$ternary$seq.v:397$1964_Y [31:1] \cpu.s.out1669 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:404$1971' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:407$1974' is identical to cell `$techmap\cpu.s.$ternary$seq.v:406$1973'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:407$1974_Y [31:1] \cpu.s.out1679 } = { $techmap\cpu.s.$ternary$seq.v:406$1973_Y [31:1] \cpu.s.out1678 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:407$1974' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:409$1976' is identical to cell `$techmap\cpu.s.$ternary$seq.v:408$1975'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:409$1976_Y [31:1] \cpu.s.out1681 } = { $techmap\cpu.s.$ternary$seq.v:408$1975_Y [31:1] \cpu.s.out1680 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:409$1976' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:410$1977' is identical to cell `$techmap\cpu.s.$ternary$seq.v:408$1975'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:410$1977_Y [31:1] \cpu.s.out1682 } = { $techmap\cpu.s.$ternary$seq.v:408$1975_Y [31:1] \cpu.s.out1680 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:410$1977' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:412$1979' is identical to cell `$techmap\cpu.s.$ternary$seq.v:411$1978'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:412$1979_Y [31:1] \cpu.s.out1684 } = { $techmap\cpu.s.$ternary$seq.v:411$1978_Y [31:1] \cpu.s.out1683 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:412$1979' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:414$1981' is identical to cell `$techmap\cpu.s.$ternary$seq.v:413$1980'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:414$1981_Y [31:1] \cpu.s.out1686 } = { $techmap\cpu.s.$ternary$seq.v:413$1980_Y [31:1] \cpu.xt4_o }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:414$1981' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:415$1982' is identical to cell `$techmap\cpu.s.$ternary$seq.v:413$1980'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:415$1982_Y [31:1] \cpu.s.out1687 } = { $techmap\cpu.s.$ternary$seq.v:413$1980_Y [31:1] \cpu.xt4_o }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:415$1982' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:416$1983' is identical to cell `$techmap\cpu.s.$ternary$seq.v:413$1980'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:416$1983_Y [31:1] \cpu.s.out1688 } = { $techmap\cpu.s.$ternary$seq.v:413$1980_Y [31:1] \cpu.xt4_o }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:416$1983' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:417$1984' is identical to cell `$techmap\cpu.s.$ternary$seq.v:413$1980'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:417$1984_Y [31:1] \cpu.ccr_alu } = { $techmap\cpu.s.$ternary$seq.v:413$1980_Y [31:1] \cpu.xt4_o }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:417$1984' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:418$1985' is identical to cell `$techmap\cpu.s.$ternary$seq.v:413$1980'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:418$1985_Y [31:1] \cpu.s.out1690 } = { $techmap\cpu.s.$ternary$seq.v:413$1980_Y [31:1] \cpu.xt4_o }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:418$1985' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:419$1986' is identical to cell `$techmap\cpu.s.$ternary$seq.v:413$1980'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:419$1986_Y [31:1] \cpu.alub_imm12sb } = { $techmap\cpu.s.$ternary$seq.v:413$1980_Y [31:1] \cpu.xt4_o }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:419$1986' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:421$1988' is identical to cell `$techmap\cpu.s.$ternary$seq.v:420$1987'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:421$1988_Y [31:1] \cpu.s.out1693 } = { $techmap\cpu.s.$ternary$seq.v:420$1987_Y [31:1] \cpu.s.out1692 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:421$1988' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:441$2008' is identical to cell `$techmap\cpu.s.$ternary$seq.v:440$2007'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:441$2008_Y [31:1] \cpu.csrs.mcause_11 } = { $techmap\cpu.s.$ternary$seq.v:440$2007_Y [31:1] \cpu.s.out1712 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:441$2008' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:443$2010' is identical to cell `$techmap\cpu.s.$ternary$seq.v:442$2009'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:443$2010_Y [31:1] \cpu.csrs.mcause_3 } = { $techmap\cpu.s.$ternary$seq.v:442$2009_Y [31:1] \cpu.s.out1714 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:443$2010' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:446$2013' is identical to cell `$techmap\cpu.s.$ternary$seq.v:445$2012'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:446$2013_Y [31:1] \cpu.pc_mepc } = { $techmap\cpu.s.$ternary$seq.v:445$2012_Y [31:1] \cpu.s.out1717 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:446$2013' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:447$2014' is identical to cell `$techmap\cpu.s.$ternary$seq.v:445$2012'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:447$2014_Y [31:1] \cpu.csrs.mie_mpie } = { $techmap\cpu.s.$ternary$seq.v:445$2012_Y [31:1] \cpu.s.out1717 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:447$2014' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:448$2015' is identical to cell `$techmap\cpu.s.$ternary$seq.v:445$2012'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:448$2015_Y [31:1] \cpu.s.out1720 } = { $techmap\cpu.s.$ternary$seq.v:445$2012_Y [31:1] \cpu.s.out1717 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:448$2015' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:456$2023' is identical to cell `$techmap\cpu.s.$ternary$seq.v:455$2022'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:456$2023_Y [31:1] \cpu.s.out1728 } = { $techmap\cpu.s.$ternary$seq.v:455$2022_Y [31:1] \cpu.s.out1727 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:456$2023' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:458$2025' is identical to cell `$techmap\cpu.s.$ternary$seq.v:457$2024'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:458$2025_Y [31:1] \cpu.s.out1730 } = { $techmap\cpu.s.$ternary$seq.v:457$2024_Y [31:1] \cpu.s.out1729 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:458$2025' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:460$2027' is identical to cell `$techmap\cpu.s.$ternary$seq.v:457$2024'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:460$2027_Y [31:1] \cpu.s.out1732 } = { $techmap\cpu.s.$ternary$seq.v:457$2024_Y [31:1] \cpu.s.out1729 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:460$2027' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:461$2028' is identical to cell `$techmap\cpu.s.$ternary$seq.v:457$2024'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:461$2028_Y [31:1] \cpu.cdat_rdat } = { $techmap\cpu.s.$ternary$seq.v:457$2024_Y [31:1] \cpu.s.out1729 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:461$2028' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:462$2029' is identical to cell `$techmap\cpu.s.$ternary$seq.v:457$2024'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:462$2029_Y [31:1] \cpu.s.out1734 } = { $techmap\cpu.s.$ternary$seq.v:457$2024_Y [31:1] \cpu.s.out1729 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:462$2029' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:463$2030' is identical to cell `$techmap\cpu.s.$ternary$seq.v:457$2024'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:463$2030_Y [31:1] \cpu.s.out1735 } = { $techmap\cpu.s.$ternary$seq.v:457$2024_Y [31:1] \cpu.s.out1729 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:463$2030' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:466$2033' is identical to cell `$techmap\cpu.s.$ternary$seq.v:465$2032'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:466$2033_Y [31:1] \cpu.s.out1738 } = { $techmap\cpu.s.$ternary$seq.v:465$2032_Y [31:1] \cpu.s.out1737 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:466$2033' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:468$2035' is identical to cell `$techmap\cpu.s.$ternary$seq.v:465$2032'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:468$2035_Y [31:1] \cpu.s.out1740 } = { $techmap\cpu.s.$ternary$seq.v:465$2032_Y [31:1] \cpu.s.out1737 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:468$2035' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:469$2036' is identical to cell `$techmap\cpu.s.$ternary$seq.v:465$2032'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:469$2036_Y [31:1] \cpu.cdat_imm5 } = { $techmap\cpu.s.$ternary$seq.v:465$2032_Y [31:1] \cpu.s.out1737 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:469$2036' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:470$2037' is identical to cell `$techmap\cpu.s.$ternary$seq.v:465$2032'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:470$2037_Y [31:1] \cpu.s.out1742 } = { $techmap\cpu.s.$ternary$seq.v:465$2032_Y [31:1] \cpu.s.out1737 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:470$2037' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:471$2038' is identical to cell `$techmap\cpu.s.$ternary$seq.v:465$2032'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:471$2038_Y [31:1] \cpu.s.out1743 } = { $techmap\cpu.s.$ternary$seq.v:465$2032_Y [31:1] \cpu.s.out1737 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:471$2038' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:473$2040' is identical to cell `$techmap\cpu.s.$ternary$seq.v:472$2039'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:473$2040_Y [31:1] \cpu.s.out1745 } = { $techmap\cpu.s.$ternary$seq.v:472$2039_Y [31:1] \cpu.s.out1744 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:473$2040' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:475$2042' is identical to cell `$techmap\cpu.s.$ternary$seq.v:474$2041'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:475$2042_Y [31:1] \cpu.s.out1747 } = { $techmap\cpu.s.$ternary$seq.v:474$2041_Y [31:1] \cpu.s.out1746 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:475$2042' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:476$2043' is identical to cell `$techmap\cpu.s.$ternary$seq.v:474$2041'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:476$2043_Y [31:1] \cpu.s.out1748 } = { $techmap\cpu.s.$ternary$seq.v:474$2041_Y [31:1] \cpu.s.out1746 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:476$2043' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:478$2045' is identical to cell `$techmap\cpu.s.$ternary$seq.v:474$2041'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:478$2045_Y [31:1] \cpu.s.out1750 } = { $techmap\cpu.s.$ternary$seq.v:474$2041_Y [31:1] \cpu.s.out1746 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:478$2045' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:479$2046' is identical to cell `$techmap\cpu.s.$ternary$seq.v:474$2041'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:479$2046_Y [31:1] \cpu.s.out1751 } = { $techmap\cpu.s.$ternary$seq.v:474$2041_Y [31:1] \cpu.s.out1746 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:479$2046' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:480$2047' is identical to cell `$techmap\cpu.s.$ternary$seq.v:474$2041'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:480$2047_Y [31:1] \cpu.s.out1752 } = { $techmap\cpu.s.$ternary$seq.v:474$2041_Y [31:1] \cpu.s.out1746 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:480$2047' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:482$2049' is identical to cell `$techmap\cpu.s.$ternary$seq.v:481$2048'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:482$2049_Y [31:1] \cpu.s.out1754 } = { $techmap\cpu.s.$ternary$seq.v:481$2048_Y [31:1] \cpu.s.out1753 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:482$2049' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:483$2050' is identical to cell `$techmap\cpu.s.$ternary$seq.v:481$2048'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:483$2050_Y [31:1] \cpu.s.out1755 } = { $techmap\cpu.s.$ternary$seq.v:481$2048_Y [31:1] \cpu.s.out1753 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:483$2050' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:484$2051' is identical to cell `$techmap\cpu.s.$ternary$seq.v:481$2048'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:484$2051_Y [31:1] \cpu.s.out1756 } = { $techmap\cpu.s.$ternary$seq.v:481$2048_Y [31:1] \cpu.s.out1753 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:484$2051' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:485$2052' is identical to cell `$techmap\cpu.s.$ternary$seq.v:481$2048'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:485$2052_Y [31:1] \cpu.s.out1757 } = { $techmap\cpu.s.$ternary$seq.v:481$2048_Y [31:1] \cpu.s.out1753 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:485$2052' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:488$2055' is identical to cell `$techmap\cpu.s.$ternary$seq.v:487$2054'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:488$2055_Y [31:1] \cpu.s.out1760 } = { $techmap\cpu.s.$ternary$seq.v:487$2054_Y [31:1] \cpu.s.out1759 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:488$2055' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:489$2056' is identical to cell `$techmap\cpu.s.$ternary$seq.v:487$2054'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:489$2056_Y [31:1] \cpu.s.out1761 } = { $techmap\cpu.s.$ternary$seq.v:487$2054_Y [31:1] \cpu.s.out1759 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:489$2056' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:491$2058' is identical to cell `$techmap\cpu.s.$ternary$seq.v:487$2054'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:491$2058_Y [31:1] \cpu.s.out1763 } = { $techmap\cpu.s.$ternary$seq.v:487$2054_Y [31:1] \cpu.s.out1759 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:491$2058' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:492$2059' is identical to cell `$techmap\cpu.s.$ternary$seq.v:487$2054'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:492$2059_Y [31:1] \cpu.s.out1764 } = { $techmap\cpu.s.$ternary$seq.v:487$2054_Y [31:1] \cpu.s.out1759 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:492$2059' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:493$2060' is identical to cell `$techmap\cpu.s.$ternary$seq.v:487$2054'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:493$2060_Y [31:1] \cpu.s.out1765 } = { $techmap\cpu.s.$ternary$seq.v:487$2054_Y [31:1] \cpu.s.out1759 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:493$2060' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:495$2062' is identical to cell `$techmap\cpu.s.$ternary$seq.v:494$2061'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:495$2062_Y [31:1] \cpu.s.out1767 } = { $techmap\cpu.s.$ternary$seq.v:494$2061_Y [31:1] \cpu.s.out1766 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:495$2062' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:496$2063' is identical to cell `$techmap\cpu.s.$ternary$seq.v:494$2061'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:496$2063_Y [31:1] \cpu.s.out1768 } = { $techmap\cpu.s.$ternary$seq.v:494$2061_Y [31:1] \cpu.s.out1766 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:496$2063' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:497$2064' is identical to cell `$techmap\cpu.s.$ternary$seq.v:494$2061'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:497$2064_Y [31:1] \cpu.s.out1769 } = { $techmap\cpu.s.$ternary$seq.v:494$2061_Y [31:1] \cpu.s.out1766 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:497$2064' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:498$2065' is identical to cell `$techmap\cpu.s.$ternary$seq.v:494$2061'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:498$2065_Y [31:1] \cpu.s.out1770 } = { $techmap\cpu.s.$ternary$seq.v:494$2061_Y [31:1] \cpu.s.out1766 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:498$2065' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:500$2067' is identical to cell `$techmap\cpu.s.$ternary$seq.v:499$2066'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:500$2067_Y [31:1] \cpu.s.out1772 } = { $techmap\cpu.s.$ternary$seq.v:499$2066_Y [31:1] \cpu.s.out1771 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:500$2067' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:502$2069' is identical to cell `$techmap\cpu.s.$ternary$seq.v:501$2068'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:502$2069_Y [31:1] \cpu.s.out1774 } = { $techmap\cpu.s.$ternary$seq.v:501$2068_Y [31:1] \cpu.s.out1773 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:502$2069' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:503$2070' is identical to cell `$techmap\cpu.s.$ternary$seq.v:501$2068'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:503$2070_Y [31:1] \cpu.s.out1775 } = { $techmap\cpu.s.$ternary$seq.v:501$2068_Y [31:1] \cpu.s.out1773 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:503$2070' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:505$2072' is identical to cell `$techmap\cpu.s.$ternary$seq.v:501$2068'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:505$2072_Y [31:1] \cpu.s.out1777 } = { $techmap\cpu.s.$ternary$seq.v:501$2068_Y [31:1] \cpu.s.out1773 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:505$2072' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:506$2073' is identical to cell `$techmap\cpu.s.$ternary$seq.v:501$2068'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:506$2073_Y [31:1] \cpu.s.out1778 } = { $techmap\cpu.s.$ternary$seq.v:501$2068_Y [31:1] \cpu.s.out1773 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:506$2073' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:507$2074' is identical to cell `$techmap\cpu.s.$ternary$seq.v:501$2068'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:507$2074_Y [31:1] \cpu.s.out1779 } = { $techmap\cpu.s.$ternary$seq.v:501$2068_Y [31:1] \cpu.s.out1773 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:507$2074' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:509$2076' is identical to cell `$techmap\cpu.s.$ternary$seq.v:508$2075'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:509$2076_Y [31:1] \cpu.s.out1781 } = { $techmap\cpu.s.$ternary$seq.v:508$2075_Y [31:1] \cpu.s.out1780 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:509$2076' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:510$2077' is identical to cell `$techmap\cpu.s.$ternary$seq.v:508$2075'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:510$2077_Y [31:1] \cpu.s.out1782 } = { $techmap\cpu.s.$ternary$seq.v:508$2075_Y [31:1] \cpu.s.out1780 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:510$2077' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:511$2078' is identical to cell `$techmap\cpu.s.$ternary$seq.v:508$2075'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:511$2078_Y [31:1] \cpu.s.out1783 } = { $techmap\cpu.s.$ternary$seq.v:508$2075_Y [31:1] \cpu.s.out1780 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:511$2078' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:512$2079' is identical to cell `$techmap\cpu.s.$ternary$seq.v:508$2075'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:512$2079_Y [31:1] \cpu.s.out1784 } = { $techmap\cpu.s.$ternary$seq.v:508$2075_Y [31:1] \cpu.s.out1780 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:512$2079' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:515$2082' is identical to cell `$techmap\cpu.s.$ternary$seq.v:514$2081'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:515$2082_Y [31:1] \cpu.s.out1787 } = { $techmap\cpu.s.$ternary$seq.v:514$2081_Y [31:1] \cpu.s.out1786 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:515$2082' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:516$2083' is identical to cell `$techmap\cpu.s.$ternary$seq.v:514$2081'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:516$2083_Y [31:1] \cpu.s.out1788 } = { $techmap\cpu.s.$ternary$seq.v:514$2081_Y [31:1] \cpu.s.out1786 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:516$2083' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:518$2085' is identical to cell `$techmap\cpu.s.$ternary$seq.v:514$2081'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:518$2085_Y [31:1] \cpu.s.out1790 } = { $techmap\cpu.s.$ternary$seq.v:514$2081_Y [31:1] \cpu.s.out1786 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:518$2085' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:519$2086' is identical to cell `$techmap\cpu.s.$ternary$seq.v:514$2081'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:519$2086_Y [31:1] \cpu.s.out1791 } = { $techmap\cpu.s.$ternary$seq.v:514$2081_Y [31:1] \cpu.s.out1786 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:519$2086' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:520$2087' is identical to cell `$techmap\cpu.s.$ternary$seq.v:514$2081'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:520$2087_Y [31:1] \cpu.s.out1792 } = { $techmap\cpu.s.$ternary$seq.v:514$2081_Y [31:1] \cpu.s.out1786 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:520$2087' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:522$2089' is identical to cell `$techmap\cpu.s.$ternary$seq.v:521$2088'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:522$2089_Y [31:1] \cpu.s.out1794 } = { $techmap\cpu.s.$ternary$seq.v:521$2088_Y [31:1] \cpu.s.out1793 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:522$2089' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:523$2090' is identical to cell `$techmap\cpu.s.$ternary$seq.v:521$2088'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:523$2090_Y [31:1] \cpu.s.out1795 } = { $techmap\cpu.s.$ternary$seq.v:521$2088_Y [31:1] \cpu.s.out1793 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:523$2090' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:524$2091' is identical to cell `$techmap\cpu.s.$ternary$seq.v:521$2088'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:524$2091_Y [31:1] \cpu.s.out1796 } = { $techmap\cpu.s.$ternary$seq.v:521$2088_Y [31:1] \cpu.s.out1793 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:524$2091' from module `\TOP'.
  Cell `$techmap\cpu.s.$ternary$seq.v:525$2092' is identical to cell `$techmap\cpu.s.$ternary$seq.v:521$2088'.
    Redirecting output \Y: { $techmap\cpu.s.$ternary$seq.v:525$2092_Y [31:1] \cpu.s.out1797 } = { $techmap\cpu.s.$ternary$seq.v:521$2088_Y [31:1] \cpu.s.out1793 }
    Removing $mux cell `$techmap\cpu.s.$ternary$seq.v:525$2092' from module `\TOP'.
  Cell `$techmap\cpu.xrs.column1.$procmux$2364' is identical to cell `$techmap\cpu.xrs.column0.$procmux$2364'.
    Redirecting output \Y: $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] = $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0]
    Removing $mux cell `$techmap\cpu.xrs.column1.$procmux$2364' from module `\TOP'.
  Cell `$techmap\cpu.xrs.column1.$procmux$2370' is identical to cell `$techmap\cpu.xrs.column0.$procmux$2370'.
    Redirecting output \Y: $techmap\cpu.xrs.column1.$0$memwr$\mem$xrs.v:71$2345_ADDR[4:0]$2347 = $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_ADDR[4:0]$2347
    Removing $mux cell `$techmap\cpu.xrs.column1.$procmux$2370' from module `\TOP'.
  Cell `$techmap\cpu.xrs.column2.$procmux$2364' is identical to cell `$techmap\cpu.xrs.column0.$procmux$2364'.
    Redirecting output \Y: $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] = $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0]
    Removing $mux cell `$techmap\cpu.xrs.column2.$procmux$2364' from module `\TOP'.
  Cell `$techmap\cpu.xrs.column2.$procmux$2370' is identical to cell `$techmap\cpu.xrs.column0.$procmux$2370'.
    Redirecting output \Y: $techmap\cpu.xrs.column2.$0$memwr$\mem$xrs.v:71$2345_ADDR[4:0]$2347 = $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_ADDR[4:0]$2347
    Removing $mux cell `$techmap\cpu.xrs.column2.$procmux$2370' from module `\TOP'.
  Cell `$techmap\cpu.xrs.column3.$procmux$2364' is identical to cell `$techmap\cpu.xrs.column0.$procmux$2364'.
    Redirecting output \Y: $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0] = $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [0]
    Removing $mux cell `$techmap\cpu.xrs.column3.$procmux$2364' from module `\TOP'.
  Cell `$techmap\cpu.xrs.column3.$procmux$2370' is identical to cell `$techmap\cpu.xrs.column0.$procmux$2370'.
    Redirecting output \Y: $techmap\cpu.xrs.column3.$0$memwr$\mem$xrs.v:71$2345_ADDR[4:0]$2347 = $techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_ADDR[4:0]$2347
    Removing $mux cell `$techmap\cpu.xrs.column3.$procmux$2370' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:157$590' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$578'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:157$590_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:153$578_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:157$590' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:157$591' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$579'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:157$591_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:153$579_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:157$591' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:157$592' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$580'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:157$592_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:153$580_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:157$592' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:157$593' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$581'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:157$593_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:153$581_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:157$593' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:157$594' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$582'.
    Redirecting output \Y: \bot.SSizO_1 = \bot.SStbO_1
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:157$594' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:159$603' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:151$576'.
    Redirecting output \Y: \bot.MAckO_SAckI = \bot.SStbO_MStbI
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:159$603' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:161$607' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:160$604'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:161$607_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:160$604_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:161$607' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:162$610' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:160$604'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:162$610_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:160$604_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:162$610' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:162$611' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:161$608'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:162$611_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:161$608_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:162$611' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:162$612' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:161$609'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:162$612_Y = \bot.ack2_o
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:162$612' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:163$615' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$578'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:163$615_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:153$578_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:163$615' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:163$616' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$579'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:163$616_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:153$579_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:163$616' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:163$617' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$580'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:163$617_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:153$580_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:163$617' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:163$618' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$581'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:163$618_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:153$581_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:163$618' from module `\TOP'.
  Cell `$techmap\bot.$ternary$bottleneck.v:60$653' is identical to cell `$techmap\bot.$ternary$bottleneck.v:59$649'.
    Redirecting output \Y: $techmap\bot.$ternary$bottleneck.v:60$653_Y = $techmap\bot.$ternary$bottleneck.v:59$649_Y
    Removing $mux cell `$techmap\bot.$ternary$bottleneck.v:60$653' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:533$2111' is identical to cell `$techmap\cpu.s.$or$seq.v:530$2097'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:533$2111_Y = $techmap\cpu.s.$or$seq.v:530$2097_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:533$2111' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:553$2139' is identical to cell `$techmap\cpu.s.$or$seq.v:530$2097'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:553$2139_Y = $techmap\cpu.s.$or$seq.v:530$2097_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:553$2139' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:553$2140' is identical to cell `$techmap\cpu.s.$or$seq.v:533$2112'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:553$2140_Y = $techmap\cpu.s.$or$seq.v:533$2112_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:553$2140' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:553$2141' is identical to cell `$techmap\cpu.s.$or$seq.v:533$2113'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:553$2141_Y = $techmap\cpu.s.$or$seq.v:533$2113_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:553$2141' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:554$2144' is identical to cell `$techmap\cpu.s.$or$seq.v:526$2093'.
    Redirecting output \Y: \arb.dwe_i = $techmap\cpu.s.$or$seq.v:526$2093_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:554$2144' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:555$2145' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2128'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:555$2145_Y = $techmap\cpu.s.$or$seq.v:552$2128_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:555$2145' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:555$2146' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2129'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:555$2146_Y = $techmap\cpu.s.$or$seq.v:552$2129_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:555$2146' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:555$2147' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2130'.
    Redirecting output \Y: \cpu.alua_cdat = $techmap\cpu.s.$or$seq.v:552$2130_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:555$2147' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:559$2155' is identical to cell `$techmap\cpu.s.$or$seq.v:526$2093'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:559$2155_Y = $techmap\cpu.s.$or$seq.v:526$2093_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:559$2155' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:559$2156' is identical to cell `$techmap\cpu.s.$or$seq.v:526$2094'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:559$2156_Y = $techmap\cpu.s.$or$seq.v:526$2094_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:559$2156' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:559$2157' is identical to cell `$techmap\cpu.s.$or$seq.v:526$2095'.
    Redirecting output \Y: \cpu.dadr_alu = \cpu.dsiz_fn3
    Removing $or cell `$techmap\cpu.s.$or$seq.v:559$2157' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:561$2158' is identical to cell `$techmap\cpu.s.$or$seq.v:530$2097'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:561$2158_Y = $techmap\cpu.s.$or$seq.v:530$2097_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:561$2158' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:561$2159' is identical to cell `$techmap\cpu.s.$or$seq.v:533$2112'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:561$2159_Y = $techmap\cpu.s.$or$seq.v:533$2112_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:561$2159' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:561$2160' is identical to cell `$techmap\cpu.s.$or$seq.v:533$2113'.
    Redirecting output \Y: \cpu.cdat_alu = $techmap\cpu.s.$or$seq.v:533$2113_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:561$2160' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:567$2164' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2128'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:567$2164_Y = $techmap\cpu.s.$or$seq.v:552$2128_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:567$2164' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:567$2165' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2129'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:567$2165_Y = $techmap\cpu.s.$or$seq.v:552$2129_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:567$2165' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:567$2166' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2130'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:567$2166_Y = $techmap\cpu.s.$or$seq.v:552$2130_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:567$2166' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:567$2167' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2131'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:567$2167_Y = $techmap\cpu.s.$or$seq.v:552$2131_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:567$2167' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:567$2168' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2132'.
    Redirecting output \Y: \cpu.rdat_cdat = $techmap\cpu.s.$or$seq.v:552$2132_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:567$2168' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:570$2169' is identical to cell `$techmap\cpu.s.$or$seq.v:526$2093'.
    Redirecting output \Y: \cpu.ddat_rdat = $techmap\cpu.s.$or$seq.v:526$2093_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:570$2169' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:575$2174' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2128'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:575$2174_Y = $techmap\cpu.s.$or$seq.v:552$2128_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:575$2174' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:575$2175' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2129'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:575$2175_Y = $techmap\cpu.s.$or$seq.v:552$2129_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:575$2175' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:575$2176' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2130'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:575$2176_Y = $techmap\cpu.s.$or$seq.v:552$2130_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:575$2176' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:575$2177' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2131'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:575$2177_Y = $techmap\cpu.s.$or$seq.v:552$2131_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:575$2177' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:575$2178' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2132'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:575$2178_Y = $techmap\cpu.s.$or$seq.v:552$2132_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:575$2178' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:575$2179' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2133'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:575$2179_Y = $techmap\cpu.s.$or$seq.v:552$2133_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:575$2179' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:575$2180' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2134'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:575$2180_Y = $techmap\cpu.s.$or$seq.v:552$2134_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:575$2180' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:575$2181' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2135'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:575$2181_Y = $techmap\cpu.s.$or$seq.v:552$2135_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:575$2181' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:575$2182' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2136'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:575$2182_Y = $techmap\cpu.s.$or$seq.v:552$2136_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:575$2182' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:575$2183' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2137'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:575$2183_Y = $techmap\cpu.s.$or$seq.v:552$2137_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:575$2183' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:575$2184' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2138'.
    Redirecting output \Y: \cpu.rwe_o = \cpu.ra_ird
    Removing $or cell `$techmap\cpu.s.$or$seq.v:575$2184' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:594$2221' is identical to cell `$techmap\cpu.s.$or$seq.v:526$2093'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:594$2221_Y = $techmap\cpu.s.$or$seq.v:526$2093_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:594$2221' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:594$2222' is identical to cell `$techmap\cpu.s.$or$seq.v:526$2094'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:594$2222_Y = $techmap\cpu.s.$or$seq.v:526$2094_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:594$2222' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:594$2223' is identical to cell `$techmap\cpu.s.$or$seq.v:526$2095'.
    Redirecting output \Y: \arb.dcyc_i = \cpu.dsiz_fn3
    Removing $or cell `$techmap\cpu.s.$or$seq.v:594$2223' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:599$2225' is identical to cell `$techmap\cpu.s.$or$seq.v:530$2097'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:599$2225_Y = $techmap\cpu.s.$or$seq.v:530$2097_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:599$2225' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:599$2226' is identical to cell `$techmap\cpu.s.$or$seq.v:533$2112'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:599$2226_Y = $techmap\cpu.s.$or$seq.v:533$2112_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:599$2226' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:599$2227' is identical to cell `$techmap\cpu.s.$or$seq.v:533$2113'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:599$2227_Y = $techmap\cpu.s.$or$seq.v:533$2113_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:599$2227' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:599$2228' is identical to cell `$techmap\cpu.s.$or$seq.v:553$2142'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:599$2228_Y = $techmap\cpu.s.$or$seq.v:553$2142_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:599$2228' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:599$2229' is identical to cell `$techmap\cpu.s.$or$seq.v:553$2143'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:599$2229_Y = \cpu.cwe_1
    Removing $or cell `$techmap\cpu.s.$or$seq.v:599$2229' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:601$2244' is identical to cell `$techmap\cpu.s.$or$seq.v:526$2093'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:601$2244_Y = $techmap\cpu.s.$or$seq.v:526$2093_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:601$2244' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:601$2245' is identical to cell `$techmap\cpu.s.$or$seq.v:526$2094'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:601$2245_Y = $techmap\cpu.s.$or$seq.v:526$2094_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:601$2245' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:601$2246' is identical to cell `$techmap\cpu.s.$or$seq.v:526$2095'.
    Redirecting output \Y: \arb.dstb_i = \cpu.dsiz_fn3
    Removing $or cell `$techmap\cpu.s.$or$seq.v:601$2246' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:615$2273' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2128'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:615$2273_Y = $techmap\cpu.s.$or$seq.v:552$2128_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:615$2273' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:615$2274' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2129'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:615$2274_Y = $techmap\cpu.s.$or$seq.v:552$2129_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:615$2274' from module `\TOP'.
  Cell `$techmap\cpu.s.$or$seq.v:615$2275' is identical to cell `$techmap\cpu.s.$or$seq.v:552$2130'.
    Redirecting output \Y: $techmap\cpu.s.$or$seq.v:615$2275_Y = $techmap\cpu.s.$or$seq.v:552$2130_Y
    Removing $or cell `$techmap\cpu.s.$or$seq.v:615$2275' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:164$622' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:168$630'.
    Redirecting output \Y: \bot.SDatO_MDatI31_16 = \bot.Hold1_SDatI
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:164$622' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:165$623' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:166$626'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:165$623_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:166$626_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:165$623' from module `\TOP'.
  Cell `$techmap\cpu.xrs.column1.$procdff$2385' is identical to cell `$techmap\cpu.xrs.column0.$procdff$2385'.
    Redirecting output \Q: $techmap\cpu.xrs.column1.$memwr$\mem$xrs.v:71$2345_ADDR = $techmap\cpu.xrs.column0.$memwr$\mem$xrs.v:71$2345_ADDR
    Removing $dff cell `$techmap\cpu.xrs.column1.$procdff$2385' from module `\TOP'.
  Cell `$techmap\cpu.xrs.column1.$procdff$2387' is identical to cell `$techmap\cpu.xrs.column0.$procdff$2387'.
    Redirecting output \Q: $techmap\cpu.xrs.column1.$memwr$\mem$xrs.v:71$2345_EN = $techmap\cpu.xrs.column0.$memwr$\mem$xrs.v:71$2345_EN
    Removing $dff cell `$techmap\cpu.xrs.column1.$procdff$2387' from module `\TOP'.
  Cell `$techmap\cpu.xrs.column2.$procdff$2385' is identical to cell `$techmap\cpu.xrs.column0.$procdff$2385'.
    Redirecting output \Q: $techmap\cpu.xrs.column2.$memwr$\mem$xrs.v:71$2345_ADDR = $techmap\cpu.xrs.column0.$memwr$\mem$xrs.v:71$2345_ADDR
    Removing $dff cell `$techmap\cpu.xrs.column2.$procdff$2385' from module `\TOP'.
  Cell `$techmap\cpu.xrs.column2.$procdff$2387' is identical to cell `$techmap\cpu.xrs.column0.$procdff$2387'.
    Redirecting output \Q: $techmap\cpu.xrs.column2.$memwr$\mem$xrs.v:71$2345_EN = $techmap\cpu.xrs.column0.$memwr$\mem$xrs.v:71$2345_EN
    Removing $dff cell `$techmap\cpu.xrs.column2.$procdff$2387' from module `\TOP'.
  Cell `$techmap\cpu.xrs.column3.$procdff$2385' is identical to cell `$techmap\cpu.xrs.column0.$procdff$2385'.
    Redirecting output \Q: $techmap\cpu.xrs.column3.$memwr$\mem$xrs.v:71$2345_ADDR = $techmap\cpu.xrs.column0.$memwr$\mem$xrs.v:71$2345_ADDR
    Removing $dff cell `$techmap\cpu.xrs.column3.$procdff$2385' from module `\TOP'.
  Cell `$techmap\cpu.xrs.column3.$procdff$2387' is identical to cell `$techmap\cpu.xrs.column0.$procdff$2387'.
    Redirecting output \Q: $techmap\cpu.xrs.column3.$memwr$\mem$xrs.v:71$2345_EN = $techmap\cpu.xrs.column0.$memwr$\mem$xrs.v:71$2345_EN
    Removing $dff cell `$techmap\cpu.xrs.column3.$procdff$2387' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:151$576' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:172$631'.
    Redirecting output \Y: \bot.SStbO_MStbI = \bot.SSizO_MSizI0
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:151$576' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:152$577' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:168$630'.
    Redirecting output \Y: \bot.plus2 = \bot.Hold1_SDatI
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:152$577' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$578' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$632'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:153$578_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:174$632_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$578' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$579' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$633'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:153$579_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:174$633_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$579' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$580' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$634'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:153$580_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:174$634_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$580' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$581' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$635'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:153$581_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:174$635_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$581' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$582' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$636'.
    Redirecting output \Y: \bot.SStbO_1 = $techmap\bot.bs.$or$bottleneckSequencer.v:174$636_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:153$582' from module `\TOP'.
  Cell `$techmap\arb.$and$arbiter.v:77$88' is identical to cell `$techmap\arb.$and$arbiter.v:76$85'.
    Redirecting output \Y: $techmap\arb.$and$arbiter.v:77$88_Y = $techmap\arb.$and$arbiter.v:76$85_Y
    Removing $and cell `$techmap\arb.$and$arbiter.v:77$88' from module `\TOP'.
  Cell `$techmap\arb.$or$arbiter.v:77$89' is identical to cell `$techmap\arb.$or$arbiter.v:76$86'.
    Redirecting output \Y: \arb.xstb_o = \arb.xcyc_o
    Removing $or cell `$techmap\arb.$or$arbiter.v:77$89' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:166$627' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:165$624'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:166$627_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:165$624_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:166$627' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:166$628' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:165$625'.
    Redirecting output \Y: \bot.MDatO_SDatI = \bot.SDatO_MDatI15_0
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:166$628' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$636' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:163$619'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:174$636_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:163$619_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$636' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:163$620' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$637'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:163$620_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:174$637_Y
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:163$620' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:163$621' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$638'.
    Redirecting output \Y: \bot.SAdrO_MAdrI = \bot.SWeO_MWeI
    Removing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:163$621' from module `\TOP'.
Removed a total of 303 cells.

12.7.5.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $techmap\cpu.csrs.$procdff$2399 ($dff) from module TOP.
Replaced 1 DFF cells.

12.7.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:114$848': $techmap\wb_bridge.$or$bridge.v:114$848_Y = $techmap\wb_bridge.$or$bridge.v:113$845_Y
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:115$851': { $techmap\wb_bridge.$or$bridge.v:115$851_Y [31:8] \ram.sram_dat_i [15:8] } = $techmap\wb_bridge.$or$bridge.v:114$848_Y
  removing buffer cell `$techmap\wb_bridge.$or$bridge.v:68$770': $techmap\wb_bridge.$or$bridge.v:68$770_Y = \wb_bridge.hen0
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:569$1207'.
  removing unused `$and' cell `$techmap\cpu.csrs.$and$polaris.v:569$1205'.
  removing unused non-port wire \cpu.csrs.csrd_mtime.
  removing unused non-port wire \cpu.csrs.mtime.
  removing unused non-port wire \cpu.csrs.mtime_mux.
  removing unused non-port wire \wb_bridge.den.
  removing unused non-port wire \wb_bridge.size_dword.
  removing unused non-port wire \wb_bridge.size_word.
  removing unused non-port wire \wb_bridge.wen0.
  removed 7 unused temporary wires.

12.7.5.8. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:506$1103' (?) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:506$1103_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:506$1104' in module `\TOP' with identity for port A.

12.7.5.9. Rerunning OPT passes. (Maybe there is more to do..)

12.7.5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$2373 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:73$76
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$78 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$79 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$90 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$91 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2376 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2379 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2382 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:58$646 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$648 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$649 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:60$652 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:63$658 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:64$660 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:65$663 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:66$666 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:66$668 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$670 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$671 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$673 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:69$677 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:83$681 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:84$686 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:85$691 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:86$697 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:87$702 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:88$708 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:89$712 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$715 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$716 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:101$526 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:102$527 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:112$537 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:123$548 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:136$561 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:147$572 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:150$575 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:91$516 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:138$931 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:139$933 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:140$936 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:143$942 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:151$949 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:160$955 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:161$957 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:162$960 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:163$963 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:165$966 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:166$968 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:167$971 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:168$974 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:169$977 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:170$980 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:171$983 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:172$986 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:173$989 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:174$991 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:175$994 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:176$997 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:177$1000 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:178$1002 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:179$1005 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:181$1009 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:182$1011 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:183$1013 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:184$1015 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:185$1017 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:186$1019 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:188$1023 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:189$1025 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:192$1030 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:193$1031 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:33$6 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:38$11 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:39$13 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:47$21 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:50$23
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:52$25
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:54$27
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:56$29
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:58$31 (pure)
      Removing pure flag from root mux $techmap\cpu.alu.$ternary$alu.v:50$23.
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:62$35 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:64$38 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:65$41 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:490$1056 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:493$1064 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:495$1070 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:498$1079 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:499$1082 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:500$1085 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:501$1088 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:502$1091 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:503$1094 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:505$1100 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:507$1106 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:512$1112 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:513$1114 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:519$1121 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:520$1124 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:521$1127 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:525$1132 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:526$1133 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:527$1136 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:528$1139 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:535$1145 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:536$1147 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:537$1150 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:540$1153 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:545$1158 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:546$1160 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:548$1166 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:554$1171 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:555$1172 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:556$1174 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:557$1176 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:558$1179 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:561$1182 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:563$1186 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:565$1191 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:566$1196 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:234$1801 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:238$1805 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:240$1807 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:241$1808 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:245$1812 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:257$1824 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:259$1826 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:260$1827 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:261$1828 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:262$1829 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:263$1830 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:264$1831 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:265$1832 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:266$1833 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:267$1834 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:268$1835 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:269$1836 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:271$1838 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:274$1841 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:279$1846 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:280$1847 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:281$1848 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:284$1851 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:287$1854 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:288$1855 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:289$1856 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:291$1858 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:293$1860 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:294$1861 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:295$1862 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:297$1864 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:300$1867 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:302$1869 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:307$1874 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:308$1875 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:311$1878 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:312$1879 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:315$1882 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:318$1885 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:319$1886 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:320$1887 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:322$1889 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:324$1891 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:325$1892 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:326$1893 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:327$1894 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:328$1895 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:332$1899 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:334$1901 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:337$1904 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:340$1907 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:344$1911 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:347$1914 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:350$1917 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:351$1918 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:353$1920 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:354$1921 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:355$1922 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:360$1927 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:361$1928 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:362$1929 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:364$1931 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:367$1934 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:373$1940 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:382$1949 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:384$1951 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:388$1955 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:397$1964 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:405$1972 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:406$1973 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:408$1975 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:411$1978 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:413$1980 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:420$1987 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:422$1989 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:423$1990 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:424$1991 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:425$1992 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:426$1993 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:427$1994 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:428$1995 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:429$1996 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:430$1997 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:432$1999 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:434$2001 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:436$2003 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:438$2005 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:439$2006 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:440$2007 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:442$2009 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:444$2011 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:445$2012 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:449$2016 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:450$2017 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:451$2018 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:452$2019 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:453$2020 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:454$2021 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:455$2022 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:457$2024 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:464$2031 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:465$2032 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:472$2039 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:474$2041 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:481$2048 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:486$2053 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:487$2054 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:494$2061 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:499$2066 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:501$2068 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:508$2075 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:513$2080 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:514$2081 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:521$2088 (pure)
    Root of a mux tree: $techmap\cpu.xrs.$ternary$xrs.v:23$2344
    Root of a mux tree: $techmap\cpu.xrs.column0.$procmux$2364 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column0.$procmux$2367 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column0.$procmux$2370 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column1.$procmux$2367 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column2.$procmux$2367 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column3.$procmux$2367 (pure)
    Root of a mux tree: $techmap\wb_bridge.$ternary$bridge.v:112$842 (pure)
    Root of a mux tree: $techmap\wb_bridge.$ternary$bridge.v:113$844 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:50$23 (rerun as non-pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

12.7.5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TOP.
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:523$1129: { \cpu.csrs.mstatus_we \cpu.csrs.mepc_ia \cpu.csrs.mpie_1 }
    New input vector for $reduce_or cell $techmap\cpu.$reduce_or$polaris.v:180$1007: { \cpu.ia_pc \cpu.pc_alu \cpu.pc_mbvec \cpu.csrs.mepc_ia \cpu.csrs.mie_mpie }
  Optimizing cells in module \TOP.
Performed a total of 2 changes.

12.7.5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.7.5.13. Executing OPT_RMDFF pass (remove dff with constant values).

12.7.5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:506$1104': $techmap\cpu.csrs.$or$polaris.v:506$1104_Y = $techmap\cpu.csrs.$or$polaris.v:505$1101_Y

12.7.5.15. Executing OPT_EXPR pass (perform const folding).

12.7.5.16. Rerunning OPT passes. (Maybe there is more to do..)

12.7.5.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$2373 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:73$76
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$78 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$79 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$90 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$91 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2376 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2379 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2382 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:58$646 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$648 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$649 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:60$652 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:63$658 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:64$660 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:65$663 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:66$666 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:66$668 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$670 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$671 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$673 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:69$677 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:83$681 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:84$686 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:85$691 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:86$697 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:87$702 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:88$708 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:89$712 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$715 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$716 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:101$526 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:102$527 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:112$537 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:123$548 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:136$561 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:147$572 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:150$575 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:91$516 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:138$931 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:139$933 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:140$936 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:143$942 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:151$949 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:160$955 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:161$957 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:162$960 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:163$963 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:165$966 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:166$968 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:167$971 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:168$974 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:169$977 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:170$980 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:171$983 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:172$986 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:173$989 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:174$991 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:175$994 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:176$997 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:177$1000 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:178$1002 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:179$1005 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:181$1009 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:182$1011 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:183$1013 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:184$1015 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:185$1017 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:186$1019 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:188$1023 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:189$1025 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:192$1030 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:193$1031 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:33$6 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:38$11 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:39$13 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:47$21 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:50$23
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:52$25
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:54$27
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:56$29
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:58$31 (pure)
      Removing pure flag from root mux $techmap\cpu.alu.$ternary$alu.v:50$23.
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:62$35 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:64$38 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:65$41 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:490$1056 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:493$1064 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:495$1070 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:498$1079 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:499$1082 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:500$1085 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:501$1088 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:502$1091 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:503$1094 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:505$1100 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:507$1106 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:512$1112 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:513$1114 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:519$1121 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:520$1124 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:521$1127 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:525$1132 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:526$1133 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:527$1136 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:528$1139 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:535$1145 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:536$1147 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:537$1150 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:540$1153 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:545$1158 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:546$1160 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:548$1166 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:554$1171 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:555$1172 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:556$1174 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:557$1176 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:558$1179 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:561$1182 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:563$1186 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:565$1191 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:566$1196 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:234$1801 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:238$1805 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:240$1807 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:241$1808 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:245$1812 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:257$1824 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:259$1826 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:260$1827 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:261$1828 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:262$1829 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:263$1830 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:264$1831 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:265$1832 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:266$1833 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:267$1834 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:268$1835 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:269$1836 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:271$1838 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:274$1841 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:279$1846 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:280$1847 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:281$1848 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:284$1851 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:287$1854 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:288$1855 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:289$1856 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:291$1858 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:293$1860 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:294$1861 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:295$1862 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:297$1864 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:300$1867 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:302$1869 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:307$1874 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:308$1875 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:311$1878 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:312$1879 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:315$1882 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:318$1885 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:319$1886 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:320$1887 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:322$1889 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:324$1891 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:325$1892 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:326$1893 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:327$1894 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:328$1895 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:332$1899 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:334$1901 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:337$1904 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:340$1907 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:344$1911 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:347$1914 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:350$1917 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:351$1918 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:353$1920 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:354$1921 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:355$1922 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:360$1927 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:361$1928 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:362$1929 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:364$1931 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:367$1934 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:373$1940 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:382$1949 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:384$1951 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:388$1955 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:397$1964 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:405$1972 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:406$1973 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:408$1975 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:411$1978 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:413$1980 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:420$1987 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:422$1989 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:423$1990 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:424$1991 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:425$1992 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:426$1993 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:427$1994 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:428$1995 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:429$1996 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:430$1997 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:432$1999 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:434$2001 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:436$2003 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:438$2005 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:439$2006 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:440$2007 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:442$2009 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:444$2011 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:445$2012 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:449$2016 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:450$2017 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:451$2018 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:452$2019 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:453$2020 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:454$2021 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:455$2022 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:457$2024 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:464$2031 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:465$2032 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:472$2039 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:474$2041 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:481$2048 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:486$2053 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:487$2054 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:494$2061 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:499$2066 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:501$2068 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:508$2075 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:513$2080 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:514$2081 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:521$2088 (pure)
    Root of a mux tree: $techmap\cpu.xrs.$ternary$xrs.v:23$2344
    Root of a mux tree: $techmap\cpu.xrs.column0.$procmux$2364 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column0.$procmux$2367 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column0.$procmux$2370 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column1.$procmux$2367 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column2.$procmux$2367 (pure)
    Root of a mux tree: $techmap\cpu.xrs.column3.$procmux$2367 (pure)
    Root of a mux tree: $techmap\wb_bridge.$ternary$bridge.v:112$842 (pure)
    Root of a mux tree: $techmap\wb_bridge.$ternary$bridge.v:113$844 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:50$23 (rerun as non-pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

12.7.5.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TOP.
Performed a total of 0 changes.

12.7.5.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.7.5.20. Executing OPT_RMDFF pass (remove dff with constant values).

12.7.5.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..

12.7.5.22. Executing OPT_EXPR pass (perform const folding).

12.7.5.23. Finished OPT passes. (There is nothing left to do.)

12.7.6. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 bits (of 32) from port B of cell TOP.$techmap\cpu.$add$polaris.v:182$1010 ($add).
Removed top 27 bits (of 32) from port Y of cell TOP.$techmap\cpu.$or$polaris.v:179$1006 ($or).
Removed top 27 bits (of 32) from port A of cell TOP.$techmap\cpu.$or$polaris.v:179$1006 ($or).
Removed top 27 bits (of 32) from port B of cell TOP.$techmap\cpu.$or$polaris.v:179$1006 ($or).
Removed top 27 bits (of 32) from mux cell TOP.$techmap\cpu.$ternary$polaris.v:179$1005 ($mux).
Removed top 27 bits (of 32) from port Y of cell TOP.$techmap\cpu.$or$polaris.v:178$1003 ($or).
Removed top 27 bits (of 32) from port A of cell TOP.$techmap\cpu.$or$polaris.v:178$1003 ($or).
Removed top 27 bits (of 32) from port B of cell TOP.$techmap\cpu.$or$polaris.v:178$1003 ($or).
Removed top 27 bits (of 32) from mux cell TOP.$techmap\cpu.$ternary$polaris.v:178$1002 ($mux).
Removed top 27 bits (of 32) from mux cell TOP.$techmap\cpu.$ternary$polaris.v:177$1000 ($mux).
Removed top 59 bits (of 64) from mux cell TOP.$techmap\cpu.$ternary$polaris.v:171$983 ($mux).
Removed top 59 bits (of 64) from mux cell TOP.$techmap\cpu.$ternary$polaris.v:140$936 ($mux).
Removed top 24 bits (of 32) from port Y of cell TOP.$techmap\wb_bridge.$or$bridge.v:113$845 ($or).
Removed top 24 bits (of 32) from port A of cell TOP.$techmap\wb_bridge.$or$bridge.v:113$845 ($or).
Removed top 24 bits (of 32) from port B of cell TOP.$techmap\wb_bridge.$or$bridge.v:113$845 ($or).
Removed top 24 bits (of 32) from mux cell TOP.$techmap\wb_bridge.$ternary$bridge.v:113$844 ($mux).
Removed top 24 bits (of 32) from mux cell TOP.$techmap\wb_bridge.$ternary$bridge.v:112$842 ($mux).
Removed top 31 bits (of 32) from port Y of cell TOP.$techmap\bot.$or$bottleneck.v:91$717 ($or).
Removed top 31 bits (of 32) from port A of cell TOP.$techmap\bot.$or$bottleneck.v:91$717 ($or).
Removed top 31 bits (of 32) from port B of cell TOP.$techmap\bot.$or$bottleneck.v:91$717 ($or).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:91$716 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:91$715 ($mux).
Removed top 32 bits (of 64) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:88$708 ($mux).
Removed top 48 bits (of 64) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:86$697 ($mux).
Removed top 56 bits (of 64) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:84$686 ($mux).
Removed top 44 bits (of 64) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:69$677 ($mux).
Removed top 44 bits (of 64) from port Y of cell TOP.$techmap\bot.$or$bottleneck.v:69$675 ($or).
Removed top 44 bits (of 64) from port A of cell TOP.$techmap\bot.$or$bottleneck.v:69$675 ($or).
Removed top 44 bits (of 64) from port B of cell TOP.$techmap\bot.$or$bottleneck.v:69$675 ($or).
Removed top 32 bits (of 64) from port B of cell TOP.$techmap\bot.$or$bottleneck.v:68$674 ($or).
Removed top 44 bits (of 64) from port Y of cell TOP.$techmap\bot.$or$bottleneck.v:68$674 ($or).
Removed top 44 bits (of 64) from port A of cell TOP.$techmap\bot.$or$bottleneck.v:68$674 ($or).
Removed top 12 bits (of 32) from port B of cell TOP.$techmap\bot.$or$bottleneck.v:68$674 ($or).
Removed top 29 bits (of 32) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:68$673 ($mux).
Removed top 32 bits (of 64) from port A of cell TOP.$techmap\bot.$or$bottleneck.v:68$672 ($or).
Removed top 32 bits (of 64) from port B of cell TOP.$techmap\bot.$or$bottleneck.v:68$672 ($or).
Removed top 44 bits (of 64) from port Y of cell TOP.$techmap\bot.$or$bottleneck.v:68$672 ($or).
Removed top 12 bits (of 32) from port A of cell TOP.$techmap\bot.$or$bottleneck.v:68$672 ($or).
Removed top 12 bits (of 32) from port B of cell TOP.$techmap\bot.$or$bottleneck.v:68$672 ($or).
Removed top 29 bits (of 32) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:68$671 ($mux).
Removed top 30 bits (of 32) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:68$670 ($mux).
Removed top 16 bits (of 32) from port B of cell TOP.$techmap\bot.$and$bottleneck.v:66$669 ($and).
Removed top 16 bits (of 32) from port Y of cell TOP.$techmap\bot.$and$bottleneck.v:66$669 ($and).
Removed top 16 bits (of 32) from port A of cell TOP.$techmap\bot.$and$bottleneck.v:66$669 ($and).
Removed top 16 bits (of 32) from port Y of cell TOP.$techmap\bot.$or$bottleneck.v:66$667 ($or).
Removed top 16 bits (of 32) from port A of cell TOP.$techmap\bot.$or$bottleneck.v:66$667 ($or).
Removed top 16 bits (of 32) from port B of cell TOP.$techmap\bot.$or$bottleneck.v:66$667 ($or).
Removed top 16 bits (of 32) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:66$666 ($mux).
Removed top 16 bits (of 32) from port Y of cell TOP.$techmap\bot.$or$bottleneck.v:65$664 ($or).
Removed top 16 bits (of 32) from port A of cell TOP.$techmap\bot.$or$bottleneck.v:65$664 ($or).
Removed top 16 bits (of 32) from port B of cell TOP.$techmap\bot.$or$bottleneck.v:65$664 ($or).
Removed top 16 bits (of 32) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:65$663 ($mux).
Removed top 16 bits (of 32) from port Y of cell TOP.$techmap\bot.$or$bottleneck.v:64$661 ($or).
Removed top 16 bits (of 32) from port A of cell TOP.$techmap\bot.$or$bottleneck.v:64$661 ($or).
Removed top 16 bits (of 32) from port B of cell TOP.$techmap\bot.$or$bottleneck.v:64$661 ($or).
Removed top 16 bits (of 32) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:64$660 ($mux).
Removed top 16 bits (of 32) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:63$658 ($mux).
Removed top 31 bits (of 32) from port Y of cell TOP.$techmap\bot.$or$bottleneck.v:60$654 ($or).
Removed top 31 bits (of 32) from port A of cell TOP.$techmap\bot.$or$bottleneck.v:60$654 ($or).
Removed top 31 bits (of 32) from port B of cell TOP.$techmap\bot.$or$bottleneck.v:60$654 ($or).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:60$652 ($mux).
Removed top 31 bits (of 32) from port Y of cell TOP.$techmap\bot.$or$bottleneck.v:59$650 ($or).
Removed top 31 bits (of 32) from port A of cell TOP.$techmap\bot.$or$bottleneck.v:59$650 ($or).
Removed top 31 bits (of 32) from port B of cell TOP.$techmap\bot.$or$bottleneck.v:59$650 ($or).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:59$649 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:59$648 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.$ternary$bottleneck.v:58$646 ($mux).
Removed top 1 bits (of 2) from port B of cell TOP.$techmap\bot.$eq$bottleneck.v:53$640 ($eq).
Removed top 32 bits (of 64) from mux cell TOP.$techmap\arb.$ternary$arbiter.v:84$98 ($mux).
Removed top 44 bits (of 64) from port Y of cell TOP.$techmap\arb.$or$arbiter.v:74$80 ($or).
Removed top 44 bits (of 64) from port A of cell TOP.$techmap\arb.$or$arbiter.v:74$80 ($or).
Removed top 44 bits (of 64) from port B of cell TOP.$techmap\arb.$or$arbiter.v:74$80 ($or).
Removed top 44 bits (of 64) from mux cell TOP.$techmap\arb.$ternary$arbiter.v:74$79 ($mux).
Removed top 44 bits (of 64) from mux cell TOP.$techmap\arb.$ternary$arbiter.v:74$78 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:521$2088 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:514$2081 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:513$2080 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:508$2075 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:501$2068 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:499$2066 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:494$2061 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:487$2054 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:486$2053 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:481$2048 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:474$2041 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:472$2039 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:465$2032 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:464$2031 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:457$2024 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:455$2022 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:454$2021 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:453$2020 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:452$2019 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:451$2018 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:450$2017 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:449$2016 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:445$2012 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:444$2011 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:442$2009 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:440$2007 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:439$2006 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:438$2005 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:436$2003 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:434$2001 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:432$1999 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:430$1997 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:429$1996 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:428$1995 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:427$1994 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:426$1993 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:425$1992 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:424$1991 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:423$1990 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:422$1989 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:420$1987 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:413$1980 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:411$1978 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:408$1975 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:406$1973 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:405$1972 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:397$1964 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:388$1955 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:384$1951 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:382$1949 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:373$1940 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:367$1934 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:364$1931 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:362$1929 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:361$1928 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:360$1927 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:355$1922 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:354$1921 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:353$1920 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:351$1918 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:350$1917 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:347$1914 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:344$1911 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:340$1907 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:337$1904 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:334$1901 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:332$1899 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:328$1895 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:327$1894 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:326$1893 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:325$1892 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:324$1891 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:322$1889 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:320$1887 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:319$1886 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:318$1885 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:315$1882 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:312$1879 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:311$1878 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:308$1875 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:307$1874 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:302$1869 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:300$1867 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:297$1864 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:295$1862 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:294$1861 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:293$1860 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:291$1858 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:289$1856 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:288$1855 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:287$1854 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:284$1851 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:281$1848 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:280$1847 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:279$1846 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:274$1841 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:271$1838 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:269$1836 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:268$1835 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:267$1834 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:266$1833 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:265$1832 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:264$1831 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:263$1830 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:262$1829 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:261$1828 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:260$1827 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:259$1826 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:257$1824 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:245$1812 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:241$1808 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:240$1807 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:238$1805 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.s.$ternary$seq.v:234$1801 ($mux).
Removed top 2 bits (of 32) from port B of cell TOP.$techmap\cpu.s.$eq$seq.v:210$1668 ($eq).
Removed top 11 bits (of 32) from port B of cell TOP.$techmap\cpu.s.$eq$seq.v:207$1655 ($eq).
Removed top 25 bits (of 32) from port B of cell TOP.$techmap\cpu.s.$eq$seq.v:206$1654 ($eq).
Removed top 19 bits (of 32) from port B of cell TOP.$techmap\cpu.s.$eq$seq.v:201$1629 ($eq).
Removed top 16 bits (of 20) from port B of cell TOP.$techmap\cpu.s.$eq$seq.v:200$1627 ($eq).
Removed top 1 bits (of 7) from port B of cell TOP.$techmap\cpu.s.$eq$seq.v:179$1494 ($eq).
Removed top 5 bits (of 7) from port B of cell TOP.$techmap\cpu.s.$eq$seq.v:178$1493 ($eq).
Removed top 1 bits (of 3) from port B of cell TOP.$techmap\cpu.s.$eq$seq.v:135$1293 ($eq).
Removed top 1 bits (of 3) from port B of cell TOP.$techmap\cpu.s.$eq$seq.v:134$1291 ($eq).
Removed top 2 bits (of 3) from port B of cell TOP.$techmap\cpu.s.$eq$seq.v:134$1290 ($eq).
Removed top 1 bits (of 3) from port B of cell TOP.$techmap\cpu.s.$eq$seq.v:129$1285 ($eq).
Removed top 1 bits (of 3) from port B of cell TOP.$techmap\cpu.s.$eq$seq.v:128$1284 ($eq).
Removed top 2 bits (of 3) from port B of cell TOP.$techmap\cpu.s.$eq$seq.v:127$1283 ($eq).
Removed top 31 bits (of 32) from port B of cell TOP.$techmap\cpu.csrs.$add$polaris.v:565$1189 ($add).
Removed top 31 bits (of 32) from port B of cell TOP.$techmap\cpu.csrs.$add$polaris.v:563$1184 ($add).
Removed top 27 bits (of 32) from port Y of cell TOP.$techmap\cpu.csrs.$or$polaris.v:558$1180 ($or).
Removed top 27 bits (of 32) from port A of cell TOP.$techmap\cpu.csrs.$or$polaris.v:558$1180 ($or).
Removed top 27 bits (of 32) from port B of cell TOP.$techmap\cpu.csrs.$or$polaris.v:558$1180 ($or).
Removed top 27 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:558$1179 ($mux).
Removed top 27 bits (of 32) from port Y of cell TOP.$techmap\cpu.csrs.$or$polaris.v:557$1177 ($or).
Removed top 27 bits (of 32) from port A of cell TOP.$techmap\cpu.csrs.$or$polaris.v:557$1177 ($or).
Removed top 27 bits (of 32) from port B of cell TOP.$techmap\cpu.csrs.$or$polaris.v:557$1177 ($or).
Removed top 28 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:557$1176 ($mux).
Removed top 27 bits (of 32) from port Y of cell TOP.$techmap\cpu.csrs.$or$polaris.v:556$1175 ($or).
Removed top 27 bits (of 32) from port A of cell TOP.$techmap\cpu.csrs.$or$polaris.v:556$1175 ($or).
Removed top 27 bits (of 32) from port B of cell TOP.$techmap\cpu.csrs.$or$polaris.v:556$1175 ($or).
Removed top 30 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:556$1174 ($mux).
Removed top 27 bits (of 32) from port Y of cell TOP.$techmap\cpu.csrs.$or$polaris.v:555$1173 ($or).
Removed top 27 bits (of 32) from port A of cell TOP.$techmap\cpu.csrs.$or$polaris.v:555$1173 ($or).
Removed top 27 bits (of 32) from port B of cell TOP.$techmap\cpu.csrs.$or$polaris.v:555$1173 ($or).
Removed top 30 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:555$1172 ($mux).
Removed top 27 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:554$1171 ($mux).
Removed top 31 bits (of 32) from port Y of cell TOP.$techmap\cpu.csrs.$or$polaris.v:528$1140 ($or).
Removed top 31 bits (of 32) from port A of cell TOP.$techmap\cpu.csrs.$or$polaris.v:528$1140 ($or).
Removed top 31 bits (of 32) from port B of cell TOP.$techmap\cpu.csrs.$or$polaris.v:528$1140 ($or).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:528$1139 ($mux).
Removed top 31 bits (of 32) from port Y of cell TOP.$techmap\cpu.csrs.$or$polaris.v:527$1137 ($or).
Removed top 31 bits (of 32) from port A of cell TOP.$techmap\cpu.csrs.$or$polaris.v:527$1137 ($or).
Removed top 31 bits (of 32) from port B of cell TOP.$techmap\cpu.csrs.$or$polaris.v:527$1137 ($or).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:527$1136 ($mux).
Removed top 31 bits (of 32) from port Y of cell TOP.$techmap\cpu.csrs.$or$polaris.v:526$1134 ($or).
Removed top 31 bits (of 32) from port A of cell TOP.$techmap\cpu.csrs.$or$polaris.v:526$1134 ($or).
Removed top 31 bits (of 32) from port B of cell TOP.$techmap\cpu.csrs.$or$polaris.v:526$1134 ($or).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:526$1133 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:525$1132 ($mux).
Removed top 31 bits (of 32) from port Y of cell TOP.$techmap\cpu.csrs.$or$polaris.v:521$1128 ($or).
Removed top 31 bits (of 32) from port A of cell TOP.$techmap\cpu.csrs.$or$polaris.v:521$1128 ($or).
Removed top 31 bits (of 32) from port B of cell TOP.$techmap\cpu.csrs.$or$polaris.v:521$1128 ($or).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:521$1127 ($mux).
Removed top 31 bits (of 32) from port Y of cell TOP.$techmap\cpu.csrs.$or$polaris.v:520$1125 ($or).
Removed top 31 bits (of 32) from port A of cell TOP.$techmap\cpu.csrs.$or$polaris.v:520$1125 ($or).
Removed top 31 bits (of 32) from port B of cell TOP.$techmap\cpu.csrs.$or$polaris.v:520$1125 ($or).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:520$1124 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:519$1121 ($mux).
Removed top 31 bits (of 32) from port Y of cell TOP.$techmap\cpu.csrs.$or$polaris.v:513$1115 ($or).
Removed top 31 bits (of 32) from port A of cell TOP.$techmap\cpu.csrs.$or$polaris.v:513$1115 ($or).
Removed top 31 bits (of 32) from port B of cell TOP.$techmap\cpu.csrs.$or$polaris.v:513$1115 ($or).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:513$1114 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:512$1112 ($mux).
Removed top 52 bits (of 64) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:498$1079 ($mux).
Removed top 51 bits (of 64) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:495$1070 ($mux).
Removed top 3 bits (of 64) from mux cell TOP.$techmap\cpu.csrs.$ternary$polaris.v:493$1064 ($mux).
Removed top 2 bits (of 12) from port B of cell TOP.$techmap\cpu.csrs.$eq$polaris.v:430$1048 ($eq).
Removed top 2 bits (of 12) from port B of cell TOP.$techmap\cpu.csrs.$eq$polaris.v:429$1047 ($eq).
Removed top 2 bits (of 12) from port B of cell TOP.$techmap\cpu.csrs.$eq$polaris.v:428$1046 ($eq).
Removed top 2 bits (of 12) from port B of cell TOP.$techmap\cpu.csrs.$eq$polaris.v:427$1045 ($eq).
Removed top 2 bits (of 12) from port B of cell TOP.$techmap\cpu.csrs.$eq$polaris.v:426$1044 ($eq).
Removed top 2 bits (of 12) from port B of cell TOP.$techmap\cpu.csrs.$eq$polaris.v:425$1043 ($eq).
Removed top 2 bits (of 12) from port B of cell TOP.$techmap\cpu.csrs.$eq$polaris.v:424$1042 ($eq).
Removed top 2 bits (of 12) from port B of cell TOP.$techmap\cpu.csrs.$eq$polaris.v:423$1041 ($eq).
Removed top 2 bits (of 12) from port B of cell TOP.$techmap\cpu.csrs.$eq$polaris.v:422$1040 ($eq).
Removed top 2 bits (of 12) from port B of cell TOP.$techmap\cpu.csrs.$eq$polaris.v:421$1039 ($eq).
Removed top 63 bits (of 64) from mux cell TOP.$techmap\cpu.alu.$ternary$alu.v:65$41 ($mux).
Removed top 63 bits (of 64) from mux cell TOP.$techmap\cpu.alu.$ternary$alu.v:64$38 ($mux).
Removed top 30 bits (of 32) from mux cell TOP.$techmap\cpu.alu.$ternary$alu.v:57$30 ($mux).
Removed top 28 bits (of 32) from mux cell TOP.$techmap\cpu.alu.$ternary$alu.v:55$28 ($mux).
Removed top 24 bits (of 32) from mux cell TOP.$techmap\cpu.alu.$ternary$alu.v:53$26 ($mux).
Removed top 16 bits (of 32) from mux cell TOP.$techmap\cpu.alu.$ternary$alu.v:51$24 ($mux).
Removed top 63 bits (of 64) from port B of cell TOP.$techmap\cpu.alu.$add$alu.v:28$3 ($add).
Removed cell TOP.$techmap\cpu.xrs.column0.$procmux$2370 ($mux).
Removed cell TOP.$techmap\cpu.xrs.column0.$procmux$2367 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:150$575 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:147$572 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:136$561 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:123$548 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:112$537 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:102$527 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:101$526 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:91$516 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498 ($mux).
Removed top 31 bits (of 32) from mux cell TOP.$techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489 ($mux).
Removed cell TOP.$techmap\cpu.xrs.column1.$procmux$2367 ($mux).
Removed cell TOP.$techmap\cpu.xrs.column2.$procmux$2367 ($mux).
Removed cell TOP.$techmap\cpu.xrs.column3.$procmux$2367 ($mux).
Removed top 44 bits (of 64) from mux cell TOP.$techmap\cpu.$ternary$polaris.v:190$1028 ($mux).
Removed top 44 bits (of 64) from mux cell TOP.$techmap\cpu.$ternary$polaris.v:148$946 ($mux).
Removed top 44 bits (of 64) from wire TOP.$techmap\arb.$ternary$arbiter.v:74$78_Y.
Removed top 44 bits (of 64) from wire TOP.$techmap\arb.$ternary$arbiter.v:74$79_Y.
Removed top 16 bits (of 32) from wire TOP.$techmap\bot.$or$bottleneck.v:64$661_Y.
Removed top 16 bits (of 32) from wire TOP.$techmap\bot.$or$bottleneck.v:65$664_Y.
Removed top 16 bits (of 32) from wire TOP.$techmap\bot.$or$bottleneck.v:66$667_Y.
Removed top 44 bits (of 64) from wire TOP.$techmap\bot.$or$bottleneck.v:68$672_Y.
Removed top 44 bits (of 64) from wire TOP.$techmap\bot.$or$bottleneck.v:68$674_Y.
Removed top 44 bits (of 64) from wire TOP.$techmap\bot.$or$bottleneck.v:69$675_Y.
Removed top 56 bits (of 64) from wire TOP.$techmap\bot.$ternary$bottleneck.v:84$686_Y.
Removed top 48 bits (of 64) from wire TOP.$techmap\bot.$ternary$bottleneck.v:86$697_Y.
Removed top 32 bits (of 64) from wire TOP.$techmap\bot.$ternary$bottleneck.v:88$708_Y.
Removed top 31 bits (of 32) from wire TOP.$techmap\bot.$ternary$bottleneck.v:91$715_Y.
Removed top 31 bits (of 32) from wire TOP.$techmap\bot.$ternary$bottleneck.v:91$716_Y.
Removed top 27 bits (of 32) from wire TOP.$techmap\cpu.$or$polaris.v:178$1003_Y.
Removed top 59 bits (of 64) from wire TOP.$techmap\cpu.$ternary$polaris.v:140$936_Y.
Removed top 59 bits (of 64) from wire TOP.$techmap\cpu.$ternary$polaris.v:171$983_Y.
Removed top 27 bits (of 32) from wire TOP.$techmap\cpu.$ternary$polaris.v:179$1005_Y.
Removed top 31 bits (of 32) from wire TOP.$techmap\cpu.csrs.$or$polaris.v:519$1122_Y.
Removed top 31 bits (of 32) from wire TOP.$techmap\cpu.csrs.$or$polaris.v:520$1125_Y.
Removed top 27 bits (of 32) from wire TOP.$techmap\cpu.csrs.$or$polaris.v:555$1173_Y.
Removed top 27 bits (of 32) from wire TOP.$techmap\cpu.csrs.$or$polaris.v:556$1175_Y.
Removed top 27 bits (of 32) from wire TOP.$techmap\cpu.csrs.$or$polaris.v:557$1177_Y.
Removed top 3 bits (of 64) from wire TOP.$techmap\cpu.csrs.$ternary$polaris.v:493$1064_Y.
Removed top 51 bits (of 64) from wire TOP.$techmap\cpu.csrs.$ternary$polaris.v:495$1070_Y.
Removed top 52 bits (of 64) from wire TOP.$techmap\cpu.csrs.$ternary$polaris.v:498$1079_Y.
Removed top 31 bits (of 32) from wire TOP.$techmap\cpu.csrs.$ternary$polaris.v:512$1112_Y.
Removed top 31 bits (of 32) from wire TOP.$techmap\cpu.csrs.$ternary$polaris.v:513$1114_Y.
Removed top 31 bits (of 32) from wire TOP.$techmap\cpu.csrs.$ternary$polaris.v:520$1124_Y.
Removed top 31 bits (of 32) from wire TOP.$techmap\cpu.csrs.$ternary$polaris.v:528$1139_Y.
Removed top 27 bits (of 32) from wire TOP.$techmap\cpu.csrs.$ternary$polaris.v:558$1179_Y.
Removed top 24 bits (of 32) from wire TOP.$techmap\wb_bridge.$ternary$bridge.v:112$842_Y.
Removed top 24 bits (of 32) from wire TOP.$techmap\wb_bridge.$ternary$bridge.v:113$844_Y.
Removed top 44 bits (of 64) from wire TOP.arb.iadr_i.
Removed top 52 bits (of 64) from wire TOP.cpu.csrs.csrd_mie.
Removed top 56 bits (of 64) from wire TOP.cpu.csrs.csrd_mstatus.
Removed top 59 bits (of 64) from wire TOP.cpu.imm5.

12.7.7. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module TOP:
  creating $macc model for $techmap\cpu.$add$polaris.v:182$1010 ($add).
  creating $macc model for $techmap\cpu.alu.$add$alu.v:28$2 ($add).
  creating $macc model for $techmap\cpu.alu.$add$alu.v:28$3 ($add).
  creating $macc model for $techmap\cpu.alu.$add$alu.v:30$4 ($add).
  creating $macc model for $techmap\cpu.alu.$add$alu.v:30$5 ($add).
  creating $macc model for $techmap\cpu.csrs.$add$polaris.v:563$1184 ($add).
  creating $macc model for $techmap\cpu.csrs.$add$polaris.v:565$1189 ($add).
  merging $macc model for $techmap\cpu.alu.$add$alu.v:30$4 into $techmap\cpu.alu.$add$alu.v:30$5.
  merging $macc model for $techmap\cpu.alu.$add$alu.v:28$2 into $techmap\cpu.alu.$add$alu.v:28$3.
  creating $alu model for $macc $techmap\cpu.alu.$add$alu.v:30$5.
  creating $alu model for $macc $techmap\cpu.csrs.$add$polaris.v:563$1184.
  creating $alu model for $macc $techmap\cpu.alu.$add$alu.v:28$3.
  creating $alu model for $macc $techmap\cpu.csrs.$add$polaris.v:565$1189.
  creating $alu model for $macc $techmap\cpu.$add$polaris.v:182$1010.
  creating $alu cell for $techmap\cpu.$add$polaris.v:182$1010: $auto$alumacc.cc:470:replace_alu$2460
  creating $alu cell for $techmap\cpu.csrs.$add$polaris.v:565$1189: $auto$alumacc.cc:470:replace_alu$2463
  creating $alu cell for $techmap\cpu.alu.$add$alu.v:28$3: $auto$alumacc.cc:470:replace_alu$2466
  creating $alu cell for $techmap\cpu.csrs.$add$polaris.v:563$1184: $auto$alumacc.cc:470:replace_alu$2469
  creating $alu cell for $techmap\cpu.alu.$add$alu.v:30$5: $auto$alumacc.cc:470:replace_alu$2472
  created 5 $alu and 0 $macc cells.

12.7.8. Executing SHARE pass (SAT-based resource sharing).

12.7.9. Executing OPT pass (performing simple optimizations).

12.7.9.1. Executing OPT_EXPR pass (perform const folding).

12.7.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
  Cell `$techmap\cpu.xrs.column0.$procdff$2385' is identical to cell `$techmap\cpu.xrs.$procdff$2388'.
    Redirecting output \Q: $techmap\cpu.xrs.column0.$memwr$\mem$xrs.v:71$2345_ADDR = \cpu.xrs.addr
    Removing $dff cell `$techmap\cpu.xrs.column0.$procdff$2385' from module `\TOP'.
Removed a total of 1 cells.

12.7.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:73$76
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$78 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$79 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$90 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$91 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2376 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2379 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2382 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:58$646 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$648 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$649 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:60$652 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:63$658 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:64$660 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:65$663 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:66$666 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:66$668 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$670 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$671 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$673 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:69$677 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:83$681 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:84$686 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:85$691 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:86$697 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:87$702 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:88$708 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:89$712 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$715 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$716 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:101$526 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:102$527 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:112$537 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:123$548 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:136$561 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:147$572 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:150$575 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:91$516 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:138$931 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:139$933 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:140$936 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:143$942 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:151$949 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:160$955 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:161$957 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:162$960 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:163$963 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:165$966 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:166$968 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:167$971 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:168$974 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:169$977 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:170$980 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:171$983 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:172$986 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:173$989 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:174$991 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:175$994 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:176$997 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:177$1000 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:178$1002 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:179$1005 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:181$1009 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:182$1011 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:183$1013 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:184$1015 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:185$1017 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:186$1019 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:188$1023 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:189$1025 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:192$1030 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:193$1031 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:33$6 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:38$11 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:39$13 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:47$21 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:50$23
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:52$25
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:54$27
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:56$29
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:58$31 (pure)
      Removing pure flag from root mux $techmap\cpu.alu.$ternary$alu.v:50$23.
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:62$35 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:64$38 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:65$41 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:490$1056 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:493$1064 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:495$1070 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:498$1079 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:499$1082 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:500$1085 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:501$1088 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:502$1091 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:503$1094 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:505$1100 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:507$1106 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:512$1112 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:513$1114 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:519$1121 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:520$1124 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:521$1127 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:525$1132 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:526$1133 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:527$1136 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:528$1139 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:535$1145 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:536$1147 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:537$1150 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:540$1153 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:545$1158 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:546$1160 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:548$1166 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:554$1171 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:555$1172 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:556$1174 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:557$1176 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:558$1179 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:561$1182 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:563$1186 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:565$1191 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:566$1196 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:234$1801 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:238$1805 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:240$1807 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:241$1808 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:245$1812 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:257$1824 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:259$1826 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:260$1827 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:261$1828 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:262$1829 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:263$1830 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:264$1831 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:265$1832 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:266$1833 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:267$1834 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:268$1835 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:269$1836 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:271$1838 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:274$1841 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:279$1846 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:280$1847 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:281$1848 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:284$1851 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:287$1854 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:288$1855 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:289$1856 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:291$1858 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:293$1860 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:294$1861 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:295$1862 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:297$1864 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:300$1867 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:302$1869 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:307$1874 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:308$1875 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:311$1878 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:312$1879 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:315$1882 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:318$1885 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:319$1886 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:320$1887 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:322$1889 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:324$1891 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:325$1892 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:326$1893 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:327$1894 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:328$1895 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:332$1899 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:334$1901 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:337$1904 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:340$1907 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:344$1911 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:347$1914 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:350$1917 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:351$1918 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:353$1920 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:354$1921 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:355$1922 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:360$1927 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:361$1928 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:362$1929 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:364$1931 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:367$1934 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:373$1940 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:382$1949 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:384$1951 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:388$1955 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:397$1964 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:405$1972 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:406$1973 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:408$1975 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:411$1978 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:413$1980 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:420$1987 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:422$1989 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:423$1990 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:424$1991 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:425$1992 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:426$1993 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:427$1994 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:428$1995 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:429$1996 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:430$1997 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:432$1999 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:434$2001 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:436$2003 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:438$2005 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:439$2006 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:440$2007 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:442$2009 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:444$2011 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:445$2012 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:449$2016 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:450$2017 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:451$2018 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:452$2019 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:453$2020 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:454$2021 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:455$2022 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:457$2024 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:464$2031 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:465$2032 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:472$2039 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:474$2041 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:481$2048 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:486$2053 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:487$2054 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:494$2061 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:499$2066 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:501$2068 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:508$2075 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:513$2080 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:514$2081 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:521$2088 (pure)
    Root of a mux tree: $techmap\cpu.xrs.$ternary$xrs.v:23$2344
    Root of a mux tree: $techmap\cpu.xrs.column0.$procmux$2364 (pure)
    Root of a mux tree: $procmux$2373 (pure)
    Root of a mux tree: $techmap\wb_bridge.$ternary$bridge.v:112$842 (pure)
    Root of a mux tree: $techmap\wb_bridge.$ternary$bridge.v:113$844 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:50$23 (rerun as non-pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

12.7.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TOP.
Performed a total of 0 changes.

12.7.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.7.9.6. Executing OPT_RMDFF pass (remove dff with constant values).

12.7.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..
  removing unused `$add' cell `$techmap\cpu.alu.$add$alu.v:30$4'.
  removing unused `$add' cell `$techmap\cpu.alu.$add$alu.v:28$2'.

12.7.9.8. Executing OPT_EXPR pass (perform const folding).

12.7.9.9. Rerunning OPT passes. (Maybe there is more to do..)

12.7.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$2373 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:73$76
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$78 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$79 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$90 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$91 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2376 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2379 (pure)
    Root of a mux tree: $techmap\bot.$procmux$2382 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:58$646 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$648 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$649 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:60$652 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:63$658 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:64$660 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:65$663 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:66$666 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:66$668 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$670 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$671 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$673 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:69$677 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:83$681 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:84$686 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:85$691 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:86$697 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:87$702 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:88$708 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:89$712 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$715 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$716 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:101$526 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:102$527 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:112$537 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:123$548 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:136$561 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:147$572 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:150$575 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:91$516 (pure)
    Root of a mux tree: $techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:138$931 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:139$933 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:140$936 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:143$942 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:151$949 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:160$955 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:161$957 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:162$960 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:163$963 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:165$966 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:166$968 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:167$971 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:168$974 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:169$977 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:170$980 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:171$983 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:172$986 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:173$989 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:174$991 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:175$994 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:176$997 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:177$1000 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:178$1002 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:179$1005 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:181$1009 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:182$1011 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:183$1013 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:184$1015 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:185$1017 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:186$1019 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:188$1023 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:189$1025 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:192$1030 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:193$1031 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:33$6 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:38$11 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:39$13 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:47$21 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:50$23
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:52$25
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:54$27
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:56$29
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:58$31 (pure)
      Removing pure flag from root mux $techmap\cpu.alu.$ternary$alu.v:50$23.
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:62$35 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:64$38 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:65$41 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:490$1056 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:493$1064 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:495$1070 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:498$1079 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:499$1082 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:500$1085 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:501$1088 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:502$1091 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:503$1094 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:505$1100 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:507$1106 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:512$1112 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:513$1114 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:519$1121 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:520$1124 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:521$1127 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:525$1132 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:526$1133 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:527$1136 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:528$1139 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:535$1145 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:536$1147 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:537$1150 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:540$1153 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:545$1158 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:546$1160 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:548$1166 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:554$1171 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:555$1172 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:556$1174 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:557$1176 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:558$1179 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:561$1182 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:563$1186 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:565$1191 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:566$1196 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:234$1801 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:238$1805 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:240$1807 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:241$1808 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:245$1812 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:257$1824 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:259$1826 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:260$1827 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:261$1828 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:262$1829 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:263$1830 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:264$1831 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:265$1832 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:266$1833 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:267$1834 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:268$1835 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:269$1836 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:271$1838 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:274$1841 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:279$1846 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:280$1847 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:281$1848 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:284$1851 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:287$1854 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:288$1855 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:289$1856 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:291$1858 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:293$1860 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:294$1861 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:295$1862 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:297$1864 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:300$1867 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:302$1869 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:307$1874 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:308$1875 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:311$1878 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:312$1879 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:315$1882 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:318$1885 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:319$1886 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:320$1887 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:322$1889 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:324$1891 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:325$1892 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:326$1893 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:327$1894 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:328$1895 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:332$1899 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:334$1901 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:337$1904 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:340$1907 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:344$1911 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:347$1914 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:350$1917 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:351$1918 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:353$1920 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:354$1921 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:355$1922 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:360$1927 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:361$1928 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:362$1929 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:364$1931 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:367$1934 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:373$1940 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:382$1949 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:384$1951 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:388$1955 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:397$1964 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:405$1972 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:406$1973 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:408$1975 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:411$1978 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:413$1980 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:420$1987 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:422$1989 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:423$1990 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:424$1991 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:425$1992 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:426$1993 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:427$1994 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:428$1995 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:429$1996 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:430$1997 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:432$1999 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:434$2001 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:436$2003 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:438$2005 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:439$2006 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:440$2007 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:442$2009 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:444$2011 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:445$2012 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:449$2016 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:450$2017 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:451$2018 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:452$2019 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:453$2020 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:454$2021 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:455$2022 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:457$2024 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:464$2031 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:465$2032 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:472$2039 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:474$2041 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:481$2048 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:486$2053 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:487$2054 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:494$2061 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:499$2066 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:501$2068 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:508$2075 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:513$2080 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:514$2081 (pure)
    Root of a mux tree: $techmap\cpu.s.$ternary$seq.v:521$2088 (pure)
    Root of a mux tree: $techmap\cpu.xrs.$ternary$xrs.v:23$2344
    Root of a mux tree: $techmap\cpu.xrs.column0.$procmux$2364 (pure)
    Root of a mux tree: $techmap\wb_bridge.$ternary$bridge.v:112$842 (pure)
    Root of a mux tree: $techmap\wb_bridge.$ternary$bridge.v:113$844 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:50$23 (rerun as non-pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

12.7.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TOP.
Performed a total of 0 changes.

12.7.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.7.9.13. Executing OPT_RMDFF pass (remove dff with constant values).

12.7.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..

12.7.9.15. Executing OPT_EXPR pass (perform const folding).

12.7.9.16. Finished OPT passes. (There is nothing left to do.)

12.7.10. Executing FSM pass (extract and optimize FSM).

12.7.10.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking TOP.$techmap\cpu.xrs.column0.$memwr$\mem$xrs.v:71$2345_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking TOP.bot.hold1 as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking TOP.bot.hold2 as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking TOP.bot.hold3 as FSM state register:
    Users of register don't seem to benefit from recoding.

12.7.10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.7.10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.7.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..

12.7.10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.7.10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.7.10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.7.10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

12.7.11. Executing OPT pass (performing simple optimizations).

12.7.11.1. Executing OPT_EXPR pass (perform const folding).

12.7.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.7.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

12.7.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..

12.7.11.5. Finished fast OPT passes.

12.7.12. Executing MEMORY pass.

12.7.12.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$techmap\cpu.xrs.column0.$memwr$\mem$xrs.v:71$2351' in module `\TOP': merged $dff to cell.
Checking cell `$techmap\cpu.xrs.column1.$memwr$\mem$xrs.v:71$2351' in module `\TOP': merged $dff to cell.
Checking cell `$techmap\cpu.xrs.column2.$memwr$\mem$xrs.v:71$2351' in module `\TOP': merged $dff to cell.
Checking cell `$techmap\cpu.xrs.column3.$memwr$\mem$xrs.v:71$2351' in module `\TOP': merged $dff to cell.
Checking cell `$techmap\cpu.xrs.column0.$memrd$\mem$xrs.v:72$2350' in module `\TOP': merged data $dff to cell.
Checking cell `$techmap\cpu.xrs.column1.$memrd$\mem$xrs.v:72$2350' in module `\TOP': merged data $dff to cell.
Checking cell `$techmap\cpu.xrs.column2.$memrd$\mem$xrs.v:72$2350' in module `\TOP': merged data $dff to cell.
Checking cell `$techmap\cpu.xrs.column3.$memrd$\mem$xrs.v:72$2350' in module `\TOP': merged data $dff to cell.

12.7.12.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..
  removing unused `$dff' cell `$techmap\cpu.xrs.column0.$procdff$2386'.
  removing unused `$dff' cell `$techmap\cpu.xrs.column0.$procdff$2387'.
  removing unused `$dff' cell `$techmap\cpu.xrs.column0.$procdff$2384'.
  removing unused `$dff' cell `$techmap\cpu.xrs.column1.$procdff$2386'.
  removing unused `$dff' cell `$techmap\cpu.xrs.column1.$procdff$2384'.
  removing unused `$dff' cell `$techmap\cpu.xrs.column2.$procdff$2386'.
  removing unused `$dff' cell `$techmap\cpu.xrs.column2.$procdff$2384'.
  removing unused `$dff' cell `$techmap\cpu.xrs.column3.$procdff$2386'.
  removing unused `$dff' cell `$techmap\cpu.xrs.column3.$procdff$2384'.

12.7.12.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

12.7.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..

12.7.12.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\cpu.xrs.column0.mem' in module `\TOP':
  $techmap\cpu.xrs.column0.$memwr$\mem$xrs.v:71$2351 ($memwr)
  $techmap\cpu.xrs.column0.$memrd$\mem$xrs.v:72$2350 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\cpu.xrs.column1.mem' in module `\TOP':
  $techmap\cpu.xrs.column1.$memwr$\mem$xrs.v:71$2351 ($memwr)
  $techmap\cpu.xrs.column1.$memrd$\mem$xrs.v:72$2350 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\cpu.xrs.column2.mem' in module `\TOP':
  $techmap\cpu.xrs.column2.$memwr$\mem$xrs.v:71$2351 ($memwr)
  $techmap\cpu.xrs.column2.$memrd$\mem$xrs.v:72$2350 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\cpu.xrs.column3.mem' in module `\TOP':
  $techmap\cpu.xrs.column3.$memwr$\mem$xrs.v:71$2351 ($memwr)
  $techmap\cpu.xrs.column3.$memrd$\mem$xrs.v:72$2350 ($memrd)

12.7.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..

12.8. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing TOP.cpu.xrs.column0.mem:
  Properties: ports=2 bits=512 rports=1 wports=1 dbits=16 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3584 efficiency=12
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3840 efficiency=6
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3968 efficiency=3
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Selecting best of 3 rules:
    Efficiency for rule 2.2: efficiency=3, cells=4, acells=1
    Efficiency for rule 2.1: efficiency=6, cells=2, acells=1
    Efficiency for rule 1.1: efficiency=12, cells=1, acells=1
    Selected rule 1.1 with efficiency 12.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: cpu.xrs.column0.mem.0.0.0
Processing TOP.cpu.xrs.column1.mem:
  Properties: ports=2 bits=512 rports=1 wports=1 dbits=16 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3584 efficiency=12
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3840 efficiency=6
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3968 efficiency=3
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Selecting best of 3 rules:
    Efficiency for rule 2.2: efficiency=3, cells=4, acells=1
    Efficiency for rule 2.1: efficiency=6, cells=2, acells=1
    Efficiency for rule 1.1: efficiency=12, cells=1, acells=1
    Selected rule 1.1 with efficiency 12.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: cpu.xrs.column1.mem.0.0.0
Processing TOP.cpu.xrs.column2.mem:
  Properties: ports=2 bits=512 rports=1 wports=1 dbits=16 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3584 efficiency=12
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3840 efficiency=6
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3968 efficiency=3
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Selecting best of 3 rules:
    Efficiency for rule 2.2: efficiency=3, cells=4, acells=1
    Efficiency for rule 2.1: efficiency=6, cells=2, acells=1
    Efficiency for rule 1.1: efficiency=12, cells=1, acells=1
    Selected rule 1.1 with efficiency 12.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: cpu.xrs.column2.mem.0.0.0
Processing TOP.cpu.xrs.column3.mem:
  Properties: ports=2 bits=512 rports=1 wports=1 dbits=16 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3584 efficiency=12
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3840 efficiency=6
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3968 efficiency=3
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Selecting best of 3 rules:
    Efficiency for rule 2.2: efficiency=3, cells=4, acells=1
    Efficiency for rule 2.1: efficiency=6, cells=2, acells=1
    Efficiency for rule 1.1: efficiency=12, cells=1, acells=1
    Selected rule 1.1 with efficiency 12.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \cpu_clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \cpu_clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: cpu.xrs.column3.mem.0.0.0

12.9. Executing TECHMAP pass (map to technology primitives).

12.9.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

12.9.2. Executing AST frontend in derive mode using pre-parsed AST for module `\$__ICE40_RAM4K_M0'.
Parameter \CLKPOL2 = 1
Parameter \CLKPOL3 = 1
Generating RTLIL representation for module `$paramod\$__ICE40_RAM4K_M0\CLKPOL2=1\CLKPOL3=1'.

12.9.3. Continuing TECHMAP pass.
Mapping TOP.cpu.xrs.column1.mem.0.0.0 using $paramod\$__ICE40_RAM4K_M0\CLKPOL2=1\CLKPOL3=1.
Mapping TOP.cpu.xrs.column3.mem.0.0.0 using $paramod\$__ICE40_RAM4K_M0\CLKPOL2=1\CLKPOL3=1.
Mapping TOP.cpu.xrs.column2.mem.0.0.0 using $paramod\$__ICE40_RAM4K_M0\CLKPOL2=1\CLKPOL3=1.
Mapping TOP.cpu.xrs.column0.mem.0.0.0 using $paramod\$__ICE40_RAM4K_M0\CLKPOL2=1\CLKPOL3=1.

12.9.4. Executing AST frontend in derive mode using pre-parsed AST for module `\$__ICE40_RAM4K'.
Parameter \READ_MODE = 0
Parameter \WRITE_MODE = 0
Parameter \NEGCLK_R = 1'0
Parameter \NEGCLK_W = 1'0
Parameter \INIT_0 = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_1 = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_2 = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_3 = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_4 = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_5 = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_6 = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_7 = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_8 = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_9 = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_A = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_B = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_C = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_D = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_E = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Parameter \INIT_F = 256'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Generating RTLIL representation for module `$paramod$4200c10d2e07b3359d49ca78f8f6d43ec6f7e316\$__ICE40_RAM4K'.

12.9.5. Continuing TECHMAP pass.
Mapping TOP.cpu.xrs.column1.mem.0.0.0 using $paramod$4200c10d2e07b3359d49ca78f8f6d43ec6f7e316\$__ICE40_RAM4K.
Mapping TOP.cpu.xrs.column3.mem.0.0.0 using $paramod$4200c10d2e07b3359d49ca78f8f6d43ec6f7e316\$__ICE40_RAM4K.
Mapping TOP.cpu.xrs.column2.mem.0.0.0 using $paramod$4200c10d2e07b3359d49ca78f8f6d43ec6f7e316\$__ICE40_RAM4K.
Mapping TOP.cpu.xrs.column0.mem.0.0.0 using $paramod$4200c10d2e07b3359d49ca78f8f6d43ec6f7e316\$__ICE40_RAM4K.
No more expansions possible.

12.10. Executing OPT pass (performing simple optimizations).

12.10.1. Executing OPT_EXPR pass (perform const folding).
Setting undriven signal in TOP to undef: \arb.xadr_o [40]
Setting undriven signal in TOP to undef: \wb_bridge.od5 [2]
Setting undriven signal in TOP to undef: \bot.s_dat_16s [4]
Setting undriven signal in TOP to undef: \wb_bridge.od6 [1]
Setting undriven signal in TOP to undef: \wb_bridge.od2 [4:0]
Setting undriven signal in TOP to undef: \wb_bridge.od2 [7:5]
Setting undriven signal in TOP to undef: \wb_bridge.od3
Setting undriven signal in TOP to undef: \wb_bridge.od4 [4:0]
Setting undriven signal in TOP to undef: \wb_bridge.od5 [5]
Setting undriven signal in TOP to undef: \wb_bridge.od4 [7]
Setting undriven signal in TOP to undef: \wb_bridge.sel5
Setting undriven signal in TOP to undef: \bot.s_dat_16s [0]
Setting undriven signal in TOP to undef: \wb_bridge.od5 [1]
Setting undriven signal in TOP to undef: \arb.xadr_o [32:29]
Setting undriven signal in TOP to undef: \wb_bridge.od4 [6]
Setting undriven signal in TOP to undef: \wb_bridge.od6 [4]
Setting undriven signal in TOP to undef: \wb_bridge.od6 [6]
Setting undriven signal in TOP to undef: \wb_bridge.od7 [0]
Setting undriven signal in TOP to undef: \wb_bridge.od7 [2]
Setting undriven signal in TOP to undef: \wb_bridge.od7 [4]
Setting undriven signal in TOP to undef: \wb_bridge.od7 [6]
Setting undriven signal in TOP to undef: \wb_bridge.sel2
Setting undriven signal in TOP to undef: \wb_bridge.sel4
Setting undriven signal in TOP to undef: \arb.xadr_o [34]
Setting undriven signal in TOP to undef: \arb.xadr_o [22]
Setting undriven signal in TOP to undef: \bot.s_dat_16s [14:11]
Setting undriven signal in TOP to undef: \bot.s_dat_16s [63]
Setting undriven signal in TOP to undef: \arb.xadr_o [21]
Setting undriven signal in TOP to undef: \arb.xadr_o [23]
Setting undriven signal in TOP to undef: \wb_bridge.od7 [5]
Setting undriven signal in TOP to undef: \wb_bridge.od7 [7]
Setting undriven signal in TOP to undef: \wb_bridge.od6 [3]
Setting undriven signal in TOP to undef: \wb_bridge.od4 [5]
Setting undriven signal in TOP to undef: \wb_bridge.od6 [7]
Setting undriven signal in TOP to undef: \wb_bridge.od6 [2]
Setting undriven signal in TOP to undef: \wb_bridge.od6 [5]
Setting undriven signal in TOP to undef: \wb_bridge.od5 [0]
Setting undriven signal in TOP to undef: \wb_bridge.sel6
Setting undriven signal in TOP to undef: \wb_bridge.od5 [6]
Setting undriven signal in TOP to undef: \wb_bridge.od5 [3]
Setting undriven signal in TOP to undef: \wb_bridge.od5 [7]
Setting undriven signal in TOP to undef: \wb_bridge.od6 [0]
Setting undriven signal in TOP to undef: \wb_bridge.od5 [4]
Setting undriven signal in TOP to undef: \arb.xadr_o [53]
Setting undriven signal in TOP to undef: \bot.s_dat_16s [10:5]
Setting undriven signal in TOP to undef: \arb.xadr_o [46]
Setting undriven signal in TOP to undef: \wb_bridge.od7 [1]
Setting undriven signal in TOP to undef: \wb_bridge.od7 [3]
Setting undriven signal in TOP to undef: \wb_bridge.sel7
Setting undriven signal in TOP to undef: \arb.xadr_o [45]
Setting undriven signal in TOP to undef: \arb.xadr_o [41]
Setting undriven signal in TOP to undef: \arb.xadr_o [44:42]
Setting undriven signal in TOP to undef: \arb.xadr_o [28]
Setting undriven signal in TOP to undef: \arb.xadr_o [24]
Setting undriven signal in TOP to undef: \bot.s_dat_16s [1]
Setting undriven signal in TOP to undef: \bot.s_dat_16s [3:2]
Setting undriven signal in TOP to undef: \wb_bridge.sel3
Setting undriven signal in TOP to undef: \arb.xadr_o [52:47]
Setting undriven signal in TOP to undef: \arb.xadr_o [39:35]
Setting undriven signal in TOP to undef: \arb.xadr_o [20]
Setting undriven signal in TOP to undef: \arb.xadr_o [33]
Setting undriven signal in TOP to undef: \arb.xadr_o [26:25]
Setting undriven signal in TOP to undef: \arb.xadr_o [27]
Setting undriven signal in TOP to undef: \arb.xadr_o [62:54]
Setting undriven signal in TOP to undef: \arb.xadr_o [63]
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:439$2006' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isEBreak = \cpu.s.R1479'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:442$2009' (mux_sel01) in module `\TOP' with constant driver `\cpu.csrs.mcause_3 = \cpu.s.R1481'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:438$2005' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isECall = \cpu.s.R1478'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:440$2007' (mux_sel01) in module `\TOP' with constant driver `\cpu.csrs.mcause_11 = \cpu.s.R1480'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:257$1824' (mux_sel01) in module `\TOP' with constant driver `\cpu.csrs.mcause_2 = \cpu.s.R1397'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:238$1805' (mux_sel01) in module `\TOP' with constant driver `\arb.icyc_i = \cpu.s.R1392'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:361$1928' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isStore = \cpu.s.R1451'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:397$1964' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1669 = \cpu.s.R1459'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:388$1955' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1660 = \cpu.s.R1458'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:360$1927' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isLoad = \cpu.s.R1450'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:373$1940' (mux_sel01) in module `\TOP' with constant driver `\cpu.rdat_ddat = \cpu.s.R1455'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:367$1934' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1639 = \cpu.s.R1454'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:268$1835' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isOpR = \cpu.s.R1407'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:302$1869' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1574 = \cpu.s.R1424'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:325$1892' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1597 = \cpu.s.R1435'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:267$1834' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isOpI = \cpu.s.R1406'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:274$1841' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1546 = \cpu.s.R1410'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:294$1861' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1566 = \cpu.s.R1420'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:266$1833' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.fn3_is_111 = \cpu.s.R1405'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:454$2021' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isCsrRcI = \cpu.s.R1489'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:521$2088' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1793 = \cpu.s.R1505'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:262$1829' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.fn3_is_011 = \cpu.s.R1401'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:451$2018' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isCsrRc = \cpu.s.R1486'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:508$2075' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1780 = \cpu.s.R1502'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:265$1832' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.fn3_is_110 = \cpu.s.R1404'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:453$2020' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isCsrRsI = \cpu.s.R1488'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:494$2061' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1766 = \cpu.s.R1499'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:261$1828' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.fn3_is_010 = \cpu.s.R1400'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:450$2017' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isCsrRs = \cpu.s.R1485'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:481$2048' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1753 = \cpu.s.R1496'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:324$1891' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1596 = \cpu.s.R1434'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:322$1889' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1594 = \cpu.s.R1433'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:293$1860' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1565 = \cpu.s.R1419'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:291$1858' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1563 = \cpu.s.R1418'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:405$1972' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isBr = \cpu.s.R1460'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:413$1980' (mux_sel01) in module `\TOP' with constant driver `\cpu.alub_imm12sb = \cpu.s.R1464'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:315$1882' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1587 = \cpu.s.R1429'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:312$1879' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1584 = \cpu.s.R1428'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:259$1826' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.fn3_is_000 = \cpu.s.R1398'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:308$1875' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1580 = \cpu.s.R1426'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:284$1851' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1556 = \cpu.s.R1414'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:281$1848' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1553 = \cpu.s.R1413'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:420$1987' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1692 = \cpu.s.R1465'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:350$1917' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isLuiAuipc = \cpu.s.R1445'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:355$1922' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1627 = \cpu.s.R1449'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:327$1894' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isJal = \cpu.s.R1437'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:347$1914' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1619 = \cpu.s.R1444'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:326$1893' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isJalr = \cpu.s.R1436'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:337$1904' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1609 = \cpu.s.R1441'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:307$1874' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1579 = \cpu.s.R1425'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:279$1846' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1551 = \cpu.s.R1411'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:264$1831' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.fn3_is_101 = \cpu.s.R1403'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:320$1887' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1592 = \cpu.s.R1432'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:289$1856' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1561 = \cpu.s.R1417'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:263$1830' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.fn3_is_100 = \cpu.s.R1402'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:318$1885' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1590 = \cpu.s.R1430'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:287$1854' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1559 = \cpu.s.R1415'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:260$1827' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.fn3_is_001 = \cpu.s.R1399'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:311$1878' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1583 = \cpu.s.R1427'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:280$1847' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1552 = \cpu.s.R1412'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:319$1886' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1591 = \cpu.s.R1431'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:288$1855' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1560 = \cpu.s.R1416'.
Replacing $or cell `$techmap\cpu.alu.$or$alu.v:67$46' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2501': A=$techmap\cpu.alu.$or$alu.v:67$45_Y [0], B=\cpu.alu.isLTS
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2503': A=63'000000000000000000000000000000000000000000000000000000000000000, B=$techmap\cpu.alu.$or$alu.v:67$45_Y [63:1]
Replacing $or cell `$techmap\cpu.alu.$or$alu.v:67$47' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2505': A=$techmap\cpu.alu.$or$alu.v:67$46_Y [0], B=\cpu.alu.isLTU
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2507': A=63'000000000000000000000000000000000000000000000000000000000000000, B=$techmap\cpu.alu.$or$alu.v:67$46_Y [63:1]
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:139$564' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1484 = \bot.bs.R1405'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:125$550' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1470 = \bot.bs.R1403'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:113$538' (mux_sel01) in module `\TOP' with constant driver `\bot.Hold2_SDatI = \bot.bs.R1401'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:103$528' (mux_sel01) in module `\TOP' with constant driver `\bot.Hold3_SDatI = \bot.bs.R1399'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:93$518' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1438 = \bot.bs.R1396'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:82$507' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1427 = \bot.bs.R1394'.
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:59$649' (mux_sel01) in module `\TOP' with constant driver `$techmap\bot.$ternary$bottleneck.v:59$649_Y [0] = \bot.SStbO_1'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:73$498' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1418 = \bot.bs.R1393'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:64$489' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1409 = \bot.bs.R1392'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:150$575' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1495 = \bot.bs.R1407'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:102$527' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1447 = \bot.bs.R1398'.
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:91$716' (mux_sel01) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2436 [0] = \bot.MAckO_1'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:241$1808' (mux_sel01) in module `\TOP' with constant driver `\cpu.ia_pc = \cpu.s.R1394'.
Replacing $or cell `$techmap\bot.$or$bottleneck.v:84$687' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2509': A=$techmap\bot.$ternary$bottleneck.v:83$681_Y [7:0], B=$auto$wreduce.cc:347:run$2432 [7:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2511': A=56'00000000000000000000000000000000000000000000000000000000, B=$techmap\bot.$ternary$bottleneck.v:83$681_Y [63:8]
Replacing $or cell `$techmap\bot.$or$bottleneck.v:86$698' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2513': A=$techmap\bot.$or$bottleneck.v:85$692_Y [15:0], B=$auto$wreduce.cc:347:run$2433 [15:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2515': A=48'000000000000000000000000000000000000000000000000, B=$techmap\bot.$or$bottleneck.v:85$692_Y [63:16]
Replacing $or cell `$techmap\bot.$or$bottleneck.v:88$709' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2517': A=$techmap\bot.$or$bottleneck.v:87$703_Y [31:0], B=$auto$wreduce.cc:347:run$2434 [31:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2519': A=0, B=$techmap\bot.$or$bottleneck.v:87$703_Y [63:32]
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:427$1994' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1699 = \cpu.s.R1471'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:426$1993' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1698 = \cpu.s.R1470'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:425$1992' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1697 = \cpu.s.R1469'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:424$1991' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1696 = \cpu.s.R1468'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:423$1990' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1695 = \cpu.s.R1467'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:422$1989' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1694 = \cpu.s.R1466'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:444$2011' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isMRet = \cpu.s.R1482'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:445$2012' (mux_sel01) in module `\TOP' with constant driver `\cpu.csrs.mie_mpie = \cpu.s.R1483'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:245$1812' (mux_sel01) in module `\TOP' with constant driver `\cpu.csrs.mepc_ia = \cpu.s.R1395'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:234$1801' (mux_sel01) in module `\TOP' with constant driver `\cpu.pc_mbvec = \cpu.rst'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:514$2081' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1786 = \cpu.s.R1504'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:501$2068' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1773 = \cpu.s.R1501'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:487$2054' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1759 = \cpu.s.R1498'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:474$2041' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1746 = \cpu.s.R1495'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:452$2019' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isCsrRwI = \cpu.s.R1487'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:465$2032' (mux_sel01) in module `\TOP' with constant driver `\cpu.cdat_imm5 = \cpu.s.R1493'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:449$2016' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.isCsrRw = \cpu.s.R1484'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:457$2024' (mux_sel01) in module `\TOP' with constant driver `\cpu.cdat_rdat = \cpu.s.R1491'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:340$1907' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1612 = \cpu.s.R1442'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:328$1895' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1600 = \cpu.s.R1438'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:408$1975' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1680 = \cpu.s.R1462'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:384$1951' (mux_sel01) in module `\TOP' with constant driver `\cpu.alub_imm12s = \cpu.s.R1457'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:297$1864' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1569 = \cpu.s.R1422'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:499$2066' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1771 = \cpu.s.R1500'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:472$2039' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1744 = \cpu.s.R1494'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:455$2022' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1727 = \cpu.s.R1490'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:406$1973' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1678 = \cpu.s.R1461'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:382$1949' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1654 = \cpu.s.R1456'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:362$1929' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1634 = \cpu.s.R1452'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:332$1899' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1604 = \cpu.s.R1439'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:295$1862' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1567 = \cpu.s.R1421'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:269$1836' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1541 = \cpu.s.R1408'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:493$1065' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2521': A=$techmap\cpu.csrs.$or$polaris.v:491$1059_Y [60:0], B=$auto$wreduce.cc:347:run$2446 [60:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2523': A=3'000, B=$techmap\cpu.csrs.$or$polaris.v:491$1059_Y [63:61]
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:495$1071' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2525': A=$techmap\cpu.csrs.$or$polaris.v:493$1065_Y [12:0], B=$auto$wreduce.cc:347:run$2447 [12:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2527': A=51'000000000000000000000000000000000000000000000000000, B=$techmap\cpu.csrs.$or$polaris.v:493$1065_Y [63:13]
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:498$1080' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2529': A=$techmap\cpu.csrs.$or$polaris.v:495$1071_Y [11:0], B=$auto$wreduce.cc:347:run$2448 [11:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2531': A=52'0000000000000000000000000000000000000000000000000000, B=$techmap\cpu.csrs.$or$polaris.v:495$1071_Y [63:12]
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:411$1978' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1683 = \cpu.s.R1463'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:300$1867' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1572 = \cpu.s.R1423'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:364$1931' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1636 = \cpu.s.R1453'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:334$1901' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1606 = \cpu.s.R1440'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:271$1838' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1543 = \cpu.s.R1409'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:351$1918' (mux_sel01) in module `\TOP' with constant driver `\cpu.alub_imm20u = \cpu.s.R1446'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:344$1911' (mux_sel01) in module `\TOP' with constant driver `\cpu.alub_imm20uj = \cpu.s.R1443'.
Replacing $or cell `$techmap\cpu.$or$polaris.v:171$984' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2533': A=$techmap\cpu.$or$polaris.v:170$981_Y [4:0], B=$auto$wreduce.cc:347:run$2439 [4:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2535': A=59'00000000000000000000000000000000000000000000000000000000000, B=$techmap\cpu.$or$polaris.v:170$981_Y [63:5]
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:354$1921' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1626 = \cpu.s.R1448'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:353$1920' (mux_sel01) in module `\TOP' with constant driver `\cpu.alua_0 = \cpu.s.R1447'.
Replacing $or cell `$techmap\cpu.$or$polaris.v:140$937' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2537': A=$techmap\cpu.$or$polaris.v:139$934_Y [4:0], B=$auto$wreduce.cc:347:run$2438 [4:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2539': A=59'00000000000000000000000000000000000000000000000000000000000, B=$techmap\cpu.$or$polaris.v:139$934_Y [63:5]
Replacing $or cell `$techmap\bot.$or$bottleneck.v:68$672' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2541': A=$techmap\bot.$ternary$bottleneck.v:68$670_Y [1:0], B=$techmap\bot.$ternary$bottleneck.v:68$671_Y [1:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2543': A=1'0, B=$techmap\bot.$ternary$bottleneck.v:68$671_Y [2]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2545': A=1'0, B=1'0
Replacing $or cell `$techmap\bot.$or$bottleneck.v:68$674' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2547': A=$auto$wreduce.cc:347:run$2429 [2:0], B=$techmap\bot.$ternary$bottleneck.v:68$673_Y [2:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2549': A=17'00000000000000000, B=$auto$wreduce.cc:347:run$2429 [19:3]
Replacing $mux cell `$techmap\cpu.xrs.column0.$procmux$2364' (mux_sel01) in module `\TOP' with constant driver `$techmap\cpu.xrs.column0.$0$memwr$\mem$xrs.v:71$2345_EN[15:0]$2349 [15] = \cpu.ra_ird'.
Replacing $not cell `$techmap$techmap2495\cpu.xrs.column0.mem.0.0.0.$not$/usr/local/bin/../share/yosys/ice40/brams_map.v:220$2490' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2551': A=\cpu.ra_ird
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:429$1996' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1701 = \cpu.s.R1473'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:428$1995' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1700 = \cpu.s.R1472'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:434$2001' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1706 = \cpu.s.R1476'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:432$1999' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1704 = \cpu.s.R1475'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:513$2080' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1785 = \cpu.s.R1503'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:486$2053' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1758 = \cpu.s.R1497'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:464$2031' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1736 = \cpu.s.R1492'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:430$1997' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1702 = \cpu.s.R1474'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:436$2003' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1708 = \cpu.s.R1477'.
Replacing $mux cell `$techmap\cpu.s.$ternary$seq.v:240$1807' (mux_sel01) in module `\TOP' with constant driver `\cpu.s.out1512 = \cpu.s.R1393'.
Replacing $not cell `$techmap$techmap2494\cpu.xrs.column2.mem.0.0.0.$not$/usr/local/bin/../share/yosys/ice40/brams_map.v:220$2490' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2553': A=\cpu.ra_ird
Replacing $not cell `$techmap$techmap2493\cpu.xrs.column3.mem.0.0.0.$not$/usr/local/bin/../share/yosys/ice40/brams_map.v:220$2490' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2555': A=\cpu.ra_ird
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:555$1173' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2557': A=$techmap\cpu.csrs.$ternary$polaris.v:554$1171_Y [1:0], B=$techmap\cpu.csrs.$ternary$polaris.v:555$1172_Y [1:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2559': A=3'000, B=$techmap\cpu.csrs.$ternary$polaris.v:554$1171_Y [4:2]
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:556$1175' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2561': A=$auto$wreduce.cc:347:run$2443 [1:0], B=$techmap\cpu.csrs.$ternary$polaris.v:556$1174_Y [1:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2563': A=3'000, B=$auto$wreduce.cc:347:run$2443 [4:2]
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:557$1177' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2565': A=$auto$wreduce.cc:347:run$2444 [3:0], B=$techmap\cpu.csrs.$ternary$polaris.v:557$1176_Y [3:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2567': A=1'0, B=$auto$wreduce.cc:347:run$2444 [4]
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:526$1133' (mux_sel01) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:526$1133_Y [0] = \cpu.csrs.mpie_1'.
Replacing $not cell `$techmap$techmap2492\cpu.xrs.column1.mem.0.0.0.$not$/usr/local/bin/../share/yosys/ice40/brams_map.v:220$2490' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2569': A=\cpu.ra_ird
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:147$572' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1492 = \bot.bs.R1406'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:136$561' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1481 = \bot.bs.R1404'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:123$548' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1468 = \bot.bs.R1402'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:112$537' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1457 = \bot.bs.R1400'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:101$526' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1446 = \bot.bs.R1397'.
Replacing $mux cell `$techmap\bot.bs.$ternary$bottleneckSequencer.v:91$516' (mux_sel01) in module `\TOP' with constant driver `\bot.bs.out1436 = \bot.bs.R1395'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2503' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2507' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2511' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2515' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2519' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2523' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2527' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2531' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2535' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2545' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2549' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2571': A=1'0, B=$auto$opt_expr.cc:145:group_cell_inputs$2544
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2543' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2539' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2559' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2563' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2567' in module `\TOP' with identity for port B.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2545' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2544 = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2571' in module `\TOP' with identity for port A.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2571' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2570 = 1'0'.
Replacing $or cell `$techmap\bot.$or$bottleneck.v:69$675' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2573': A=\bot.m_adr_i [2:0], B=$auto$opt_expr.cc:145:group_cell_inputs$2546
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2575': A=17'00000000000000000, B=\bot.m_adr_i [19:3]
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2575' in module `\TOP' with identity for port B.

12.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
  Cell `$techmap$techmap2492\cpu.xrs.column1.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491' is identical to cell `$techmap$techmap2493\cpu.xrs.column3.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491'.
    Redirecting output \Y: $techmap$techmap2492\cpu.xrs.column1.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491_Y = $techmap$techmap2493\cpu.xrs.column3.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491_Y
    Removing $reduce_or cell `$techmap$techmap2492\cpu.xrs.column1.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491' from module `\TOP'.
  Cell `$techmap$techmap2494\cpu.xrs.column2.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491' is identical to cell `$techmap$techmap2493\cpu.xrs.column3.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491'.
    Redirecting output \Y: $techmap$techmap2494\cpu.xrs.column2.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491_Y = $techmap$techmap2493\cpu.xrs.column3.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491_Y
    Removing $reduce_or cell `$techmap$techmap2494\cpu.xrs.column2.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491' from module `\TOP'.
  Cell `$techmap$techmap2495\cpu.xrs.column0.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491' is identical to cell `$techmap$techmap2493\cpu.xrs.column3.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491'.
    Redirecting output \Y: $techmap$techmap2495\cpu.xrs.column0.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491_Y = $techmap$techmap2493\cpu.xrs.column3.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491_Y
    Removing $reduce_or cell `$techmap$techmap2495\cpu.xrs.column0.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491' from module `\TOP'.
  Cell `$auto$opt_expr.cc:158:group_cell_inputs$2553' is identical to cell `$auto$opt_expr.cc:158:group_cell_inputs$2551'.
    Redirecting output \Y: $auto$opt_expr.cc:145:group_cell_inputs$2552 = $auto$opt_expr.cc:145:group_cell_inputs$2550
    Removing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$2553' from module `\TOP'.
  Cell `$auto$opt_expr.cc:158:group_cell_inputs$2555' is identical to cell `$auto$opt_expr.cc:158:group_cell_inputs$2551'.
    Redirecting output \Y: $auto$opt_expr.cc:145:group_cell_inputs$2554 = $auto$opt_expr.cc:145:group_cell_inputs$2550
    Removing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$2555' from module `\TOP'.
  Cell `$auto$opt_expr.cc:158:group_cell_inputs$2569' is identical to cell `$auto$opt_expr.cc:158:group_cell_inputs$2551'.
    Redirecting output \Y: $auto$opt_expr.cc:145:group_cell_inputs$2568 = $auto$opt_expr.cc:145:group_cell_inputs$2550
    Removing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$2569' from module `\TOP'.
Removed a total of 6 cells.

12.10.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $techmap\bot.$procdff$2420 ($dff) from module TOP.
Removing $techmap\bot.$procdff$2421 ($dff) from module TOP.
Removing $techmap\bot.$procdff$2419 ($dff) from module TOP.
Replaced 3 DFF cells.

12.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2539': $auto$opt_expr.cc:145:group_cell_inputs$2538 = $techmap\cpu.$or$polaris.v:139$934_Y [63:5]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2535': $auto$opt_expr.cc:145:group_cell_inputs$2534 = $techmap\cpu.$or$polaris.v:170$981_Y [63:5]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2503': $auto$opt_expr.cc:145:group_cell_inputs$2502 = $techmap\cpu.alu.$or$alu.v:67$45_Y [63:1]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2507': $auto$opt_expr.cc:145:group_cell_inputs$2506 = $techmap\cpu.alu.$or$alu.v:67$46_Y [63:1]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2523': $auto$opt_expr.cc:145:group_cell_inputs$2522 = $techmap\cpu.csrs.$or$polaris.v:491$1059_Y [63:61]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2527': $auto$opt_expr.cc:145:group_cell_inputs$2526 = $techmap\cpu.csrs.$or$polaris.v:493$1065_Y [63:13]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2531': $auto$opt_expr.cc:145:group_cell_inputs$2530 = $techmap\cpu.csrs.$or$polaris.v:495$1071_Y [63:12]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2559': $auto$opt_expr.cc:145:group_cell_inputs$2558 = $techmap\cpu.csrs.$ternary$polaris.v:554$1171_Y [4:2]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2563': $auto$opt_expr.cc:145:group_cell_inputs$2562 = $auto$wreduce.cc:347:run$2443 [4:2]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2567': $auto$opt_expr.cc:145:group_cell_inputs$2566 = $auto$wreduce.cc:347:run$2444 [4]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2519': $auto$opt_expr.cc:145:group_cell_inputs$2518 = $techmap\bot.$or$bottleneck.v:87$703_Y [63:32]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2511': $auto$opt_expr.cc:145:group_cell_inputs$2510 = $techmap\bot.$ternary$bottleneck.v:83$681_Y [63:8]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2575': $auto$opt_expr.cc:145:group_cell_inputs$2574 = \bot.m_adr_i [19:3]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2543': $auto$opt_expr.cc:145:group_cell_inputs$2542 = $techmap\bot.$ternary$bottleneck.v:68$671_Y [2]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2515': $auto$opt_expr.cc:145:group_cell_inputs$2514 = $techmap\bot.$or$bottleneck.v:85$692_Y [63:16]
  removing unused `$mux' cell `$techmap\bot.$procmux$2382'.
  removing unused `$mux' cell `$techmap\bot.$procmux$2379'.
  removing unused `$mux' cell `$techmap\bot.$procmux$2376'.
  removing unused non-port wire \bot.hold1.
  removing unused non-port wire \bot.hold2.
  removing unused non-port wire \bot.hold3.
  removing unused non-port wire \bot.s_dat_16s.
  removing unused non-port wire \bot.s_dat_16u.
  removing unused non-port wire \bot.s_dat_32s.
  removing unused non-port wire \bot.s_dat_32u.
  removing unused non-port wire \bot.s_dat_64.
  removing unused non-port wire \bot.s_dat_8s.
  removing unused non-port wire \bot.s_dat_8u.
  removing unused non-port wire \bot.s_dat_i.
  removing unused non-port wire \sdati.
  removing unused non-port wire \wb_bridge.od2.
  removing unused non-port wire \wb_bridge.od3.
  removing unused non-port wire \wb_bridge.od4.
  removing unused non-port wire \wb_bridge.od5.
  removing unused non-port wire \wb_bridge.od6.
  removing unused non-port wire \wb_bridge.od7.
  removing unused non-port wire \wb_bridge.sel2.
  removing unused non-port wire \wb_bridge.sel3.
  removing unused non-port wire \wb_bridge.sel4.
  removing unused non-port wire \wb_bridge.sel5.
  removing unused non-port wire \wb_bridge.sel6.
  removing unused non-port wire \wb_bridge.sel7.
  removed 24 unused temporary wires.

12.10.5. Rerunning OPT passes. (Removed registers in this run.)

12.10.6. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:89$712' (mux_empty) in module `\TOP' with constant driver `$techmap\bot.$ternary$bottleneck.v:89$712_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:87$702' (mux_empty) in module `\TOP' with constant driver `$techmap\bot.$ternary$bottleneck.v:87$702_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:84$686' (mux_empty) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2432 [7:0] = 8'00000000'.
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:83$681' (mux_empty) in module `\TOP' with constant driver `{ $auto$opt_expr.cc:145:group_cell_inputs$2510 $techmap\bot.$ternary$bottleneck.v:83$681_Y [7:0] } = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2509' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2577': A=1'0, B=1'0
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:85$691' (mux_empty) in module `\TOP' with constant driver `$techmap\bot.$ternary$bottleneck.v:85$691_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\bot.$or$bottleneck.v:85$692' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2579': A=8'00000000, B=$auto$opt_expr.cc:145:group_cell_inputs$2508
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2581': A=1'0, B=1'0
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:86$697' (mux_empty) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2433 [15:0] = 16'0000000000000000'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2513' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\bot.$or$bottleneck.v:87$703' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:88$708' (mux_empty) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2434 [31:0] = 0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2517' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\bot.$or$bottleneck.v:89$713' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2581' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2577' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2579' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2583': A=1'0, B=$auto$opt_expr.cc:145:group_cell_inputs$2576
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2513' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2585': A={ $auto$opt_expr.cc:145:group_cell_inputs$2578 $auto$opt_expr.cc:145:group_cell_inputs$2580 }
Replacing $pos cell `$techmap\bot.$or$bottleneck.v:87$703' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2587': A={ $auto$opt_expr.cc:145:group_cell_inputs$2512 $auto$opt_expr.cc:145:group_cell_inputs$2580 }
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2581' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2580 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2577' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2576 = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2583' in module `\TOP' with identity for port A.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2585' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2589': A=$auto$opt_expr.cc:145:group_cell_inputs$2582
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2591': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2587' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2593': A=$auto$opt_expr.cc:145:group_cell_inputs$2584
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2595': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2517' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2597': A=$auto$opt_expr.cc:145:group_cell_inputs$2586
Replacing $pos cell `$techmap\bot.$or$bottleneck.v:89$713' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2599': A={ $auto$opt_expr.cc:145:group_cell_inputs$2516 $auto$opt_expr.cc:145:group_cell_inputs$2586 [0] }
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2595' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2594 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2591' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2590 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2583' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2582 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2589' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2588 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2593' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2601': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2597' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2603': A=$auto$opt_expr.cc:145:group_cell_inputs$2592
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2605': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2599' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2607': A=$auto$opt_expr.cc:145:group_cell_inputs$2596
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2609': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2601' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2600 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2603' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2611': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2605' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2604 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2607' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2613': A=$auto$opt_expr.cc:145:group_cell_inputs$2602
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2615': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2609' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2608 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2611' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2610 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2613' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2617': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2615' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2614 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2617' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2616 = 1'0'.
Replacing $mux cell `$techmap\arb.$ternary$arbiter.v:84$98' (?) in module `\TOP' with constant driver `\cpu.idat_i = 0'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:192$1030' (?) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:192$1030_Y = 0'.
Replacing $or cell `$techmap\cpu.$or$polaris.v:193$1032' in module `\TOP' with identity for port B.
Replacing $mux cell `$techmap\arb.$ternary$arbiter.v:85$99' (?) in module `\TOP' with constant driver `\cpu.ddat_i = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:174$991' (?) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:174$991_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.$or$polaris.v:174$992' in module `\TOP' with identity for port A.

12.10.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.10.8. Executing OPT_RMDFF pass (remove dff with constant values).

12.10.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..
  removing buffer cell `$techmap\cpu.$or$polaris.v:174$992': $techmap\cpu.$or$polaris.v:174$992_Y = $techmap\cpu.$ternary$polaris.v:173$989_Y
  removing buffer cell `$techmap\cpu.$or$polaris.v:193$1032': \cpu.ir_mux = $techmap\cpu.$ternary$polaris.v:193$1031_Y
  removing unused `$and' cell `$techmap\cpu.$and$polaris.v:144$944'.
  removing unused `$not' cell `$techmap\cpu.$not$polaris.v:144$943'.
  removing unused `$and' cell `$techmap\bot.$and$bottleneck.v:89$710'.
  removing unused `$and' cell `$techmap\bot.$and$bottleneck.v:88$706'.
  removing unused `$and' cell `$techmap\bot.$and$bottleneck.v:87$700'.
  removing unused `$and' cell `$techmap\bot.$and$bottleneck.v:86$695'.
  removing unused `$and' cell `$techmap\bot.$and$bottleneck.v:85$689'.
  removing unused `$and' cell `$techmap\bot.$and$bottleneck.v:84$684'.
  removing unused `$and' cell `$techmap\bot.$and$bottleneck.v:84$683'.
  removing unused `$not' cell `$techmap\bot.$not$bottleneck.v:84$682'.
  removing unused `$and' cell `$techmap\bot.$and$bottleneck.v:83$679'.
  removing unused `$and' cell `$techmap\bot.$and$bottleneck.v:83$678'.
  removing unused `$eq' cell `$techmap\bot.$eq$bottleneck.v:55$642'.
  removing unused `$eq' cell `$techmap\bot.$eq$bottleneck.v:54$641'.
  removing unused `$eq' cell `$techmap\bot.$eq$bottleneck.v:53$640'.
  removing unused `$logic_not' cell `$techmap\bot.$eq$bottleneck.v:52$639'.
  removing unused `$and' cell `$techmap\arb.$and$arbiter.v:79$94'.
  removing unused non-port wire \arb.ddat_o.
  removing unused non-port wire \arb.dsigned_i.
  removing unused non-port wire \arb.idat_o.
  removing unused non-port wire \arb.xdat_i.
  removing unused non-port wire \arb.xsigned_o.
  removing unused non-port wire \bot.m_dat_o.
  removing unused non-port wire \bot.m_signed_i.
  removing unused non-port wire \bot.reqByte.
  removing unused non-port wire \bot.reqDWord.
  removing unused non-port wire \bot.reqHWord.
  removing unused non-port wire \bot.reqWord.
  removing unused non-port wire \cpu.ddat_i.
  removing unused non-port wire \cpu.dsigned_o.
  removing unused non-port wire \cpu.idat_i.
  removing unused non-port wire \ddati.
  removing unused non-port wire \dsigned.
  removing unused non-port wire \idat.
  removing unused non-port wire \idat_wide.
  removing unused non-port wire \xdati.
  removing unused non-port wire \xsigned.
  removed 20 unused temporary wires.

12.10.10. Finished fast OPT passes.

12.11. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

12.12. Executing OPT pass (performing simple optimizations).

12.12.1. Executing OPT_EXPR pass (perform const folding).

12.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$2373 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:73$76
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$78 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$79 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$90 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$91 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:58$646 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$648 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:60$652 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:63$658 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:64$660 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:65$663 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:66$666 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:66$668 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$670 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$671 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$673 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:69$677 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$715 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:138$931 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:139$933 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:140$936 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:143$942 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:151$949 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:160$955 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:161$957 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:162$960 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:163$963 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:165$966 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:166$968 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:167$971 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:168$974 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:169$977 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:170$980 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:171$983 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:172$986 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:173$989 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:175$994 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:176$997 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:177$1000 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:178$1002 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:179$1005 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:181$1009 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:182$1011 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:183$1013 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:184$1015 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:185$1017 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:186$1019 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:188$1023 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:189$1025 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:193$1031 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:33$6 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:38$11 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:39$13 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:47$21 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:50$23
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:52$25
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:54$27
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:56$29
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:58$31 (pure)
      Removing pure flag from root mux $techmap\cpu.alu.$ternary$alu.v:50$23.
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:62$35 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:64$38 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:65$41 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:490$1056 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:493$1064 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:495$1070 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:498$1079 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:499$1082 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:500$1085 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:501$1088 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:502$1091 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:503$1094 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:505$1100 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:507$1106 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:512$1112 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:513$1114 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:519$1121 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:520$1124 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:521$1127 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:525$1132 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:527$1136 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:528$1139 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:535$1145 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:536$1147 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:537$1150 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:540$1153 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:545$1158 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:546$1160 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:548$1166 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:554$1171 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:555$1172 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:556$1174 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:557$1176 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:558$1179 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:561$1182 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:563$1186 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:565$1191 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:566$1196 (pure)
    Root of a mux tree: $techmap\cpu.xrs.$ternary$xrs.v:23$2344
    Root of a mux tree: $techmap\wb_bridge.$ternary$bridge.v:112$842 (pure)
    Root of a mux tree: $techmap\wb_bridge.$ternary$bridge.v:113$844 (pure)
    Root of a mux tree: $techmap\cpu.alu.$ternary$alu.v:50$23 (rerun as non-pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

12.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TOP.
    New input vector for $reduce_or cell $techmap$techmap2493\cpu.xrs.column3.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491: \cpu.ra_ird
    Consolidated identical input bits for $mux cell $techmap\arb.$ternary$arbiter.v:78$90:
      Old ports: A=2'00, B=2'10, Y=$techmap\arb.$ternary$arbiter.v:78$90_Y
      New ports: A=1'0, B=1'1, Y=$techmap\arb.$ternary$arbiter.v:78$90_Y [1]
      New connections: $techmap\arb.$ternary$arbiter.v:78$90_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $techmap\bot.$ternary$bottleneck.v:66$668:
      Old ports: A=16'0000000011111111, B=16'1111111111111111, Y=$techmap\bot.$ternary$bottleneck.v:66$668_Y
      New ports: A=1'0, B=1'1, Y=$techmap\bot.$ternary$bottleneck.v:66$668_Y [8]
      New connections: { $techmap\bot.$ternary$bottleneck.v:66$668_Y [15:9] $techmap\bot.$ternary$bottleneck.v:66$668_Y [7:0] } = { $techmap\bot.$ternary$bottleneck.v:66$668_Y [8] $techmap\bot.$ternary$bottleneck.v:66$668_Y [8] $techmap\bot.$ternary$bottleneck.v:66$668_Y [8] $techmap\bot.$ternary$bottleneck.v:66$668_Y [8] $techmap\bot.$ternary$bottleneck.v:66$668_Y [8] $techmap\bot.$ternary$bottleneck.v:66$668_Y [8] $techmap\bot.$ternary$bottleneck.v:66$668_Y [8] 8'11111111 }
    Consolidated identical input bits for $mux cell $techmap\bot.$ternary$bottleneck.v:68$670:
      Old ports: A=2'00, B=2'10, Y=$techmap\bot.$ternary$bottleneck.v:68$670_Y [1:0]
      New ports: A=1'0, B=1'1, Y=$techmap\bot.$ternary$bottleneck.v:68$670_Y [1]
      New connections: $techmap\bot.$ternary$bottleneck.v:68$670_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $techmap\bot.$ternary$bottleneck.v:68$671:
      Old ports: A=3'000, B=3'100, Y={ $auto$opt_expr.cc:145:group_cell_inputs$2542 $techmap\bot.$ternary$bottleneck.v:68$671_Y [1:0] }
      New ports: A=1'0, B=1'1, Y=$auto$opt_expr.cc:145:group_cell_inputs$2542
      New connections: $techmap\bot.$ternary$bottleneck.v:68$671_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $techmap\bot.$ternary$bottleneck.v:68$673:
      Old ports: A=3'000, B=3'110, Y=$techmap\bot.$ternary$bottleneck.v:68$673_Y [2:0]
      New ports: A=1'0, B=1'1, Y=$techmap\bot.$ternary$bottleneck.v:68$673_Y [1]
      New connections: { $techmap\bot.$ternary$bottleneck.v:68$673_Y [2] $techmap\bot.$ternary$bottleneck.v:68$673_Y [0] } = { $techmap\bot.$ternary$bottleneck.v:68$673_Y [1] 1'0 }
    Consolidated identical input bits for $mux cell $techmap\cpu.$ternary$polaris.v:151$949:
      Old ports: A=\cpu.alu.out_o, B={ \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31:0] }, Y=\cpu.aluXResult
      New ports: A=\cpu.alu.out_o [63:32], B={ \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] \cpu.alu.out_o [31] }, Y=\cpu.aluXResult [63:32]
      New connections: \cpu.aluXResult [31:0] = \cpu.alu.out_o [31:0]
    Consolidated identical input bits for $mux cell $techmap\cpu.$ternary$polaris.v:166$968:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B={ \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31:20] }, Y=$techmap\cpu.$ternary$polaris.v:166$968_Y
      New ports: A=12'000000000000, B=\cpu.ir [31:20], Y=$techmap\cpu.$ternary$polaris.v:166$968_Y [11:0]
      New connections: $techmap\cpu.$ternary$polaris.v:166$968_Y [63:12] = { $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] $techmap\cpu.$ternary$polaris.v:166$968_Y [11] }
    Consolidated identical input bits for $mux cell $techmap\cpu.$ternary$polaris.v:167$971:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B={ \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31:25] \cpu.ir [11:7] }, Y=$techmap\cpu.$ternary$polaris.v:167$971_Y
      New ports: A=12'000000000000, B={ \cpu.ir [31:25] \cpu.ir [11:7] }, Y=$techmap\cpu.$ternary$polaris.v:167$971_Y [11:0]
      New connections: $techmap\cpu.$ternary$polaris.v:167$971_Y [63:12] = { $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] $techmap\cpu.$ternary$polaris.v:167$971_Y [11] }
    Consolidated identical input bits for $mux cell $techmap\cpu.$ternary$polaris.v:168$974:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B={ \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [7] \cpu.ir [30:25] \cpu.ir [11:8] 1'0 }, Y=$techmap\cpu.$ternary$polaris.v:168$974_Y
      New ports: A=12'000000000000, B={ \cpu.ir [31] \cpu.ir [7] \cpu.ir [30:25] \cpu.ir [11:8] }, Y=$techmap\cpu.$ternary$polaris.v:168$974_Y [12:1]
      New connections: { $techmap\cpu.$ternary$polaris.v:168$974_Y [63:13] $techmap\cpu.$ternary$polaris.v:168$974_Y [0] } = { $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] $techmap\cpu.$ternary$polaris.v:168$974_Y [12] 1'0 }
    Consolidated identical input bits for $mux cell $techmap\cpu.$ternary$polaris.v:169$977:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B={ \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31:12] 12'000000000000 }, Y=$techmap\cpu.$ternary$polaris.v:169$977_Y
      New ports: A=20'00000000000000000000, B=\cpu.ir [31:12], Y=$techmap\cpu.$ternary$polaris.v:169$977_Y [31:12]
      New connections: { $techmap\cpu.$ternary$polaris.v:169$977_Y [63:32] $techmap\cpu.$ternary$polaris.v:169$977_Y [11:0] } = { $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] $techmap\cpu.$ternary$polaris.v:169$977_Y [31] 12'000000000000 }
    Consolidated identical input bits for $mux cell $techmap\cpu.$ternary$polaris.v:170$980:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B={ \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [31] \cpu.ir [19:12] \cpu.ir [20] \cpu.ir [30:21] 1'0 }, Y=$techmap\cpu.$ternary$polaris.v:170$980_Y
      New ports: A=20'00000000000000000000, B={ \cpu.ir [31] \cpu.ir [19:12] \cpu.ir [20] \cpu.ir [30:21] }, Y=$techmap\cpu.$ternary$polaris.v:170$980_Y [20:1]
      New connections: { $techmap\cpu.$ternary$polaris.v:170$980_Y [63:21] $techmap\cpu.$ternary$polaris.v:170$980_Y [0] } = { $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] $techmap\cpu.$ternary$polaris.v:170$980_Y [20] 1'0 }
    Consolidated identical input bits for $mux cell $techmap\cpu.$ternary$polaris.v:181$1009:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B=64'1111111111111111111111111111111111111111111111111111111100000000, Y=$techmap\cpu.$ternary$polaris.v:181$1009_Y
      New ports: A=1'0, B=1'1, Y=$techmap\cpu.$ternary$polaris.v:181$1009_Y [8]
      New connections: { $techmap\cpu.$ternary$polaris.v:181$1009_Y [63:9] $techmap\cpu.$ternary$polaris.v:181$1009_Y [7:0] } = { $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] $techmap\cpu.$ternary$polaris.v:181$1009_Y [8] 8'00000000 }
    Consolidated identical input bits for $mux cell $techmap\cpu.alu.$ternary$alu.v:49$22:
      Old ports: A=0, B={ \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] \cpu.alua [63] }, Y=\cpu.alu.sx5
      New ports: A=1'0, B=\cpu.alua [63], Y=\cpu.alu.sx5 [0]
      New connections: \cpu.alu.sx5 [31:1] = { \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] \cpu.alu.sx5 [0] }
    Consolidated identical input bits for $mux cell $techmap\cpu.alu.$ternary$alu.v:51$24:
      Old ports: A=16'0000000000000000, B={ \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] \cpu.alu.rsh32 [63] }, Y=\cpu.alu.sx4
      New ports: A=1'0, B=\cpu.alu.rsh32 [63], Y=\cpu.alu.sx4 [0]
      New connections: \cpu.alu.sx4 [15:1] = { \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] \cpu.alu.sx4 [0] }
    Consolidated identical input bits for $mux cell $techmap\cpu.alu.$ternary$alu.v:53$26:
      Old ports: A=8'00000000, B={ \cpu.alu.rsh16 [63] \cpu.alu.rsh16 [63] \cpu.alu.rsh16 [63] \cpu.alu.rsh16 [63] \cpu.alu.rsh16 [63] \cpu.alu.rsh16 [63] \cpu.alu.rsh16 [63] \cpu.alu.rsh16 [63] }, Y=\cpu.alu.sx3
      New ports: A=1'0, B=\cpu.alu.rsh16 [63], Y=\cpu.alu.sx3 [0]
      New connections: \cpu.alu.sx3 [7:1] = { \cpu.alu.sx3 [0] \cpu.alu.sx3 [0] \cpu.alu.sx3 [0] \cpu.alu.sx3 [0] \cpu.alu.sx3 [0] \cpu.alu.sx3 [0] \cpu.alu.sx3 [0] }
    Consolidated identical input bits for $mux cell $techmap\cpu.alu.$ternary$alu.v:55$28:
      Old ports: A=4'0000, B={ \cpu.alu.rsh8 [63] \cpu.alu.rsh8 [63] \cpu.alu.rsh8 [63] \cpu.alu.rsh8 [63] }, Y=\cpu.alu.sx2
      New ports: A=1'0, B=\cpu.alu.rsh8 [63], Y=\cpu.alu.sx2 [0]
      New connections: \cpu.alu.sx2 [3:1] = { \cpu.alu.sx2 [0] \cpu.alu.sx2 [0] \cpu.alu.sx2 [0] }
    Consolidated identical input bits for $mux cell $techmap\cpu.alu.$ternary$alu.v:57$30:
      Old ports: A=2'00, B={ \cpu.alu.rsh4 [63] \cpu.alu.rsh4 [63] }, Y=\cpu.alu.sx1
      New ports: A=1'0, B=\cpu.alu.rsh4 [63], Y=\cpu.alu.sx1 [0]
      New connections: \cpu.alu.sx1 [1] = \cpu.alu.sx1 [0]
    Consolidated identical input bits for $mux cell $techmap\cpu.csrs.$ternary$polaris.v:490$1056:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B=64'1000000000000000000000000000000000000000000001000000000100000000, Y={ $auto$opt_expr.cc:145:group_cell_inputs$2522 $techmap\cpu.csrs.$or$polaris.v:491$1059_Y [60:0] }
      New ports: A=1'0, B=1'1, Y=$techmap\cpu.csrs.$or$polaris.v:491$1059_Y [8]
      New connections: { $auto$opt_expr.cc:145:group_cell_inputs$2522 $techmap\cpu.csrs.$or$polaris.v:491$1059_Y [60:9] $techmap\cpu.csrs.$or$polaris.v:491$1059_Y [7:0] } = { $techmap\cpu.csrs.$or$polaris.v:491$1059_Y [8] 44'00000000000000000000000000000000000000000000 $techmap\cpu.csrs.$or$polaris.v:491$1059_Y [8] 17'00000000000000000 }
    Consolidated identical input bits for $mux cell $techmap\cpu.csrs.$ternary$polaris.v:493$1064:
      Old ports: A=61'0000000000000000000000000000000000000000000000000000000000000, B=61'1000101100001000000001000000000010000000000000000000000000000, Y=$auto$wreduce.cc:347:run$2446 [60:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:347:run$2446 [28]
      New connections: { $auto$wreduce.cc:347:run$2446 [60:29] $auto$wreduce.cc:347:run$2446 [27:0] } = { $auto$wreduce.cc:347:run$2446 [28] 3'000 $auto$wreduce.cc:347:run$2446 [28] 1'0 $auto$wreduce.cc:347:run$2446 [28] $auto$wreduce.cc:347:run$2446 [28] 4'0000 $auto$wreduce.cc:347:run$2446 [28] 8'00000000 $auto$wreduce.cc:347:run$2446 [28] 38'00000000000000000000000000000000000000 }
    Consolidated identical input bits for $mux cell $techmap\cpu.csrs.$ternary$polaris.v:495$1070:
      Old ports: A=13'0000000000000, B={ 5'11101 \cpu.csrs.mpie 3'000 \cpu.csrs.mie 3'000 }, Y=$auto$wreduce.cc:347:run$2447 [12:0]
      New ports: A=3'000, B={ 1'1 \cpu.csrs.mpie \cpu.csrs.mie }, Y={ $auto$wreduce.cc:347:run$2447 [8:7] $auto$wreduce.cc:347:run$2447 [3] }
      New connections: { $auto$wreduce.cc:347:run$2447 [12:9] $auto$wreduce.cc:347:run$2447 [6:4] $auto$wreduce.cc:347:run$2447 [2:0] } = { $auto$wreduce.cc:347:run$2447 [8] $auto$wreduce.cc:347:run$2447 [8] $auto$wreduce.cc:347:run$2447 [8] 7'0000000 }
    Consolidated identical input bits for $mux cell $techmap\cpu.csrs.$ternary$polaris.v:498$1079:
      Old ports: A=12'000000000000, B={ \cpu.csrs.irqEn 11'00000000000 }, Y=$auto$wreduce.cc:347:run$2448 [11:0]
      New ports: A=1'0, B=\cpu.csrs.irqEn, Y=$auto$wreduce.cc:347:run$2448 [11]
      New connections: $auto$wreduce.cc:347:run$2448 [10:0] = 11'00000000000
    Consolidated identical input bits for $mux cell $techmap\cpu.csrs.$ternary$polaris.v:502$1091:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B={ \cpu.csrs.mcause [4] 59'00000000000000000000000000000000000000000000000000000000000 \cpu.csrs.mcause [3:0] }, Y=$techmap\cpu.csrs.$ternary$polaris.v:502$1091_Y
      New ports: A=5'00000, B=\cpu.csrs.mcause, Y={ $techmap\cpu.csrs.$ternary$polaris.v:502$1091_Y [63] $techmap\cpu.csrs.$ternary$polaris.v:502$1091_Y [3:0] }
      New connections: $techmap\cpu.csrs.$ternary$polaris.v:502$1091_Y [62:4] = 59'00000000000000000000000000000000000000000000000000000000000
    Consolidated identical input bits for $mux cell $techmap\cpu.csrs.$ternary$polaris.v:536$1147:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B=64'1111111111111111111111111111111111111111111111111111111000000000, Y=$techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y
      New ports: A=1'0, B=1'1, Y=$techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9]
      New connections: { $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [63:10] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [8:0] } = { $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [9] 9'000000000 }
    Consolidated identical input bits for $mux cell $techmap\cpu.csrs.$ternary$polaris.v:555$1172:
      Old ports: A=2'00, B=2'10, Y=$techmap\cpu.csrs.$ternary$polaris.v:555$1172_Y [1:0]
      New ports: A=1'0, B=1'1, Y=$techmap\cpu.csrs.$ternary$polaris.v:555$1172_Y [1]
      New connections: $techmap\cpu.csrs.$ternary$polaris.v:555$1172_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $techmap\cpu.csrs.$ternary$polaris.v:556$1174:
      Old ports: A=2'00, B=2'11, Y=$techmap\cpu.csrs.$ternary$polaris.v:556$1174_Y [1:0]
      New ports: A=1'0, B=1'1, Y=$techmap\cpu.csrs.$ternary$polaris.v:556$1174_Y [0]
      New connections: $techmap\cpu.csrs.$ternary$polaris.v:556$1174_Y [1] = $techmap\cpu.csrs.$ternary$polaris.v:556$1174_Y [0]
    Consolidated identical input bits for $mux cell $techmap\cpu.csrs.$ternary$polaris.v:557$1176:
      Old ports: A=4'0000, B=4'1011, Y=$techmap\cpu.csrs.$ternary$polaris.v:557$1176_Y [3:0]
      New ports: A=1'0, B=1'1, Y=$techmap\cpu.csrs.$ternary$polaris.v:557$1176_Y [0]
      New connections: $techmap\cpu.csrs.$ternary$polaris.v:557$1176_Y [3:1] = { $techmap\cpu.csrs.$ternary$polaris.v:557$1176_Y [0] 1'0 $techmap\cpu.csrs.$ternary$polaris.v:557$1176_Y [0] }
  Optimizing cells in module \TOP.
Performed a total of 27 changes.

12.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.12.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $techmap\cpu.$procdff$2406 ($dff) from module TOP.
Replaced 1 DFF cells.

12.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..
  removing unused `$mux' cell `$techmap\cpu.$ternary$polaris.v:193$1031'.
  removing unused non-port wire \cpu.cadr_o.
  removing unused non-port wire \cpu.csrs.cadr_i.
  removing unused non-port wire \cpu.imm12i.
  removing unused non-port wire \cpu.imm12s.
  removing unused non-port wire \cpu.imm12sb.
  removing unused non-port wire \cpu.imm20u.
  removing unused non-port wire \cpu.imm20uj.
  removing unused non-port wire \cpu.imm5.
  removing unused non-port wire \cpu.ir.
  removing unused non-port wire \cpu.ir_mux.
  removing unused non-port wire \cpu.s.ir.
  removed 11 unused temporary wires.

12.12.8. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:207$1655' (isneq) in module `\TOP' with constant driver `\cpu.s.R1479 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:209$1665' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:209$1665_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:209$1667' (const_and) in module `\TOP' with constant driver `\cpu.csrs.mcause_3 = 1'0'.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:206$1654' (isneq) in module `\TOP' with constant driver `\cpu.s.R1478 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:208$1659' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:208$1659_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:208$1661' (const_and) in module `\TOP' with constant driver `\cpu.csrs.mcause_11 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:581$2198' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:179$1494' (isneq) in module `\TOP' with constant driver `\cpu.s.R1451 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:186$1541' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:186$1541_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:187$1552' (const_and) in module `\TOP' with constant driver `\cpu.s.R1459 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:186$1544' (const_and) in module `\TOP' with constant driver `\cpu.s.R1458 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:526$2093' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:178$1493' (isneq) in module `\TOP' with constant driver `\cpu.s.R1450 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:182$1512' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:182$1512_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:183$1523' (const_and) in module `\TOP' with constant driver `\cpu.rdat_ddat = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:526$2094' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:182$1515' (const_and) in module `\TOP' with constant driver `\cpu.s.R1454 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:526$2095' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:212$1675' (isneq) in module `\TOP' with constant driver `$techmap\cpu.s.$eq$seq.v:212$1675_Y = 1'0'.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:133$1289' (isneq) in module `\TOP' with constant driver `\cpu.s.R1405 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:217$1692' (const_and) in module `\TOP' with constant driver `\cpu.s.R1489 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:231$1784' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:231$1784_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:233$1800' (const_and) in module `\TOP' with constant driver `\cpu.s.R1505 = 1'0'.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:129$1285' (isneq) in module `\TOP' with constant driver `\cpu.s.R1401 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:214$1683' (const_and) in module `\TOP' with constant driver `\cpu.s.R1486 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:228$1764' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:228$1764_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:230$1780' (const_and) in module `\TOP' with constant driver `\cpu.s.R1502 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:530$2097' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:132$1288' (isneq) in module `\TOP' with constant driver `\cpu.s.R1404 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:216$1689' (const_and) in module `\TOP' with constant driver `\cpu.s.R1488 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:225$1744' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:225$1744_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:227$1760' (const_and) in module `\TOP' with constant driver `\cpu.s.R1499 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:533$2112' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:128$1284' (isneq) in module `\TOP' with constant driver `\cpu.s.R1400 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:213$1680' (const_and) in module `\TOP' with constant driver `\cpu.s.R1485 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:222$1724' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:222$1724_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:224$1740' (const_and) in module `\TOP' with constant driver `\cpu.s.R1496 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:533$2113' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:135$1293' (isneq) in module `\TOP' with constant driver `$techmap\cpu.s.$eq$seq.v:135$1293_Y = 1'0'.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:134$1291' (isneq) in module `\TOP' with constant driver `$techmap\cpu.s.$eq$seq.v:134$1291_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:135$1295' (const_and) in module `\TOP' with constant driver `\cpu.s.R1407 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:152$1372' (const_and) in module `\TOP' with constant driver `\cpu.s.R1424 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:162$1412' (const_and) in module `\TOP' with constant driver `\cpu.s.R1434 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:533$2114' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:161$1409' (const_and) in module `\TOP' with constant driver `\cpu.s.R1433 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:533$2115' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:134$1290' (isneq) in module `\TOP' with constant driver `$techmap\cpu.s.$eq$seq.v:134$1290_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:134$1292' (const_and) in module `\TOP' with constant driver `\cpu.s.R1406 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:138$1313' (const_and) in module `\TOP' with constant driver `\cpu.s.R1410 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:147$1345' (const_and) in module `\TOP' with constant driver `\cpu.s.R1419 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:533$2116' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:146$1342' (const_and) in module `\TOP' with constant driver `\cpu.s.R1418 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:533$2117' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:188$1553' (isneq) in module `\TOP' with constant driver `\cpu.s.R1460 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:192$1577' (const_and) in module `\TOP' with constant driver `\cpu.alub_imm12sb = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:530$2098' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:157$1392' (const_and) in module `\TOP' with constant driver `\cpu.s.R1429 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:530$2099' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:156$1389' (const_and) in module `\TOP' with constant driver `\cpu.s.R1428 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:530$2100' in module `\TOP' with identity for port A.
Replacing port A of $logic_not cell `$techmap\cpu.s.$eq$seq.v:126$1282' in module `\TOP' with constant driver: 3'000 -> 1'0
Replacing $logic_not cell `$techmap\cpu.s.$eq$seq.v:126$1282' (1'0) in module `\TOP' with constant driver `\cpu.s.R1398 = 1'1'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:153$1375' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:153$1375_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:154$1383' (const_and) in module `\TOP' with constant driver `\cpu.s.R1426 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:530$2101' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:142$1325' (const_and) in module `\TOP' with constant driver `\cpu.s.R1414 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:530$2102' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:141$1322' (const_and) in module `\TOP' with constant driver `\cpu.s.R1413 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:530$2103' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:193$1583' (const_and) in module `\TOP' with constant driver `\cpu.s.R1465 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:584$2201' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:584$2202' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:584$2203' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:584$2204' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:584$2205' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:173$1462' (isneq) in module `\TOP' with constant driver `$techmap\cpu.s.$eq$seq.v:173$1462_Y = 1'0'.
Replacing $not cell `$techmap\cpu.s.$not$seq.v:173$1461' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$not$seq.v:173$1461_Y = 1'1'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:173$1463' (const_and) in module `\TOP' with constant driver `\cpu.s.R1445 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:177$1492' (const_and) in module `\TOP' with constant driver `\cpu.s.R1449 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:584$2206' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:165$1417' (isneq) in module `\TOP' with constant driver `\cpu.s.R1437 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:172$1459' (const_and) in module `\TOP' with constant driver `\cpu.s.R1444 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:584$2207' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:164$1416' (isneq) in module `\TOP' with constant driver `\cpu.s.R1436 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:169$1441' (const_and) in module `\TOP' with constant driver `\cpu.s.R1441 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:584$2208' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:584$2209' in module `\TOP' with identity for port A.
Replacing $not cell `$techmap\cpu.s.$not$seq.v:144$1333' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$not$seq.v:144$1333_Y = 1'1'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:153$1378' (const_and) in module `\TOP' with constant driver `\cpu.s.R1425 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:584$2210' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:139$1316' (const_and) in module `\TOP' with constant driver `\cpu.s.R1411 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:584$2211' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:131$1287' (isneq) in module `\TOP' with constant driver `\cpu.s.R1403 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:159$1398' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:159$1398_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:160$1406' (const_and) in module `\TOP' with constant driver `\cpu.s.R1432 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:532$2104' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:532$2105' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:532$2106' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:532$2107' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:144$1331' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:144$1331_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:145$1339' (const_and) in module `\TOP' with constant driver `\cpu.s.R1417 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:532$2108' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:532$2109' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:532$2110' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:588$2214' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:588$2215' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:130$1286' (isneq) in module `\TOP' with constant driver `\cpu.s.R1402 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:158$1395' (const_and) in module `\TOP' with constant driver `\cpu.s.R1430 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:588$2216' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:588$2217' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:143$1328' (const_and) in module `\TOP' with constant driver `\cpu.s.R1415 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:588$2218' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:127$1283' (isneq) in module `\TOP' with constant driver `\cpu.s.R1399 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:155$1386' (const_and) in module `\TOP' with constant driver `\cpu.s.R1427 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:140$1319' (const_and) in module `\TOP' with constant driver `\cpu.s.R1412 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:565$2162' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:159$1401' (const_and) in module `\TOP' with constant driver `\cpu.s.R1431 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:573$2171' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:573$2172' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:144$1334' (const_and) in module `\TOP' with constant driver `\cpu.s.R1416 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:573$2173' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:582$2200' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:585$2212' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:145$945' (?) in module `\TOP' with constant driver `\arb.dsiz_i = 2'00'.
Replacing $mux cell `$techmap\arb.$ternary$arbiter.v:78$91' (?) in module `\TOP' with constant driver `$techmap\arb.$ternary$arbiter.v:78$91_Y = 2'00'.
Replacing $or cell `$techmap\arb.$or$arbiter.v:78$92' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2619': A=1'0, B=$techmap\arb.$ternary$arbiter.v:78$90_Y [1]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2621': A=1'0, B=1'0
Replacing $and cell `$techmap\cpu.s.$and$seq.v:194$1586' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:194$1586_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:199$1623' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:199$1623_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:199$1625' (const_and) in module `\TOP' with constant driver `\cpu.s.R1471 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:198$1616' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:198$1616_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:198$1618' (const_and) in module `\TOP' with constant driver `\cpu.s.R1470 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:558$2148' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:197$1609' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:197$1609_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:197$1611' (const_and) in module `\TOP' with constant driver `\cpu.s.R1469 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:558$2149' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:196$1602' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:196$1602_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:196$1604' (const_and) in module `\TOP' with constant driver `\cpu.s.R1468 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:558$2150' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:195$1595' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:195$1595_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:195$1597' (const_and) in module `\TOP' with constant driver `\cpu.s.R1467 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:558$2151' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:194$1588' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:194$1588_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:194$1590' (const_and) in module `\TOP' with constant driver `\cpu.s.R1466 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:558$2152' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:558$2153' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:558$2154' in module `\TOP' with identity for port A.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:210$1668' (isneq) in module `\TOP' with constant driver `\cpu.s.R1482 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:211$1672' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:211$1672_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:211$1674' (const_and) in module `\TOP' with constant driver `\cpu.csrs.mie_mpie = 1'0'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:185$1017' (0) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:185$1017_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:163$1415' (const_and) in module `\TOP' with constant driver `\cpu.s.R1435 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:148$1348' (const_and) in module `\TOP' with constant driver `\cpu.s.R1420 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:578$2192' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.$or$polaris.v:182$1012' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2623': A={ $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] $techmap\cpu.$ternary$polaris.v:181$1009_Y [63] }, B=$techmap\cpu.$ternary$polaris.v:182$1011_Y [63:8]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2625': A=8'00000000, B=$techmap\cpu.$ternary$polaris.v:182$1011_Y [7:0]
Replacing $or cell `$techmap\cpu.$or$polaris.v:185$1018' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:232$1794' (const_and) in module `\TOP' with constant driver `\cpu.s.R1504 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:229$1774' (const_and) in module `\TOP' with constant driver `\cpu.s.R1501 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:552$2128' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:226$1754' (const_and) in module `\TOP' with constant driver `\cpu.s.R1498 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:552$2129' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:223$1734' (const_and) in module `\TOP' with constant driver `\cpu.s.R1495 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:552$2130' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:215$1686' (const_and) in module `\TOP' with constant driver `\cpu.s.R1487 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:220$1710' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:220$1710_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:221$1720' (const_and) in module `\TOP' with constant driver `\cpu.cdat_imm5 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:552$2131' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:212$1677' (const_and) in module `\TOP' with constant driver `\cpu.s.R1484 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:218$1696' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:218$1696_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:219$1706' (const_and) in module `\TOP' with constant driver `\cpu.cdat_rdat = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:552$2132' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:552$2133' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:552$2134' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:170$1447' (const_and) in module `\TOP' with constant driver `\cpu.s.R1442 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:552$2135' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:166$1423' (const_and) in module `\TOP' with constant driver `\cpu.s.R1438 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:552$2136' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:552$2137' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:552$2138' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:179$1005' (?) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2440 [4:0] = 5'00000'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:190$1565' (const_and) in module `\TOP' with constant driver `\cpu.s.R1462 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:604$2255' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:185$1535' (const_and) in module `\TOP' with constant driver `\cpu.alub_imm12s = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:604$2256' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:150$1360' (const_and) in module `\TOP' with constant driver `\cpu.s.R1422 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:604$2257' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:178$1002' (?) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:178$1002_Y [4:0] = 5'00000'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:228$1766' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:228$1766_Y = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:433$1051' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_minstret = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:432$1050' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mtime = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:431$1049' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mcycle = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:430$1048' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mip = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:429$1047' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mbadaddr = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:428$1046' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mcause = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:427$1045' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mepc = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:426$1044' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mscratch = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:425$1043' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mtvec = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:424$1042' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mie = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:423$1041' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mideleg = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:422$1040' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_medeleg = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:421$1039' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mstatus = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:420$1038' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mhartid = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:419$1037' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mimpid = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:418$1036' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_marchid = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:417$1035' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_mvendorid = 1'0'.
Replacing $eq cell `$techmap\cpu.csrs.$eq$polaris.v:416$1034' (isneq) in module `\TOP' with constant driver `\cpu.csrs.csrv_misa = 1'0'.
Replacing port A of $reduce_or cell `$techmap\cpu.csrs.$reduce_or$polaris.v:442$1052' in module `\TOP' with constant driver: 18'000000000000000000 -> 1'0
Replacing $reduce_or cell `$techmap\cpu.csrs.$reduce_or$polaris.v:442$1052' (1'0) in module `\TOP' with constant driver `\cpu.csrs.cvalid_o = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:228$1768' (const_and) in module `\TOP' with constant driver `\cpu.s.R1500 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:222$1726' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:222$1726_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:222$1728' (const_and) in module `\TOP' with constant driver `\cpu.s.R1494 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:602$2247' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:218$1698' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:218$1698_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:218$1700' (const_and) in module `\TOP' with constant driver `\cpu.s.R1490 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:602$2248' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:189$1559' (const_and) in module `\TOP' with constant driver `\cpu.s.R1461 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:602$2249' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:184$1529' (const_and) in module `\TOP' with constant driver `\cpu.s.R1456 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:602$2250' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:180$1500' (const_and) in module `\TOP' with constant driver `\cpu.s.R1452 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:602$2251' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:167$1429' (const_and) in module `\TOP' with constant driver `\cpu.s.R1439 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:602$2252' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:149$1354' (const_and) in module `\TOP' with constant driver `\cpu.s.R1421 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:602$2253' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:136$1301' (const_and) in module `\TOP' with constant driver `\cpu.s.R1408 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:602$2254' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:177$1000' (?) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:177$1000_Y [4:0] = 5'00000'.
Replacing $or cell `$techmap\cpu.$or$polaris.v:178$1003' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2627': A=1'0, B=1'0
Replacing $or cell `$techmap\cpu.$or$polaris.v:179$1006' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:566$2163' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:507$1106' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:507$1106_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:505$1100' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:505$1100_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:503$1094' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:503$1094_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:502$1091' (0) in module `\TOP' with constant driver `{ $techmap\cpu.csrs.$ternary$polaris.v:502$1091_Y [63] $techmap\cpu.csrs.$ternary$polaris.v:502$1091_Y [3:0] } = 5'00000'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:501$1088' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:501$1088_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:500$1085' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:500$1085_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:493$1064' (0) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2446 [60] = 1'0'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:490$1056' (0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2522 [2] = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2521' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2629': A=1'0, B=1'0
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:495$1070' (0) in module `\TOP' with constant driver `{ $auto$wreduce.cc:347:run$2447 [12] $auto$wreduce.cc:347:run$2447 [7] $auto$wreduce.cc:347:run$2447 [3] } = 3'000'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2525' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:498$1079' (0) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2448 [11] = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2529' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:499$1082' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:499$1082_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:499$1083' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2631': A=61'0000000000000000000000000000000000000000000000000000000000000, B={ $auto$opt_expr.cc:145:group_cell_inputs$2520 [60:13] $auto$opt_expr.cc:145:group_cell_inputs$2524 [12] $auto$opt_expr.cc:145:group_cell_inputs$2528 }
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2633': A=1'0, B=1'0
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:500$1086' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:501$1089' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:502$1092' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:503$1095' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:505$1101' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:507$1107' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:580$2196' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:580$2197' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:614$2272' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:579$2193' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:191$1571' (const_and) in module `\TOP' with constant driver `\cpu.s.R1463 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:579$2194' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:151$1366' (const_and) in module `\TOP' with constant driver `\cpu.s.R1423 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:579$2195' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:181$1506' (const_and) in module `\TOP' with constant driver `\cpu.s.R1453 = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:168$1435' (const_and) in module `\TOP' with constant driver `\cpu.s.R1440 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:577$2190' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:137$1307' (const_and) in module `\TOP' with constant driver `\cpu.s.R1409 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:577$2191' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:174$1469' (const_and) in module `\TOP' with constant driver `\cpu.alub_imm20u = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:171$1453' (const_and) in module `\TOP' with constant driver `\cpu.alub_imm20uj = 1'0'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:170$980' (0) in module `\TOP' with constant driver `{ $techmap\cpu.$ternary$polaris.v:170$980_Y [63] $techmap\cpu.$ternary$polaris.v:170$980_Y [19:1] } = 20'00000000000000000000'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:169$977' (0) in module `\TOP' with constant driver `{ $techmap\cpu.$ternary$polaris.v:169$977_Y [63] $techmap\cpu.$ternary$polaris.v:169$977_Y [30:12] } = 20'00000000000000000000'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:168$974' (0) in module `\TOP' with constant driver `{ $techmap\cpu.$ternary$polaris.v:168$974_Y [63] $techmap\cpu.$ternary$polaris.v:168$974_Y [11:1] } = 12'000000000000'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:167$971' (0) in module `\TOP' with constant driver `{ $techmap\cpu.$ternary$polaris.v:167$971_Y [63] $techmap\cpu.$ternary$polaris.v:167$971_Y [10:0] } = 12'000000000000'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:166$968' (?) in module `\TOP' with constant driver `{ $techmap\cpu.$ternary$polaris.v:166$968_Y [63] $techmap\cpu.$ternary$polaris.v:166$968_Y [10:0] } = 12'000000000000'.
Replacing $or cell `$techmap\cpu.$or$polaris.v:166$969' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.$or$polaris.v:167$972' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.$or$polaris.v:168$975' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.$or$polaris.v:169$978' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.$or$polaris.v:170$981' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:171$983' (?) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2439 [4:0] = 5'00000'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2533' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:576$2185' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:576$2186' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:576$2187' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:576$2188' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:576$2189' in module `\TOP' with identity for port A.
Replacing $not cell `$techmap\cpu.s.$not$seq.v:176$1485' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$not$seq.v:176$1485_Y = 1'1'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:176$1486' (const_and) in module `\TOP' with constant driver `\cpu.s.R1448 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:536$2118' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:536$2119' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:175$1477' (const_and) in module `\TOP' with constant driver `\cpu.alua_0 = 1'0'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:143$942' (0) in module `\TOP' with constant driver `\cpu.ccr_mux = \cpu.ccr'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:140$936' (0) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2438 [4:0] = 5'00000'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:138$931' (0) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:138$931_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.$or$polaris.v:139$934' in module `\TOP' with identity for port B.
Replacing port A of $reduce_or cell `$techmap\cpu.$reduce_or$polaris.v:133$927' in module `\TOP' with constant driver: 5'00000 -> 1'0
Replacing $reduce_or cell `$techmap\cpu.$reduce_or$polaris.v:133$927' (1'0) in module `\TOP' with constant driver `\cpu.r1NotZero = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:553$2142' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:553$2143' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.$and$polaris.v:136$929' (const_and) in module `\TOP' with constant driver `\cpu.csrs.cwe_i = 1'0'.
Replacing $and cell `$techmap\bot.$and$bottleneck.v:66$669' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2635': A=$auto$wreduce.cc:347:run$2428 [15:8], B={ $techmap\bot.$ternary$bottleneck.v:66$668_Y [15] $techmap\bot.$ternary$bottleneck.v:66$668_Y [15] $techmap\bot.$ternary$bottleneck.v:66$668_Y [15] $techmap\bot.$ternary$bottleneck.v:66$668_Y [15] $techmap\bot.$ternary$bottleneck.v:66$668_Y [15] $techmap\bot.$ternary$bottleneck.v:66$668_Y [15] $techmap\bot.$ternary$bottleneck.v:66$668_Y [15] $techmap\bot.$ternary$bottleneck.v:66$668_Y [15] }
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2637': A=8'11111111, B=$auto$wreduce.cc:347:run$2428 [7:0]
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2541' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2639': A=1'0, B=$techmap\bot.$ternary$bottleneck.v:68$670_Y [1]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2641': A=1'0, B=1'0
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2547' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2643': A={ $auto$opt_expr.cc:145:group_cell_inputs$2542 $auto$opt_expr.cc:145:group_cell_inputs$2540 [1] }, B={ $techmap\bot.$ternary$bottleneck.v:68$673_Y [2] $techmap\bot.$ternary$bottleneck.v:68$673_Y [2] }
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2645': A=1'0, B=$auto$opt_expr.cc:145:group_cell_inputs$2540 [0]
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:201$1629' (isneq) in module `\TOP' with constant driver `\cpu.s.R1473 = 1'0'.
Replacing $eq cell `$techmap\cpu.s.$eq$seq.v:200$1627' (isneq) in module `\TOP' with constant driver `$techmap\cpu.s.$eq$seq.v:200$1627_Y = 1'0'.
Replacing port A of $logic_not cell `$techmap\cpu.s.$eq$seq.v:200$1626' in module `\TOP' with constant driver: 4'0000 -> 1'0
Replacing $logic_not cell `$techmap\cpu.s.$eq$seq.v:200$1626' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$eq$seq.v:200$1626_Y = 1'1'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:200$1628' (const_and) in module `\TOP' with constant driver `\cpu.s.R1472 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:528$2096' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:617$2286' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:617$2287' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:617$2288' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:615$2277' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:615$2278' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:615$2279' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:615$2280' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:615$2281' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:615$2282' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:615$2283' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:615$2284' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:615$2285' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:231$1786' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:231$1786_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:231$1788' (const_and) in module `\TOP' with constant driver `\cpu.s.R1503 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2258' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:225$1746' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:225$1746_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:225$1748' (const_and) in module `\TOP' with constant driver `\cpu.s.R1497 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2259' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2260' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:220$1712' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:220$1712_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:220$1714' (const_and) in module `\TOP' with constant driver `\cpu.s.R1492 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2261' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2262' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2264' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2265' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2266' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2267' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2268' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2269' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2270' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2271' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:599$2230' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:599$2232' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:599$2233' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:599$2234' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:599$2235' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:599$2236' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:599$2237' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:599$2238' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:599$2239' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:597$2224' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2537' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.csrs.$and$polaris.v:550$1168' (const_and) in module `\TOP' with constant driver `\cpu.csrs.mcause_we = 1'0'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:554$1171' (0) in module `\TOP' with constant driver `{ $auto$opt_expr.cc:145:group_cell_inputs$2558 $techmap\cpu.csrs.$ternary$polaris.v:554$1171_Y [1:0] } = 5'00000'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2557' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2647': A=1'0, B=$techmap\cpu.csrs.$ternary$polaris.v:555$1172_Y [1]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2649': A=1'0, B=1'0
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:556$1174' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:556$1174_Y [1] = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2561' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:557$1176' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:557$1176_Y [3] = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2565' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2651': A=2'00, B=$auto$opt_expr.cc:145:group_cell_inputs$2560
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2653': A=1'0, B=1'0
Replacing $reduce_or cell `$techmap$techmap2493\cpu.xrs.column3.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491' (unary_buffer) in module `\TOP' with constant driver `$techmap$techmap2492\cpu.xrs.column1.mem.0.0.0.$reduce_or$/usr/local/bin/../share/yosys/ice40/brams_map.v:222$2491_Y = \cpu.ra_ird'.
Replacing $and cell `$techmap\cpu.csrs.$and$polaris.v:560$1181' (const_and) in module `\TOP' with constant driver `\cpu.csrs.mbadaddr_we = 1'0'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:561$1182' (0) in module `\TOP' with constant driver `\cpu.csrs.mbadaddr_mux = \cpu.csrs.mbadaddr'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:558$1180' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2655': A=$auto$opt_expr.cc:145:group_cell_inputs$2564, B=$auto$wreduce.cc:347:run$2453 [3:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2657': A=1'0, B=$auto$wreduce.cc:347:run$2453 [4]
Replacing $and cell `$techmap\cpu.csrs.$and$polaris.v:542$1154' (const_and) in module `\TOP' with constant driver `\cpu.csrs.mepc_we = 1'0'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:545$1158' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:545$1158_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:546$1161' in module `\TOP' with identity for port B.
Replacing $and cell `$techmap\cpu.csrs.$and$polaris.v:539$1152' (const_and) in module `\TOP' with constant driver `\cpu.csrs.mscratch_we = 1'0'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:540$1153' (0) in module `\TOP' with constant driver `\cpu.csrs.mscratch_mux = \cpu.csrs.mscratch'.
Replacing $and cell `$techmap\cpu.csrs.$and$polaris.v:532$1141' (const_and) in module `\TOP' with constant driver `\cpu.csrs.mtvec_we = 1'0'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:535$1145' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:535$1145_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:536$1148' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2659': A=1'0, B=$techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [63]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2661': A=1'0, B=1'0
Replacing $and cell `$techmap\cpu.csrs.$and$polaris.v:515$1116' (const_and) in module `\TOP' with constant driver `\cpu.csrs.mstatus_we = 1'0'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:527$1136' (0) in module `\TOP' with constant driver `$techmap\cpu.csrs.$ternary$polaris.v:527$1136_Y [0] = 1'0'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:527$1137' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:520$1124' (0) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2451 [0] = 1'0'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:519$1121' (0) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2441 [0] = 1'0'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:520$1125' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\cpu.csrs.$and$polaris.v:509$1108' (const_and) in module `\TOP' with constant driver `\cpu.csrs.irqEn_cdat = 1'0'.
Replacing $mux cell `$techmap\cpu.csrs.$ternary$polaris.v:512$1112' (0) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2449 [0] = 1'0'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:513$1115' in module `\TOP' with identity for port B.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:581$2198' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:581$2198_Y = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:581$2199' in module `\TOP' with identity for port B.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:526$2093' (1'0) in module `\TOP' with constant driver `\arb.dwe_i = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:526$2094' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:526$2094_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:526$2095' (1'0) in module `\TOP' with constant driver `\arb.dcyc_i = 1'0'.
Replacing $and cell `$techmap\arb.$and$arbiter.v:70$65' (const_and) in module `\TOP' with constant driver `$techmap\arb.$and$arbiter.v:67$54_Y = 1'0'.
Replacing $and cell `$techmap\arb.$and$arbiter.v:71$72' (const_and) in module `\TOP' with constant driver `$techmap\arb.$and$arbiter.v:67$55_Y = 1'0'.
Replacing $and cell `$techmap\arb.$and$arbiter.v:71$73' (const_and) in module `\TOP' with constant driver `$techmap\arb.$and$arbiter.v:71$73_Y = 1'0'.
Replacing $and cell `$techmap\arb.$and$arbiter.v:70$67' (const_and) in module `\TOP' with constant driver `$techmap\arb.$and$arbiter.v:70$67_Y = 1'0'.
Replacing $and cell `$techmap\arb.$and$arbiter.v:69$62' (const_and) in module `\TOP' with constant driver `$techmap\arb.$and$arbiter.v:69$62_Y = 1'0'.
Replacing $or cell `$techmap\arb.$or$arbiter.v:70$68' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\arb.$or$arbiter.v:71$74' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\arb.$and$arbiter.v:76$85' (const_and) in module `\TOP' with constant driver `$techmap\arb.$and$arbiter.v:76$85_Y = 1'0'.
Replacing $and cell `$techmap\arb.$and$arbiter.v:67$57' (const_and) in module `\TOP' with constant driver `$techmap\arb.$and$arbiter.v:67$57_Y = 1'0'.
Replacing $not cell `$techmap\arb.$not$arbiter.v:66$50' (1'0) in module `\TOP' with constant driver `$techmap\arb.$not$arbiter.v:66$50_Y = 1'1'.
Replacing $or cell `$techmap\arb.$or$arbiter.v:67$58' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\arb.$or$arbiter.v:76$86' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:530$2097' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:530$2097_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:533$2112' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:533$2112_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:533$2113' (1'0) in module `\TOP' with constant driver `\cpu.cdat_alu = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:533$2114' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:533$2114_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:533$2115' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:533$2115_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:533$2116' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:533$2116_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:533$2117' (1'0) in module `\TOP' with constant driver `\cpu.alu.and_en_i = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:530$2098' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:530$2098_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:530$2099' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:530$2099_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:530$2100' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:530$2100_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:530$2101' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:530$2101_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:530$2102' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:530$2102_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:530$2103' (1'0) in module `\TOP' with constant driver `\cpu.alu.invB_en_i = 1'0'.
Replacing $xor cell `$techmap\cpu.alu.$xor$alu.v:26$1' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.alu.$ternary$alu.v:38$11' (0) in module `\TOP' with constant driver `\cpu.alu.ands = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:584$2201' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:584$2201_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:584$2202' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:584$2202_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:584$2203' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:584$2203_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:584$2204' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:584$2204_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:584$2205' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:584$2205_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:584$2206' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:584$2206_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:584$2207' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:584$2207_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:584$2208' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:584$2208_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:584$2209' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:584$2209_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:584$2210' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:584$2210_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:584$2211' (1'0) in module `\TOP' with constant driver `\cpu.alu.sum_en_i = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:532$2104' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:532$2104_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:532$2105' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:532$2105_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:532$2106' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:532$2106_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:532$2107' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:532$2107_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:532$2108' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:532$2108_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:532$2109' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:532$2109_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:532$2110' (1'0) in module `\TOP' with constant driver `\cpu.alu.cflag_i = 1'0'.
Replacing $mux cell `$techmap\cpu.alu.$ternary$alu.v:33$6' (0) in module `\TOP' with constant driver `\cpu.alu.sums = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.alu.$or$alu.v:67$42' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2663': A=1'0, B=1'0
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:588$2214' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:588$2214_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:588$2215' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:588$2215_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:588$2216' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:588$2216_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:588$2217' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:588$2217_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:588$2218' (1'0) in module `\TOP' with constant driver `\cpu.alu.xor_en_i = 1'0'.
Replacing $mux cell `$techmap\cpu.alu.$ternary$alu.v:39$13' (0) in module `\TOP' with constant driver `\cpu.alu.xors = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.alu.$or$alu.v:67$43' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:565$2162' (1'0) in module `\TOP' with constant driver `\cpu.alu.lsh_en_i = 1'0'.
Replacing $mux cell `$techmap\cpu.alu.$ternary$alu.v:47$21' (0) in module `\TOP' with constant driver `\cpu.alu.lshs = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.alu.$or$alu.v:67$44' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:573$2171' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:573$2171_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:573$2172' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:573$2172_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:573$2173' (1'0) in module `\TOP' with constant driver `\cpu.alu.rsh_en_i = 1'0'.
Replacing $mux cell `$techmap\cpu.alu.$ternary$alu.v:49$22' (0) in module `\TOP' with constant driver `\cpu.alu.sx5 [0] = 1'0'.
Replacing $mux cell `$techmap\cpu.alu.$ternary$alu.v:51$24' (0) in module `\TOP' with constant driver `\cpu.alu.sx4 [0] = 1'0'.
Replacing $mux cell `$techmap\cpu.alu.$ternary$alu.v:53$26' (0) in module `\TOP' with constant driver `\cpu.alu.sx3 [0] = 1'0'.
Replacing $mux cell `$techmap\cpu.alu.$ternary$alu.v:55$28' (0) in module `\TOP' with constant driver `\cpu.alu.sx2 [0] = 1'0'.
Replacing $mux cell `$techmap\cpu.alu.$ternary$alu.v:57$30' (0) in module `\TOP' with constant driver `\cpu.alu.sx1 [0] = 1'0'.
Replacing $and cell `$techmap\cpu.alu.$and$alu.v:59$32' (const_and) in module `\TOP' with constant driver `\cpu.alu.sx0 = 1'0'.
Replacing $mux cell `$techmap\cpu.alu.$ternary$alu.v:62$35' (0) in module `\TOP' with constant driver `\cpu.alu.rshs = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.alu.$or$alu.v:67$45' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:582$2200' (1'0) in module `\TOP' with constant driver `\cpu.alu.lts_en_i = 1'0'.
Replacing $mux cell `$techmap\cpu.alu.$ternary$alu.v:64$38' (0) in module `\TOP' with constant driver `\cpu.alu.isLTS = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2501' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:585$2212' (1'0) in module `\TOP' with constant driver `\cpu.alu.ltu_en_i = 1'0'.
Replacing $mux cell `$techmap\cpu.alu.$ternary$alu.v:65$41' (0) in module `\TOP' with constant driver `\cpu.alu.isLTU = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2505' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:148$946' (0) in module `\TOP' with constant driver `\arb.dadr_i [19:0] = 20'00000000000000000000'.
Replacing $mux cell `$techmap\arb.$ternary$arbiter.v:74$79' (?) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2425 [19:0] = 20'00000000000000000000'.
Replacing $or cell `$techmap\arb.$or$arbiter.v:74$80' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2621' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2619' in module `\TOP' with identity for port B.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:558$2148' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:558$2148_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:558$2149' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:558$2149_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:558$2150' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:558$2150_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:558$2151' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:558$2151_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:558$2152' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:558$2152_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:558$2153' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:558$2153_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:558$2154' (1'0) in module `\TOP' with constant driver `\cpu.pc_alu = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:578$2192' (1'0) in module `\TOP' with constant driver `\cpu.sx32_en = 1'0'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:151$949' (0) in module `\TOP' with constant driver `\cpu.aluXResult [63:32] = \cpu.alu.out_o [63:32]'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:183$1013' (0) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:183$1013_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2625' in module `\TOP' with identity for port B.
Replacing $or cell `$techmap\cpu.$or$polaris.v:183$1014' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2627' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.$or$polaris.v:179$1006' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2665': A=$auto$opt_expr.cc:145:group_cell_inputs$2626
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:566$2163' (1'0) in module `\TOP' with constant driver `\cpu.rdat_pc = 1'0'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:176$997' (0) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:176$997_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:552$2128' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:552$2128_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:552$2129' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:552$2129_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:552$2130' (1'0) in module `\TOP' with constant driver `\cpu.alua_cdat = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:552$2131' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:552$2131_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:552$2132' (1'0) in module `\TOP' with constant driver `\cpu.rdat_cdat = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2633' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2629' in module `\TOP' with identity for port A.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2525' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2667': A=$auto$opt_expr.cc:145:group_cell_inputs$2628
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2631' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2669': A=14'00000000000000, B={ $auto$opt_expr.cc:145:group_cell_inputs$2628 $auto$opt_expr.cc:145:group_cell_inputs$2524 [12] $auto$opt_expr.cc:145:group_cell_inputs$2528 }
Replacing $pos cell `$techmap\cpu.csrs.$or$polaris.v:500$1086' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2671': A={ $auto$opt_expr.cc:145:group_cell_inputs$2632 $auto$opt_expr.cc:145:group_cell_inputs$2630 }
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:175$994' (0) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:175$994_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:580$2196' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:580$2196_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:580$2197' (1'0) in module `\TOP' with constant driver `\cpu.rdat_alu = 1'0'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:173$989' (0) in module `\TOP' with constant driver `$techmap\cpu.$or$polaris.v:174$992_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.$or$polaris.v:175$995' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2673': A=1'0, B=1'0
Replacing $or cell `$techmap\cpu.$or$polaris.v:176$998' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:614$2272' (1'0) in module `\TOP' with constant driver `\cpu.alub_imm5 = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:579$2193' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:579$2193_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:579$2194' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:579$2194_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:579$2195' (1'0) in module `\TOP' with constant driver `\cpu.alub_rdat = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:577$2190' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:577$2190_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:577$2191' (1'0) in module `\TOP' with constant driver `\cpu.alub_imm12i = 1'0'.
Replacing port A of $reduce_or cell `$techmap\cpu.$reduce_or$polaris.v:158$952' in module `\TOP' with constant driver: 7'0000000 -> 1'0
Replacing $reduce_or cell `$techmap\cpu.$reduce_or$polaris.v:158$952' (1'0) in module `\TOP' with constant driver `$techmap\cpu.$reduce_or$polaris.v:158$952_Y = 1'0'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:172$986' (0) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:172$986_Y = \cpu.alub'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:165$966' (0) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:165$966_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$or$polaris.v:166$969' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2675': A=1'0
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2641' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2645' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2639' in module `\TOP' with identity for port B.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:576$2185' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:576$2185_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:576$2186' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:576$2186_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:576$2187' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:576$2187_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:576$2188' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:576$2188_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:576$2189' (1'0) in module `\TOP' with constant driver `\cpu.alua_rdat = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:536$2118' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:536$2118_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:536$2119' (1'0) in module `\TOP' with constant driver `\cpu.alua_ia = 1'0'.
Replacing port A of $reduce_or cell `$techmap\cpu.$reduce_or$polaris.v:157$950' in module `\TOP' with constant driver: 4'0000 -> 1'0
Replacing $reduce_or cell `$techmap\cpu.$reduce_or$polaris.v:157$950' (1'0) in module `\TOP' with constant driver `$techmap\cpu.$reduce_or$polaris.v:157$950_Y = 1'0'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:163$963' (0) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:163$963_Y = \cpu.alua'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:162$960' (0) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:162$960_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:161$957' (0) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:161$957_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:160$955' (0) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:160$955_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.$or$polaris.v:161$958' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2677': A=1'0, B=1'0
Replacing $or cell `$techmap\cpu.$or$polaris.v:162$961' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:149$948' (0) in module `\TOP' with constant driver `\arb.ddat_i = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\arb.$ternary$arbiter.v:73$76' (?) in module `\TOP' with constant driver `\arb.xdat_o = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:66$666' (?) in module `\TOP' with constant driver `$techmap\bot.$ternary$bottleneck.v:66$666_Y [15:0] = 16'0000000000000000'.
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:65$663' (?) in module `\TOP' with constant driver `$techmap\bot.$ternary$bottleneck.v:65$663_Y [15:0] = 16'0000000000000000'.
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:64$660' (?) in module `\TOP' with constant driver `$techmap\bot.$ternary$bottleneck.v:64$660_Y [15:0] = 16'0000000000000000'.
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:63$658' (?) in module `\TOP' with constant driver `$techmap\bot.$ternary$bottleneck.v:63$658_Y [15:0] = 16'0000000000000000'.
Replacing $or cell `$techmap\bot.$or$bottleneck.v:64$661' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2679': A=1'0, B=1'0
Replacing $or cell `$techmap\bot.$or$bottleneck.v:65$664' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\bot.$or$bottleneck.v:66$667' in module `\TOP' with identity for port A.
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:139$933' (0) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:139$933_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $pos cell `$techmap\cpu.$or$polaris.v:139$934' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2681': A=1'0
Replacing $and cell `$techmap\arb.$and$arbiter.v:75$82' (const_and) in module `\TOP' with constant driver `\arb.xwe_o = 1'0'.
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:58$646' (?) in module `\TOP' with constant driver `\ram.sram_we_i = 1'0'.
Replacing $and cell `$techmap\ram.$and$sram.v:27$2305' (const_and) in module `\TOP' with constant driver `$techmap\ram.$and$sram.v:27$2305_Y = 1'0'.
Replacing $and cell `$techmap\ram.$and$sram.v:37$2301' (const_and) in module `\TOP' with constant driver `$techmap\ram.$and$sram.v:37$2301_Y = 1'0'.
Replacing $and cell `$techmap\ram.$and$sram.v:37$2302' (const_and) in module `\TOP' with constant driver `$techmap\ram.$and$sram.v:37$2302_Y = 1'0'.
Replacing $not cell `$techmap\ram.$not$sram.v:37$2303' (1'0) in module `\TOP' with constant driver `\sram_ube_on = 1'1'.
Replacing $and cell `$techmap\ram.$and$sram.v:36$2298' (const_and) in module `\TOP' with constant driver `$techmap\ram.$and$sram.v:36$2298_Y = 1'0'.
Replacing $and cell `$techmap\ram.$and$sram.v:36$2299' (const_and) in module `\TOP' with constant driver `$techmap\ram.$and$sram.v:36$2299_Y = 1'0'.
Replacing $not cell `$techmap\ram.$not$sram.v:36$2300' (1'0) in module `\TOP' with constant driver `\sram_lbe_on = 1'1'.
Replacing $not cell `$techmap\ram.$not$sram.v:35$2293' (1'0) in module `\TOP' with constant driver `$techmap\ram.$not$sram.v:35$2293_Y = 1'1'.
Replacing $and cell `$techmap\ram.$and$sram.v:34$2291' (const_and) in module `\TOP' with constant driver `$techmap\ram.$and$sram.v:34$2291_Y = 1'0'.
Replacing $not cell `$techmap\ram.$not$sram.v:34$2292' (1'0) in module `\TOP' with constant driver `\sram_we_on = 1'1'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:528$2096' (1'0) in module `\TOP' with constant driver `\cpu.s.isFence = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:202$1633' (const_and) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:202$1633_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:204$1647' (const_and) in module `\TOP' with constant driver `\cpu.s.R1476 = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:617$2286' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:617$2286_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:617$2287' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:617$2287_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:617$2288' (1'0) in module `\TOP' with constant driver `\cpu.xt3_o = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:203$1641' (const_and) in module `\TOP' with constant driver `\cpu.s.R1475 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:615$2276' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2258' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:613$2258_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2259' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:613$2259_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2260' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:613$2260_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2261' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:613$2261_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2262' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:613$2262_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:202$1635' (const_and) in module `\TOP' with constant driver `\cpu.s.R1474 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:613$2263' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:604$2255' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:604$2255_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:604$2256' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:604$2256_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:604$2257' (1'0) in module `\TOP' with constant driver `\cpu.ra_ir2 = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:602$2247' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:602$2247_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:602$2248' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:602$2248_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:602$2249' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:602$2249_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:602$2250' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:602$2250_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:602$2251' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:602$2251_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:602$2252' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:602$2252_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:602$2253' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:602$2253_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:602$2254' (1'0) in module `\TOP' with constant driver `\cpu.ra_ir1 = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:553$2142' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:553$2142_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:553$2143' (1'0) in module `\TOP' with constant driver `\cpu.cwe_1 = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:599$2230' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:599$2230_Y = 1'0'.
Replacing $and cell `$techmap\cpu.s.$and$seq.v:205$1653' (const_and) in module `\TOP' with constant driver `\cpu.s.R1477 = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:599$2231' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:552$2133' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:552$2133_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:552$2134' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:552$2134_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:552$2135' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:552$2135_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:552$2136' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:552$2136_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:552$2137' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:552$2137_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:552$2138' (1'0) in module `\TOP' with constant driver `\cpu.ra_ird = 1'0'.
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$2551' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2550 = 1'1'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2649' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2647' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2657' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2653' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2651' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2661' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2659' in module `\TOP' with identity for port B.
Replacing $pos cell `$techmap\cpu.csrs.$or$polaris.v:520$1125' (1'0) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2442 [0] = 1'0'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:521$1128' in module `\TOP' with identity for port B.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2621' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2620 = 1'0'.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:48$132' (const_and) in module `\TOP' with constant driver `$techmap\bot.bs.$and$bottleneckSequencer.v:48$132_Y = 1'0'.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:48$135' (const_and) in module `\TOP' with constant driver `\bot.bs.R1393 = 1'0'.
Replacing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:47$120' (1'0) in module `\TOP' with constant driver `$techmap\bot.bs.$not$bottleneckSequencer.v:47$120_Y = 1'1'.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:172$631' in module `\TOP' with identity for port B.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$307' (const_and) in module `\TOP' with constant driver `$techmap\bot.bs.$and$bottleneckSequencer.v:54$249_Y = 1'0'.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$310' (const_and) in module `\TOP' with constant driver `$techmap\bot.bs.$and$bottleneckSequencer.v:54$252_Y = 1'0'.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$313' (const_and) in module `\TOP' with constant driver `$techmap\bot.bs.$and$bottleneckSequencer.v:54$255_Y = 1'0'.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$316' (const_and) in module `\TOP' with constant driver `$techmap\bot.bs.$and$bottleneckSequencer.v:54$258_Y = 1'0'.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$428' (const_and) in module `\TOP' with constant driver `$techmap\bot.bs.$and$bottleneckSequencer.v:60$428_Y = 1'0'.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$430' (const_and) in module `\TOP' with constant driver `$techmap\bot.bs.$and$bottleneckSequencer.v:60$430_Y = 1'0'.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:60$432' (const_and) in module `\TOP' with constant driver `\bot.bs.R1405 = 1'0'.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$319' (const_and) in module `\TOP' with constant driver `$techmap\bot.bs.$and$bottleneckSequencer.v:54$261_Y = 1'0'.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$377' (const_and) in module `\TOP' with constant driver `$techmap\bot.bs.$and$bottleneckSequencer.v:58$377_Y = 1'0'.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:58$379' (const_and) in module `\TOP' with constant driver `\bot.bs.R1403 = 1'0'.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$632' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$322' (const_and) in module `\TOP' with constant driver `$techmap\bot.bs.$and$bottleneckSequencer.v:54$264_Y = 1'0'.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:56$324' (const_and) in module `\TOP' with constant driver `\bot.Hold2_SDatI = 1'0'.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$633' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:54$267' (const_and) in module `\TOP' with constant driver `\bot.Hold3_SDatI = 1'0'.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$634' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:62$487' (const_and) in module `\TOP' with constant driver `\bot.bs.R1407 = 1'0'.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:167$629' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2673' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.$or$polaris.v:176$998' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2683': A=$auto$opt_expr.cc:145:group_cell_inputs$2672
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2629' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2628 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2667' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2666 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2529' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2685': A=1'0
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2669' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2687': A=12'000000000000, B=$auto$opt_expr.cc:145:group_cell_inputs$2528
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2689': A=1'0, B=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2633' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2632 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2671' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2691': A=$auto$opt_expr.cc:145:group_cell_inputs$2668
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2693': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2675' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2674 = 1'0'.
Replacing $pos cell `$techmap\cpu.$or$polaris.v:167$972' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2695': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2641' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2640 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2645' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2644 = 1'0'.
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:68$673' (0) in module `\TOP' with constant driver `$techmap\bot.$ternary$bottleneck.v:68$673_Y [2] = 1'0'.
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:68$671' (0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2542 = 1'0'.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:168$630' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2643' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2697': A=1'0, B=$auto$opt_expr.cc:145:group_cell_inputs$2638
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2699': A=1'0, B=1'0
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2677' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.$or$polaris.v:162$961' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2701': A=$auto$opt_expr.cc:145:group_cell_inputs$2676
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2627' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2626 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2665' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2664 = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2663' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\cpu.alu.$or$alu.v:67$43' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2703': A=$auto$opt_expr.cc:145:group_cell_inputs$2662
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2679' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\bot.$or$bottleneck.v:65$664' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2705': A=$auto$opt_expr.cc:145:group_cell_inputs$2678
Replacing $mux cell `$techmap\bot.$ternary$bottleneck.v:60$652' (?) in module `\TOP' with constant driver `$techmap\bot.$ternary$bottleneck.v:60$652_Y [0] = 1'0'.
Replacing $or cell `$techmap\bot.$or$bottleneck.v:60$654' in module `\TOP' with identity for port B.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$637' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2573' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2707': A=\bot.m_adr_i [2:1], B=$auto$opt_expr.cc:145:group_cell_inputs$2642
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2709': A=1'0, B=\bot.m_adr_i [0]
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2681' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2680 = 1'0'.
Replacing $pos cell `$techmap\arb.$or$arbiter.v:70$68' (1'0) in module `\TOP' with constant driver `$techmap\arb.$or$arbiter.v:70$68_Y = 1'0'.
Replacing $pos cell `$techmap\arb.$or$arbiter.v:71$74' (1'0) in module `\TOP' with constant driver `\arb.en_d = 1'0'.
Replacing $and cell `$techmap\arb.$and$arbiter.v:82$97' (const_and) in module `\TOP' with constant driver `\arb.dack_o = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:615$2276' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:615$2276_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:615$2277' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:615$2277_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:615$2278' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:615$2278_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:615$2279' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:615$2279_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:615$2280' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:615$2280_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:615$2281' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:615$2281_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:615$2282' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:615$2282_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:615$2283' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:615$2283_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:615$2284' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:615$2284_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:615$2285' (1'0) in module `\TOP' with constant driver `\cpu.xt2_o = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2263' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:613$2263_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2264' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:613$2264_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2265' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:613$2265_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2266' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:613$2266_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2267' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:613$2267_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2268' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:613$2268_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2269' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:613$2269_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2270' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:613$2270_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:613$2271' (1'0) in module `\TOP' with constant driver `\cpu.xt1_o = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:599$2231' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:599$2231_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:599$2232' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:599$2232_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:599$2233' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:599$2233_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:599$2234' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:599$2234_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:599$2235' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:599$2235_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:599$2236' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:599$2236_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:599$2237' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:599$2237_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:599$2238' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:599$2238_Y = 1'0'.
Replacing $pos cell `$techmap\cpu.s.$or$seq.v:599$2239' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$or$seq.v:599$2239_Y = 1'0'.
Replacing $or cell `$techmap\cpu.s.$or$seq.v:599$2241' in module `\TOP' with identity for port B.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2649' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2648 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2561' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2711': A=$auto$opt_expr.cc:145:group_cell_inputs$2646
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2713': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2537' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2715': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2653' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2652 = 1'0'.
Replacing $not cell `$techmap\cpu.s.$not$seq.v:182$1514' (1'0) in module `\TOP' with constant driver `$techmap\cpu.s.$not$seq.v:182$1514_Y = 1'1'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2655' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2717': A=$auto$opt_expr.cc:145:group_cell_inputs$2650, B=$auto$wreduce.cc:347:run$2453 [1:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2719': A=2'00, B=$auto$wreduce.cc:347:run$2453 [3:2]
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2661' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2660 = 1'0'.
Replacing $or cell `$techmap\cpu.csrs.$or$polaris.v:537$1151' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2721': A={ $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 $auto$opt_expr.cc:145:group_cell_inputs$2658 }, B=$techmap\cpu.csrs.$ternary$polaris.v:537$1150_Y [63:9]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2723': A=9'000000000, B=$techmap\cpu.csrs.$ternary$polaris.v:537$1150_Y [8:0]
Replacing $pos cell `$techmap\cpu.csrs.$or$polaris.v:501$1089' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2725': A=$auto$opt_expr.cc:145:group_cell_inputs$2670
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:166$626' in module `\TOP' with identity for port B.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:165$624' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:61$460' (const_and) in module `\TOP' with constant driver `\bot.bs.R1406 = 1'0'.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:59$407' (const_and) in module `\TOP' with constant driver `\bot.bs.R1404 = 1'0'.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:160$604' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:161$608' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:57$353' (const_and) in module `\TOP' with constant driver `\bot.bs.R1402 = 1'0'.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:161$609' in module `\TOP' with identity for port A.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:162$613' in module `\TOP' with identity for port A.
Replacing $and cell `$techmap\bot.bs.$and$bottleneckSequencer.v:55$297' (const_and) in module `\TOP' with constant driver `\bot.bs.R1400 = 1'0'.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:162$614' in module `\TOP' with identity for port A.
Replacing $pos cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$632' (1'0) in module `\TOP' with constant driver `$techmap\bot.bs.$or$bottleneckSequencer.v:153$578_Y = 1'0'.
Replacing $pos cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$633' (1'0) in module `\TOP' with constant driver `$techmap\bot.bs.$or$bottleneckSequencer.v:153$579_Y = 1'0'.
Replacing $pos cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$634' (1'0) in module `\TOP' with constant driver `$techmap\bot.bs.$or$bottleneckSequencer.v:153$580_Y = 1'0'.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$635' in module `\TOP' with identity for port B.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2695' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2694 = 1'0'.
Replacing $pos cell `$techmap\cpu.$or$polaris.v:168$975' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2727': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2677' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2676 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2701' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2700 = 1'0'.
Replacing $or cell `$techmap\cpu.$or$polaris.v:163$964' in module `\TOP' with identity for port B.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2663' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2662 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2703' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2702 = 1'0'.
Replacing $pos cell `$techmap\cpu.alu.$or$alu.v:67$44' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2729': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2679' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2678 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2705' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2704 = 1'0'.
Replacing $pos cell `$techmap\bot.$or$bottleneck.v:66$667' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2731': A=1'0
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2697' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2699' in module `\TOP' with identity for port A.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2709' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2723' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2689' in module `\TOP' with identity for port A.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2685' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2684 = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2687' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2733': A=1'0, B=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2691' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2735': A={ $auto$opt_expr.cc:145:group_cell_inputs$2688 $auto$opt_expr.cc:145:group_cell_inputs$2686 }
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2693' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2692 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2725' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2737': A=$auto$opt_expr.cc:145:group_cell_inputs$2690
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2739': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2713' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2712 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2715' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2714 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2651' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2741': A=$auto$opt_expr.cc:145:group_cell_inputs$2710
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2743': A=1'0
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2719' in module `\TOP' with identity for port B.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2673' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2672 = 1'0'.
Replacing $pos cell `$techmap\cpu.csrs.$or$polaris.v:502$1092' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2745': A=$auto$opt_expr.cc:145:group_cell_inputs$2724
Replacing $pos cell `$techmap\bot.bs.$or$bottleneckSequencer.v:160$604' (1'0) in module `\TOP' with constant driver `$techmap\bot.bs.$or$bottleneckSequencer.v:160$604_Y = 1'0'.
Replacing $pos cell `$techmap\bot.bs.$or$bottleneckSequencer.v:161$608' (1'0) in module `\TOP' with constant driver `$techmap\bot.bs.$or$bottleneckSequencer.v:161$608_Y = 1'0'.
Replacing $pos cell `$techmap\bot.bs.$or$bottleneckSequencer.v:161$609' (1'0) in module `\TOP' with constant driver `\bot.ack2_o = 1'0'.
Replacing $pos cell `$techmap\bot.bs.$or$bottleneckSequencer.v:162$613' (1'0) in module `\TOP' with constant driver `$techmap\bot.bs.$or$bottleneckSequencer.v:162$613_Y = 1'0'.
Replacing $pos cell `$techmap\bot.bs.$or$bottleneckSequencer.v:162$614' (1'0) in module `\TOP' with constant driver `\bot.ack3_o = 1'0'.
Replacing $or cell `$techmap\bot.bs.$or$bottleneckSequencer.v:160$605' in module `\TOP' with identity for port B.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2683' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2682 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2727' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2726 = 1'0'.
Replacing $pos cell `$techmap\cpu.$or$polaris.v:169$978' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2747': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2729' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2728 = 1'0'.
Replacing $pos cell `$techmap\cpu.alu.$or$alu.v:67$45' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2749': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2731' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2730 = 1'0'.
Replacing $and cell `$auto$opt_expr.cc:158:group_cell_inputs$2637' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2751': A=1'0, B=1'0
Replacing $and cell `$auto$opt_expr.cc:158:group_cell_inputs$2635' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2753': A=1'0, B=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2699' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2698 = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2707' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2755': A=\bot.m_adr_i [1], B=$auto$opt_expr.cc:145:group_cell_inputs$2696
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2757': A=1'0, B=\bot.m_adr_i [2]
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2733' in module `\TOP' with identity for port A.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2689' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2688 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2735' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2759': A=$auto$opt_expr.cc:145:group_cell_inputs$2732
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2761': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2737' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2763': A=$auto$opt_expr.cc:145:group_cell_inputs$2734
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2739' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2738 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2743' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2742 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2745' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2765': A=$auto$opt_expr.cc:145:group_cell_inputs$2736
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2767': A=1'0
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2717' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2769': A=$auto$opt_expr.cc:145:group_cell_inputs$2740, B=$auto$wreduce.cc:347:run$2453 [1]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2771': A=1'0, B=$auto$wreduce.cc:347:run$2453 [0]
Replacing $pos cell `$techmap\cpu.csrs.$or$polaris.v:503$1095' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2773': A=$auto$opt_expr.cc:145:group_cell_inputs$2744
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2747' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2746 = 1'0'.
Replacing $pos cell `$techmap\cpu.$or$polaris.v:170$981' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2775': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2749' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2748 = 1'0'.
Replacing $xor cell `$techmap\cpu.$xor$polaris.v:142$938' in module `\TOP' with identity for port B.
Replacing $and cell `$auto$opt_expr.cc:158:group_cell_inputs$2753' (const_and) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2752 = 1'0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:113$844' (?) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2455 [7:0] = 8'00000000'.
Replacing $and cell `$auto$opt_expr.cc:158:group_cell_inputs$2751' (const_and) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2750 = 1'0'.
Replacing $mux cell `$techmap\wb_bridge.$ternary$bridge.v:112$842' (?) in module `\TOP' with constant driver `$auto$wreduce.cc:347:run$2454 [7:0] = 8'00000000'.
Replacing $or cell `$techmap\wb_bridge.$or$bridge.v:113$845' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2777': A=1'0, B=1'0
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2757' in module `\TOP' with identity for port B.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2501' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2500 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2733' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2732 = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2771' in module `\TOP' with identity for port B.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2767' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2766 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2759' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2758 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2761' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2760 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2763' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2779': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2765' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2781': A=$auto$opt_expr.cc:145:group_cell_inputs$2762
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2773' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2783': A=$auto$opt_expr.cc:145:group_cell_inputs$2764
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2785': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2505' (1'0) in module `\TOP' with constant driver `\cpu.alu.out_o [0] = 1'0'.
Replacing $pos cell `$techmap\cpu.csrs.$or$polaris.v:505$1101' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2787': A=$auto$opt_expr.cc:145:group_cell_inputs$2772
Replacing port A of $reduce_or cell `$techmap\cpu.alu.$reduce_or$alu.v:34$7' in module `\TOP' with constant driver: 64'0000000000000000000000000000000000000000000000000000000000000000 -> 1'0
Replacing $reduce_or cell `$techmap\cpu.alu.$reduce_or$alu.v:34$7' (1'0) in module `\TOP' with constant driver `$techmap\cpu.$not$polaris.v:143$939_Y = 1'0'.
Replacing $not cell `$techmap\cpu.alu.$not$alu.v:34$8' (1'0) in module `\TOP' with constant driver `\cpu.zflag_o = 1'1'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2775' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2774 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2533' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2789': A=1'0
Replacing $or cell `$techmap\cpu.$or$polaris.v:172$987' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2791': A=$auto$opt_expr.cc:145:group_cell_inputs$2532, B=\cpu.alub [4:0]
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2793': A=59'00000000000000000000000000000000000000000000000000000000000, B=\cpu.alub [63:5]
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2777' in module `\TOP' with identity for port A.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2785' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2784 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2779' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2778 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2781' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2795': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2783' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2797': A=$auto$opt_expr.cc:145:group_cell_inputs$2780
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2787' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2799': A=$auto$opt_expr.cc:145:group_cell_inputs$2782
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2801': A=1'0
Replacing $pos cell `$techmap\cpu.csrs.$or$polaris.v:507$1107' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2803': A=$auto$opt_expr.cc:145:group_cell_inputs$2786
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2795' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2794 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2797' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2805': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2799' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2807': A=$auto$opt_expr.cc:145:group_cell_inputs$2796
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2801' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2800 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2803' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2809': A=$auto$opt_expr.cc:145:group_cell_inputs$2798
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2811': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2777' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2776 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2789' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2788 = 1'0'.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2791' in module `\TOP' with identity for port B.
Replacing $or cell `$auto$opt_expr.cc:158:group_cell_inputs$2793' in module `\TOP' with identity for port B.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2805' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2804 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2807' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2813': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2809' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2815': A=$auto$opt_expr.cc:145:group_cell_inputs$2806
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2811' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2810 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2813' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2812 = 1'0'.
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2815' in module `TOP' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$2817': A=1'0
Replacing $pos cell `$auto$opt_expr.cc:158:group_cell_inputs$2817' (1'0) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2816 = 1'0'.

12.12.9. Rerunning OPT passes. (Maybe there is more to do..)

12.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:181$1009 (pure)
    Root of a mux tree: $procmux$2373 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:513$1114 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$78 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:525$1132 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$715 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:182$1011 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:184$1015 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:186$1019 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:188$1023 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:189$1025 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:566$1196 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:69$677 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:555$1172 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:558$1179 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:563$1186 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:565$1191 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:546$1160 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:548$1166 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:528$1139 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:536$1147 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:537$1150 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$648 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$90 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$670 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:521$1127 (pure)
  Analyzing evaluation results.
    dead port 1/2 on $mux $techmap\cpu.alu.$ternary$alu.v:50$23.
    dead port 2/2 on $mux $techmap\cpu.alu.$ternary$alu.v:50$23.
    dead port 1/2 on $mux $techmap\cpu.alu.$ternary$alu.v:52$25.
    dead port 2/2 on $mux $techmap\cpu.alu.$ternary$alu.v:52$25.
    dead port 1/2 on $mux $techmap\cpu.alu.$ternary$alu.v:54$27.
    dead port 2/2 on $mux $techmap\cpu.alu.$ternary$alu.v:54$27.
    dead port 1/2 on $mux $techmap\cpu.alu.$ternary$alu.v:41$14.
    dead port 2/2 on $mux $techmap\cpu.alu.$ternary$alu.v:41$14.
    dead port 1/2 on $mux $techmap\cpu.alu.$ternary$alu.v:42$15.
    dead port 2/2 on $mux $techmap\cpu.alu.$ternary$alu.v:42$15.
    dead port 1/2 on $mux $techmap\cpu.alu.$ternary$alu.v:43$16.
    dead port 2/2 on $mux $techmap\cpu.alu.$ternary$alu.v:43$16.
    dead port 1/2 on $mux $techmap\cpu.alu.$ternary$alu.v:44$17.
    dead port 2/2 on $mux $techmap\cpu.alu.$ternary$alu.v:44$17.
    dead port 1/2 on $mux $techmap\cpu.alu.$ternary$alu.v:45$18.
    dead port 2/2 on $mux $techmap\cpu.alu.$ternary$alu.v:45$18.
    dead port 1/2 on $mux $techmap\cpu.alu.$ternary$alu.v:46$19.
    dead port 2/2 on $mux $techmap\cpu.alu.$ternary$alu.v:46$19.
    dead port 1/2 on $mux $techmap\cpu.alu.$ternary$alu.v:56$29.
    dead port 2/2 on $mux $techmap\cpu.alu.$ternary$alu.v:56$29.
    dead port 1/2 on $mux $techmap\cpu.alu.$ternary$alu.v:58$31.
    dead port 2/2 on $mux $techmap\cpu.alu.$ternary$alu.v:58$31.
    dead port 1/2 on $mux $techmap\cpu.alu.$ternary$alu.v:61$33.
    dead port 2/2 on $mux $techmap\cpu.alu.$ternary$alu.v:61$33.
    dead port 1/2 on $mux $techmap\bot.$ternary$bottleneck.v:66$668.
    dead port 2/2 on $mux $techmap\bot.$ternary$bottleneck.v:66$668.
    dead port 1/2 on $mux $techmap\cpu.xrs.$ternary$xrs.v:23$2344.
    dead port 2/2 on $mux $techmap\cpu.xrs.$ternary$xrs.v:23$2344.
Removed 28 multiplexer ports.

12.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TOP.
    New input vector for $reduce_or cell $techmap\cpu.$reduce_or$polaris.v:180$1007: { \cpu.ia_pc \cpu.rst \cpu.csrs.mepc_ia }
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:523$1129: { \cpu.csrs.mepc_ia \cpu.csrs.mpie_1 }
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:551$1169: \cpu.csrs.mcause_2
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:533$1142: \cpu_reset
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:516$1117: \cpu.csrs.mie_0
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:510$1109: \cpu_reset
    New input vector for $reduce_or cell $techmap\cpu.csrs.$reduce_or$polaris.v:543$1155: \cpu.csrs.mepc_ia
  Optimizing cells in module \TOP.
Performed a total of 7 changes.

12.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
  Cell `$techmap\cpu.csrs.$reduce_or$polaris.v:533$1142' is identical to cell `$techmap\cpu.csrs.$reduce_or$polaris.v:510$1109'.
    Redirecting output \Y: $techmap\cpu.csrs.$reduce_or$polaris.v:533$1142_Y = $techmap\cpu.csrs.$reduce_or$polaris.v:510$1109_Y
    Removing $reduce_or cell `$techmap\cpu.csrs.$reduce_or$polaris.v:533$1142' from module `\TOP'.
  Cell `$techmap\cpu.$procdff$2411' is identical to cell `$techmap\bot.$procdff$2416'.
    Redirecting output \Q: \cpu.xt4 = \bot.ack3
    Removing $dff cell `$techmap\cpu.$procdff$2411' from module `\TOP'.
  Cell `$techmap\cpu.$procdff$2408' is identical to cell `$techmap\bot.$procdff$2416'.
    Redirecting output \Q: \cpu.xt1 = \bot.ack3
    Removing $dff cell `$techmap\cpu.$procdff$2408' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$637' is identical to cell `$techmap\bot.$or$bottleneck.v:60$654'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:163$620_Y = \bot.s_siz_o
    Removing $pos cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$637' from module `\TOP'.
  Cell `$techmap\cpu.$procdff$2410' is identical to cell `$techmap\bot.$procdff$2416'.
    Redirecting output \Q: \cpu.xt3 = \bot.ack3
    Removing $dff cell `$techmap\cpu.$procdff$2410' from module `\TOP'.
  Cell `$techmap\cpu.$procdff$2409' is identical to cell `$techmap\bot.$procdff$2416'.
    Redirecting output \Q: \cpu.xt2 = \bot.ack3
    Removing $dff cell `$techmap\cpu.$procdff$2409' from module `\TOP'.
  Cell `$techmap\arb.$procdff$2423' is identical to cell `$techmap\bot.$procdff$2416'.
    Redirecting output \Q: \arb.reserve_d = \bot.ack3
    Removing $dff cell `$techmap\arb.$procdff$2423' from module `\TOP'.
  Cell `$techmap\bot.bs.$or$bottleneckSequencer.v:166$626' is identical to cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$635'.
    Redirecting output \Y: $techmap\bot.bs.$or$bottleneckSequencer.v:165$623_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:153$581_Y
    Removing $pos cell `$techmap\bot.bs.$or$bottleneckSequencer.v:166$626' from module `\TOP'.
  Cell `$techmap\bot.$procdff$2417' is identical to cell `$techmap\bot.$procdff$2416'.
    Redirecting output \Q: \bot.ack2 = \bot.ack3
    Removing $dff cell `$techmap\bot.$procdff$2417' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:138$1311' is identical to cell `$techmap\cpu.s.$and$seq.v:152$1370'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:138$1311_Y = $techmap\cpu.s.$and$seq.v:152$1370_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:138$1311' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:125$1274' is identical to cell `$techmap\cpu.s.$not$seq.v:125$1271'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:125$1274_Y = $techmap\cpu.s.$not$seq.v:125$1271_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:125$1274' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:125$1277' is identical to cell `$techmap\cpu.s.$not$seq.v:125$1271'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:125$1277_Y = $techmap\cpu.s.$not$seq.v:125$1271_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:125$1277' from module `\TOP'.
  Cell `$techmap\cpu.s.$not$seq.v:125$1280' is identical to cell `$techmap\cpu.s.$not$seq.v:125$1271'.
    Redirecting output \Y: $techmap\cpu.s.$not$seq.v:125$1280_Y = $techmap\cpu.s.$not$seq.v:125$1271_Y
    Removing $not cell `$techmap\cpu.s.$not$seq.v:125$1280' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:137$1305' is identical to cell `$techmap\cpu.s.$and$seq.v:152$1370'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:137$1305_Y = $techmap\cpu.s.$and$seq.v:152$1370_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:137$1305' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$266' is identical to cell `$techmap\cpu.s.$not$seq.v:125$1271'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:54$266_Y = $techmap\cpu.s.$not$seq.v:125$1271_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$266' from module `\TOP'.
  Cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$263' is identical to cell `$techmap\cpu.s.$not$seq.v:125$1271'.
    Redirecting output \Y: $techmap\bot.bs.$not$bottleneckSequencer.v:54$263_Y = $techmap\cpu.s.$not$seq.v:125$1271_Y
    Removing $not cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$263' from module `\TOP'.
  Cell `$techmap\arb.$not$arbiter.v:67$56' is identical to cell `$techmap\cpu.s.$not$seq.v:125$1271'.
    Redirecting output \Y: $techmap\arb.$not$arbiter.v:67$56_Y = $techmap\cpu.s.$not$seq.v:125$1271_Y
    Removing $not cell `$techmap\arb.$not$arbiter.v:67$56' from module `\TOP'.
  Cell `$techmap\cpu.s.$and$seq.v:193$1581' is identical to cell `$techmap\cpu.s.$and$seq.v:152$1370'.
    Redirecting output \Y: $techmap\cpu.s.$and$seq.v:193$1581_Y = $techmap\cpu.s.$and$seq.v:152$1370_Y
    Removing $and cell `$techmap\cpu.s.$and$seq.v:193$1581' from module `\TOP'.
Removed a total of 18 cells.

12.12.13. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $techmap\bot.$procdff$2416 ($dff) from module TOP.
Removing $techmap\cpu.csrs.$procdff$2397 ($dff) from module TOP.
Removing $techmap\cpu.csrs.$procdff$2395 ($dff) from module TOP.
Removing $techmap\cpu.xrs.$procdff$2388 ($dff) from module TOP.
Removing $techmap\cpu.$procdff$2414 ($dff) from module TOP.
Replaced 5 DFF cells.

12.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2639': $auto$opt_expr.cc:145:group_cell_inputs$2638 = $techmap\bot.$ternary$bottleneck.v:68$670_Y [1]
  removing buffer cell `$techmap\cpu.$or$polaris.v:185$1018': $techmap\cpu.$or$polaris.v:185$1018_Y = $techmap\cpu.$or$polaris.v:184$1016_Y
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2771': $auto$opt_expr.cc:145:group_cell_inputs$2770 = $auto$wreduce.cc:347:run$2453 [0]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2757': $auto$opt_expr.cc:145:group_cell_inputs$2756 = \bot.m_adr_i [2]
  removing buffer cell `$techmap\cpu.$xor$polaris.v:142$938': \cpu.ltFlag = \cpu.alu.vflag_o
  removing buffer cell `$techmap\bot.bs.$or$bottleneckSequencer.v:167$629': \bot.MAckO_1 = \bot.bs.R1398
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2619': $auto$opt_expr.cc:145:group_cell_inputs$2618 = $techmap\arb.$ternary$arbiter.v:78$90_Y [1]
  removing buffer cell `$techmap\cpu.alu.$xor$alu.v:26$1': \cpu.alu.b = \cpu.alub
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2659': $auto$opt_expr.cc:145:group_cell_inputs$2658 = $techmap\cpu.csrs.$ternary$polaris.v:536$1147_Y [63]
  removing buffer cell `$techmap\bot.$or$bottleneck.v:60$654': \bot.s_siz_o = \bot.SStbO_1
  removing buffer cell `$techmap\bot.bs.$or$bottleneckSequencer.v:160$605': $techmap\bot.bs.$or$bottleneckSequencer.v:160$605_Y = \bot.bs.R1397
  removing buffer cell `$techmap\bot.bs.$or$bottleneckSequencer.v:165$624': $techmap\bot.bs.$or$bottleneckSequencer.v:165$624_Y = $techmap\bot.bs.$or$bottleneckSequencer.v:165$623_Y
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:546$1161': $techmap\cpu.csrs.$or$polaris.v:546$1161_Y = $techmap\cpu.csrs.$ternary$polaris.v:546$1160_Y
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2657': $auto$opt_expr.cc:145:group_cell_inputs$2656 = $auto$wreduce.cc:347:run$2453 [4]
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:527$1137': $techmap\cpu.csrs.$or$polaris.v:527$1137_Y [0] = $techmap\cpu.csrs.$or$polaris.v:526$1134_Y [0]
  removing buffer cell `$techmap\bot.bs.$or$bottleneckSequencer.v:174$635': $techmap\bot.bs.$or$bottleneckSequencer.v:153$581_Y = \bot.bs.R1396
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:513$1115': \cpu.csrs.irqEn_mux = $auto$wreduce.cc:347:run$2450 [0]
  removing buffer cell `$techmap\cpu.csrs.$or$polaris.v:521$1128': \cpu.csrs.mie_mux = $techmap\cpu.csrs.$ternary$polaris.v:521$1127_Y [0]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2791': $auto$opt_expr.cc:145:group_cell_inputs$2790 = \cpu.alub [4:0]
  removing buffer cell `$techmap\cpu.s.$or$seq.v:581$2199': \cpu.trap_o = \cpu.csrs.mcause_2
  removing buffer cell `$techmap\bot.bs.$or$bottleneckSequencer.v:168$630': \bot.Hold1_SDatI = \bot.bs.R1394
  removing buffer cell `$techmap\bot.bs.$or$bottleneckSequencer.v:172$631': \bot.MAckO_SAckI = \bot.bs.R1392
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2719': $auto$opt_expr.cc:145:group_cell_inputs$2718 = $auto$wreduce.cc:347:run$2453 [3:2]
  removing buffer cell `$techmap\cpu.s.$or$seq.v:597$2224': \cpu.csrs.mpie_1 = \cpu.rst
  removing buffer cell `$techmap\cpu.$or$polaris.v:183$1014': $techmap\cpu.$or$polaris.v:183$1014_Y = $techmap\cpu.$or$polaris.v:182$1012_Y
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2711': $auto$opt_expr.cc:145:group_cell_inputs$2710 = $auto$opt_expr.cc:145:group_cell_inputs$2646
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2697': $auto$opt_expr.cc:145:group_cell_inputs$2696 = $auto$opt_expr.cc:145:group_cell_inputs$2638
  removing buffer cell `$techmap\cpu.s.$or$seq.v:599$2241': $techmap\cpu.s.$or$seq.v:599$2241_Y = \cpu.csrs.mepc_ia
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2647': $auto$opt_expr.cc:145:group_cell_inputs$2646 = $techmap\cpu.csrs.$ternary$polaris.v:555$1172_Y [1]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2709': $auto$opt_expr.cc:145:group_cell_inputs$2708 = \bot.m_adr_i [0]
  removing buffer cell `$techmap\arb.$or$arbiter.v:76$86': \arb.xcyc_o = $techmap\arb.$and$arbiter.v:76$84_Y
  removing buffer cell `$techmap\arb.$or$arbiter.v:74$80': \bot.m_adr_i [19:0] = $auto$wreduce.cc:347:run$2424 [19:0]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2625': $auto$opt_expr.cc:145:group_cell_inputs$2624 = $techmap\cpu.$ternary$polaris.v:182$1011_Y [7:0]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2723': $auto$opt_expr.cc:145:group_cell_inputs$2722 = $techmap\cpu.csrs.$ternary$polaris.v:537$1150_Y [8:0]
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2741': $auto$opt_expr.cc:145:group_cell_inputs$2740 = $auto$opt_expr.cc:145:group_cell_inputs$2710
  removing buffer cell `$techmap\arb.$or$arbiter.v:67$58': \arb.en_i = $techmap\arb.$and$arbiter.v:66$51_Y
  removing buffer cell `$techmap\cpu.$or$polaris.v:163$964': \cpu.alua_mux = $techmap\cpu.$ternary$polaris.v:163$963_Y
  removing buffer cell `$auto$opt_expr.cc:158:group_cell_inputs$2793': $auto$opt_expr.cc:145:group_cell_inputs$2792 = \cpu.alub [63:5]
  removing unused `\SB_RAM40_4K' cell `\cpu.xrs.column1.mem.0.0.0'.
  removing unused `$dff' cell `$techmap\cpu.$procdff$2413'.
  removing unused `$dff' cell `$techmap\cpu.$procdff$2412'.
  removing unused `$dff' cell `$techmap\cpu.$procdff$2405'.
  removing unused `$or' cell `$techmap\cpu.$or$polaris.v:189$1026'.
  removing unused `$mux' cell `$techmap\cpu.$ternary$polaris.v:189$1025'.
  removing unused `$mux' cell `$techmap\cpu.$ternary$polaris.v:188$1023'.
  removing unused `$not' cell `$techmap\cpu.$not$polaris.v:143$941'.
  removing unused `$not' cell `$techmap\cpu.$not$polaris.v:143$940'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:69$774'.
  removing unused `$or' cell `$techmap\wb_bridge.$or$bridge.v:68$771'.
  removing unused `$and' cell `$techmap\wb_bridge.$and$bridge.v:60$750'.
  removing unused `$and' cell `$techmap\wb_bridge.$and$bridge.v:59$749'.
  removing unused `$and' cell `$techmap\wb_bridge.$and$bridge.v:52$742'.
  removing unused `$logic_not' cell `$techmap\wb_bridge.$eq$bridge.v:36$730'.
  removing unused `$logic_not' cell `$techmap\wb_bridge.$eq$bridge.v:24$719'.
  removing unused `$dff' cell `$techmap\arb.$procdff$2422'.
  removing unused `$not' cell `$techmap\arb.$not$arbiter.v:70$66'.
  removing unused `$and' cell `$techmap\arb.$and$arbiter.v:69$61'.
  removing unused `$not' cell `$techmap\arb.$not$arbiter.v:69$60'.
  removing unused `$or' cell `$techmap\cpu.s.$or$seq.v:591$2220'.
  removing unused `$alu' cell `$auto$alumacc.cc:470:replace_alu$2463'.
  removing unused `$alu' cell `$auto$alumacc.cc:470:replace_alu$2466'.
  removing unused `$alu' cell `$auto$alumacc.cc:470:replace_alu$2469'.
  removing unused `$alu' cell `$auto$alumacc.cc:470:replace_alu$2472'.
  removing unused `$or' cell `$auto$opt_expr.cc:158:group_cell_inputs$2769'.
  removing unused `$and' cell `$techmap\cpu.s.$and$seq.v:152$1370'.
  removing unused `$and' cell `$techmap\cpu.s.$and$seq.v:136$1299'.
  removing unused `$dff' cell `$techmap\cpu.csrs.$procdff$2400'.
  removing unused `$dff' cell `$techmap\cpu.csrs.$procdff$2401'.
  removing unused `$dff' cell `$techmap\cpu.csrs.$procdff$2398'.
  removing unused `$dff' cell `$techmap\cpu.csrs.$procdff$2396'.
  removing unused `$dff' cell `$techmap\cpu.csrs.$procdff$2393'.
  removing unused `$dff' cell `$techmap\cpu.csrs.$procdff$2392'.
  removing unused `$dff' cell `$techmap\cpu.csrs.$procdff$2391'.
  removing unused `$or' cell `$techmap\cpu.csrs.$or$polaris.v:566$1197'.
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:566$1196'.
  removing unused `$and' cell `$techmap\cpu.csrs.$and$polaris.v:566$1194'.
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:565$1191'.
  removing unused `$and' cell `$techmap\cpu.csrs.$and$polaris.v:565$1188'.
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:563$1186'.
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:558$1179'.
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:555$1172'.
  removing unused `$reduce_or' cell `$techmap\cpu.csrs.$reduce_or$polaris.v:551$1169'.
  removing unused `$or' cell `$techmap\cpu.csrs.$or$polaris.v:548$1167'.
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:548$1166'.
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:546$1160'.
  removing unused `$reduce_or' cell `$techmap\cpu.csrs.$reduce_or$polaris.v:543$1155'.
  removing unused `$or' cell `$techmap\cpu.csrs.$or$polaris.v:528$1140'.
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:528$1139'.
  removing unused `$or' cell `$techmap\cpu.csrs.$or$polaris.v:526$1134'.
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:525$1132'.
  removing unused `$reduce_or' cell `$techmap\cpu.csrs.$reduce_or$polaris.v:523$1129'.
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:521$1127'.
  removing unused `$reduce_or' cell `$techmap\cpu.csrs.$reduce_or$polaris.v:516$1117'.
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:513$1114'.
  removing unused `$xor' cell `$techmap\cpu.alu.$xor$alu.v:64$36'.
  removing unused `$xor' cell `$techmap\cpu.alu.$xor$alu.v:39$12'.
  removing unused `$and' cell `$techmap\cpu.alu.$and$alu.v:38$10'.
  removing unused `$xor' cell `$techmap\cpu.alu.$xor$alu.v:35$9'.
  removing unused `$reduce_or' cell `$techmap\cpu.xrs.$reduce_or$xrs.v:23$2342'.
  removing unused `$or' cell `$techmap\bot.bs.$or$bottleneckSequencer.v:165$625'.
  removing unused `$not' cell `$techmap\bot.bs.$not$bottleneckSequencer.v:54$251'.
  removing unused `\SB_RAM40_4K' cell `\cpu.xrs.column3.mem.0.0.0'.
  removing unused `\SB_RAM40_4K' cell `\cpu.xrs.column2.mem.0.0.0'.
  removing unused `\SB_RAM40_4K' cell `\cpu.xrs.column0.mem.0.0.0'.
  removing unused non-port wire \arb.dack_o.
  removing unused non-port wire \arb.dadr_i.
  removing unused non-port wire \arb.dcyc_i.
  removing unused non-port wire \arb.ddat_i.
  removing unused non-port wire \arb.dsiz_i.
  removing unused non-port wire \arb.dstb_i.
  removing unused non-port wire \arb.dwe_i.
  removing unused non-port wire \arb.en_d.
  removing unused non-port wire \arb.reserve_d.
  removing unused non-port wire \arb.reserve_i.
  removing unused non-port wire \arb.xdat_o.
  removing unused non-port wire \arb.xwe_o.
  removing unused non-port wire \bot.Hold2_SDatI.
  removing unused non-port wire \bot.Hold3_SDatI.
  removing unused non-port wire \bot.MDatO_SDatI.
  removing unused non-port wire \bot.SDatO_MDatI15_0.
  removing unused non-port wire \bot.SDatO_MDatI47_32.
  removing unused non-port wire \bot.SDatO_MDatI63_48.
  removing unused non-port wire \bot.ack2.
  removing unused non-port wire \bot.ack2_o.
  removing unused non-port wire \bot.ack3.
  removing unused non-port wire \bot.ack3_o.
  removing unused non-port wire \bot.bs.Hold2_SDatI.
  removing unused non-port wire \bot.bs.Hold3_SDatI.
  removing unused non-port wire \bot.bs.MDatO_SDatI.
  removing unused non-port wire \bot.bs.MSiz0.
  removing unused non-port wire \bot.bs.R1393.
  removing unused non-port wire \bot.bs.R1399.
  removing unused non-port wire \bot.bs.R1400.
  removing unused non-port wire \bot.bs.R1401.
  removing unused non-port wire \bot.bs.R1402.
  removing unused non-port wire \bot.bs.R1403.
  removing unused non-port wire \bot.bs.R1404.
  removing unused non-port wire \bot.bs.R1405.
  removing unused non-port wire \bot.bs.R1406.
  removing unused non-port wire \bot.bs.R1407.
  removing unused non-port wire \bot.bs.SDatO_MDatI.
  removing unused non-port wire \bot.bs.SDatO_MDatI47_32.
  removing unused non-port wire \bot.bs.SDatO_MDatI63_48.
  removing unused non-port wire \bot.bs.ack2.
  removing unused non-port wire \bot.bs.ack2_o.
  removing unused non-port wire \bot.bs.ack3.
  removing unused non-port wire \bot.bs.ack3_o.
  removing unused non-port wire \bot.bs.out1418.
  removing unused non-port wire \bot.bs.out1419.
  removing unused non-port wire \bot.bs.out1421.
  removing unused non-port wire \bot.bs.out1422.
  removing unused non-port wire \bot.bs.out1423.
  removing unused non-port wire \bot.bs.out1424.
  removing unused non-port wire \bot.bs.out1425.
  removing unused non-port wire \bot.bs.out1448.
  removing unused non-port wire \bot.bs.out1449.
  removing unused non-port wire \bot.bs.out1450.
  removing unused non-port wire \bot.bs.out1452.
  removing unused non-port wire \bot.bs.out1453.
  removing unused non-port wire \bot.bs.out1454.
  removing unused non-port wire \bot.bs.out1455.
  removing unused non-port wire \bot.bs.out1457.
  removing unused non-port wire \bot.bs.out1458.
  removing unused non-port wire \bot.bs.out1459.
  removing unused non-port wire \bot.bs.out1460.
  removing unused non-port wire \bot.bs.out1462.
  removing unused non-port wire \bot.bs.out1463.
  removing unused non-port wire \bot.bs.out1464.
  removing unused non-port wire \bot.bs.out1465.
  removing unused non-port wire \bot.bs.out1467.
  removing unused non-port wire \bot.bs.out1468.
  removing unused non-port wire \bot.bs.out1469.
  removing unused non-port wire \bot.bs.out1470.
  removing unused non-port wire \bot.bs.out1471.
  removing unused non-port wire \bot.bs.out1472.
  removing unused non-port wire \bot.bs.out1474.
  removing unused non-port wire \bot.bs.out1475.
  removing unused non-port wire \bot.bs.out1476.
  removing unused non-port wire \bot.bs.out1477.
  removing unused non-port wire \bot.bs.out1479.
  removing unused non-port wire \bot.bs.out1480.
  removing unused non-port wire \bot.bs.out1481.
  removing unused non-port wire \bot.bs.out1482.
  removing unused non-port wire \bot.bs.out1483.
  removing unused non-port wire \bot.bs.out1484.
  removing unused non-port wire \bot.bs.out1485.
  removing unused non-port wire \bot.bs.out1487.
  removing unused non-port wire \bot.bs.out1488.
  removing unused non-port wire \bot.bs.out1489.
  removing unused non-port wire \bot.bs.out1490.
  removing unused non-port wire \bot.bs.out1492.
  removing unused non-port wire \bot.bs.out1493.
  removing unused non-port wire \bot.bs.out1494.
  removing unused non-port wire \bot.bs.out1495.
  removing unused non-port wire \bot.bs.plus4.
  removing unused non-port wire \bot.bs.plus6.
  removing unused non-port wire \bot.m_dat_i.
  removing unused non-port wire \bot.m_we_i.
  removing unused non-port wire \bot.plus4.
  removing unused non-port wire \bot.plus6.
  removing unused non-port wire \bot.s_dat_o.
  removing unused non-port wire \bot.s_we_o.
  removing unused non-port wire \cpu.alu.and_en_i.
  removing unused non-port wire \cpu.alu.ands.
  removing unused non-port wire \cpu.alu.b.
  removing unused non-port wire \cpu.alu.c62.
  removing unused non-port wire \cpu.alu.cflag_i.
  removing unused non-port wire \cpu.alu.cflag_o.
  removing unused non-port wire \cpu.alu.inA_i.
  removing unused non-port wire \cpu.alu.inB_i.
  removing unused non-port wire \cpu.alu.invB_en_i.
  removing unused non-port wire \cpu.alu.isLTS.
  removing unused non-port wire \cpu.alu.isLTU.
  removing unused non-port wire \cpu.alu.lsh1.
  removing unused non-port wire \cpu.alu.lsh16.
  removing unused non-port wire \cpu.alu.lsh2.
  removing unused non-port wire \cpu.alu.lsh32.
  removing unused non-port wire \cpu.alu.lsh4.
  removing unused non-port wire \cpu.alu.lsh8.
  removing unused non-port wire \cpu.alu.lsh_en_i.
  removing unused non-port wire \cpu.alu.lshs.
  removing unused non-port wire \cpu.alu.lts_en_i.
  removing unused non-port wire \cpu.alu.ltu_en_i.
  removing unused non-port wire \cpu.alu.out_o.
  removing unused non-port wire \cpu.alu.rawSums.
  removing unused non-port wire \cpu.alu.rsh1.
  removing unused non-port wire \cpu.alu.rsh16.
  removing unused non-port wire \cpu.alu.rsh2.
  removing unused non-port wire \cpu.alu.rsh32.
  removing unused non-port wire \cpu.alu.rsh4.
  removing unused non-port wire \cpu.alu.rsh8.
  removing unused non-port wire \cpu.alu.rsh_en_i.
  removing unused non-port wire \cpu.alu.rshs.
  removing unused non-port wire \cpu.alu.sumH.
  removing unused non-port wire \cpu.alu.sumL.
  removing unused non-port wire \cpu.alu.sum_en_i.
  removing unused non-port wire \cpu.alu.sums.
  removing unused non-port wire \cpu.alu.sx0.
  removing unused non-port wire \cpu.alu.sx1.
  removing unused non-port wire \cpu.alu.sx2.
  removing unused non-port wire \cpu.alu.sx3.
  removing unused non-port wire \cpu.alu.sx4.
  removing unused non-port wire \cpu.alu.sx5.
  removing unused non-port wire \cpu.alu.vflag_o.
  removing unused non-port wire \cpu.alu.xor_en_i.
  removing unused non-port wire \cpu.alu.xors.
  removing unused non-port wire \cpu.alu.zflag_o.
  removing unused non-port wire \cpu.aluResult.
  removing unused non-port wire \cpu.aluXResult.
  removing unused non-port wire \cpu.alua.
  removing unused non-port wire \cpu.alua_0.
  removing unused non-port wire \cpu.alua_cdat.
  removing unused non-port wire \cpu.alua_ia.
  removing unused non-port wire \cpu.alua_mux.
  removing unused non-port wire \cpu.alua_rdat.
  removing unused non-port wire \cpu.alub.
  removing unused non-port wire \cpu.alub_imm12i.
  removing unused non-port wire \cpu.alub_imm12s.
  removing unused non-port wire \cpu.alub_imm12sb.
  removing unused non-port wire \cpu.alub_imm20u.
  removing unused non-port wire \cpu.alub_imm20uj.
  removing unused non-port wire \cpu.alub_imm5.
  removing unused non-port wire \cpu.alub_mux.
  removing unused non-port wire \cpu.alub_rdat.
  removing unused non-port wire \cpu.and_en.
  removing unused non-port wire \cpu.cause_o.
  removing unused non-port wire \cpu.ccr.
  removing unused non-port wire \cpu.ccr_alu.
  removing unused non-port wire \cpu.ccr_mux.
  removing unused non-port wire \cpu.cdat_alu.
  removing unused non-port wire \cpu.cdat_imm5.
  removing unused non-port wire \cpu.cdat_o.
  removing unused non-port wire \cpu.cdat_rdat.
  removing unused non-port wire \cpu.cflag_i.
  removing unused non-port wire \cpu.cflag_o.
  removing unused non-port wire \cpu.csrs.cause_o.
  removing unused non-port wire \cpu.csrs.cdat_i.
  removing unused non-port wire \cpu.csrs.cdat_o.
  removing unused non-port wire \cpu.csrs.csrd_mbadaddr.
  removing unused non-port wire \cpu.csrs.csrd_mcause.
  removing unused non-port wire \cpu.csrs.csrd_mcycle.
  removing unused non-port wire \cpu.csrs.csrd_mepc.
  removing unused non-port wire \cpu.csrs.csrd_mie.
  removing unused non-port wire \cpu.csrs.csrd_minstret.
  removing unused non-port wire \cpu.csrs.csrd_mscratch.
  removing unused non-port wire \cpu.csrs.csrd_mstatus.
  removing unused non-port wire \cpu.csrs.csrv_marchid.
  removing unused non-port wire \cpu.csrs.csrv_mbadaddr.
  removing unused non-port wire \cpu.csrs.csrv_mcause.
  removing unused non-port wire \cpu.csrs.csrv_mcycle.
  removing unused non-port wire \cpu.csrs.csrv_medeleg.
  removing unused non-port wire \cpu.csrs.csrv_mepc.
  removing unused non-port wire \cpu.csrs.csrv_mhartid.
  removing unused non-port wire \cpu.csrs.csrv_mideleg.
  removing unused non-port wire \cpu.csrs.csrv_mie.
  removing unused non-port wire \cpu.csrs.csrv_mimpid.
  removing unused non-port wire \cpu.csrs.csrv_minstret.
  removing unused non-port wire \cpu.csrs.csrv_mip.
  removing unused non-port wire \cpu.csrs.csrv_misa.
  removing unused non-port wire \cpu.csrs.csrv_mscratch.
  removing unused non-port wire \cpu.csrs.csrv_mstatus.
  removing unused non-port wire \cpu.csrs.csrv_mtime.
  removing unused non-port wire \cpu.csrs.csrv_mtvec.
  removing unused non-port wire \cpu.csrs.csrv_mvendorid.
  removing unused non-port wire \cpu.csrs.cvalid_o.
  removing unused non-port wire \cpu.csrs.cwe_i.
  removing unused non-port wire \cpu.csrs.ia_i.
  removing unused non-port wire \cpu.csrs.irqEn.
  removing unused non-port wire \cpu.csrs.irqEn_cdat.
  removing unused non-port wire \cpu.csrs.irqEn_mux.
  removing unused non-port wire \cpu.csrs.mbadaddr.
  removing unused non-port wire \cpu.csrs.mbadaddr_mux.
  removing unused non-port wire \cpu.csrs.mbadaddr_we.
  removing unused non-port wire \cpu.csrs.mcause.
  removing unused non-port wire \cpu.csrs.mcause_11.
  removing unused non-port wire \cpu.csrs.mcause_3.
  removing unused non-port wire \cpu.csrs.mcause_mux.
  removing unused non-port wire \cpu.csrs.mcause_we.
  removing unused non-port wire \cpu.csrs.mcycle.
  removing unused non-port wire \cpu.csrs.mcycle_mux.
  removing unused non-port wire \cpu.csrs.mepc.
  removing unused non-port wire \cpu.csrs.mepc_mux.
  removing unused non-port wire \cpu.csrs.mepc_o.
  removing unused non-port wire \cpu.csrs.mepc_we.
  removing unused non-port wire \cpu.csrs.mie.
  removing unused non-port wire \cpu.csrs.mie_0.
  removing unused non-port wire \cpu.csrs.mie_mpie.
  removing unused non-port wire \cpu.csrs.mie_mux.
  removing unused non-port wire \cpu.csrs.mie_o.
  removing unused non-port wire \cpu.csrs.minstret.
  removing unused non-port wire \cpu.csrs.minstret_mux.
  removing unused non-port wire \cpu.csrs.mpie.
  removing unused non-port wire \cpu.csrs.mpie_mux.
  removing unused non-port wire \cpu.csrs.mpie_o.
  removing unused non-port wire \cpu.csrs.mscratch.
  removing unused non-port wire \cpu.csrs.mscratch_mux.
  removing unused non-port wire \cpu.csrs.mscratch_we.
  removing unused non-port wire \cpu.csrs.mstatus_we.
  removing unused non-port wire \cpu.csrs.mtvec_we.
  removing unused non-port wire \cpu.cvalid.
  removing unused non-port wire \cpu.cwe_1.
  removing unused non-port wire \cpu.cwe_o.
  removing unused non-port wire \cpu.dack_i.
  removing unused non-port wire \cpu.dadr_alu.
  removing unused non-port wire \cpu.dadr_o.
  removing unused non-port wire \cpu.dcyc_1.
  removing unused non-port wire \cpu.dcyc_o.
  removing unused non-port wire \cpu.ddat_o.
  removing unused non-port wire \cpu.ddat_rdat.
  removing unused non-port wire \cpu.dsiz_fn3.
  removing unused non-port wire \cpu.dsiz_o.
  removing unused non-port wire \cpu.dstb_1.
  removing unused non-port wire \cpu.dstb_o.
  removing unused non-port wire \cpu.dwe_o.
  removing unused non-port wire \cpu.ia.
  removing unused non-port wire \cpu.ia_mux.
  removing unused non-port wire \cpu.icdat_i.
  removing unused non-port wire \cpu.icvalid_i.
  removing unused non-port wire \cpu.invB_en.
  removing unused non-port wire \cpu.lsh_en.
  removing unused non-port wire \cpu.ltFlag.
  removing unused non-port wire \cpu.lts_en.
  removing unused non-port wire \cpu.ltu_en.
  removing unused non-port wire \cpu.mcause_11.
  removing unused non-port wire \cpu.mcause_3.
  removing unused non-port wire \cpu.mepc_o.
  removing unused non-port wire \cpu.mie_0.
  removing unused non-port wire \cpu.mie_mpie.
  removing unused non-port wire \cpu.mie_o.
  removing unused non-port wire \cpu.mpie_o.
  removing unused non-port wire \cpu.pc_alu.
  removing unused non-port wire \cpu.pc_mepc.
  removing unused non-port wire \cpu.r1NotZero.
  removing unused non-port wire \cpu.ra_ir1.
  removing unused non-port wire \cpu.ra_ir2.
  removing unused non-port wire \cpu.ra_ird.
  removing unused non-port wire \cpu.ra_mux.
  removing unused non-port wire \cpu.rdat_alu.
  removing unused non-port wire \cpu.rdat_cdat.
  removing unused non-port wire \cpu.rdat_ddat.
  removing unused non-port wire \cpu.rdat_i.
  removing unused non-port wire \cpu.rdat_o.
  removing unused non-port wire \cpu.rdat_pc.
  removing unused non-port wire \cpu.rsh_en.
  removing unused non-port wire \cpu.rwe_o.
  removing unused non-port wire \cpu.s.R1398.
  removing unused non-port wire \cpu.s.R1399.
  removing unused non-port wire \cpu.s.R1400.
  removing unused non-port wire \cpu.s.R1401.
  removing unused non-port wire \cpu.s.R1402.
  removing unused non-port wire \cpu.s.R1403.
  removing unused non-port wire \cpu.s.R1404.
  removing unused non-port wire \cpu.s.R1405.
  removing unused non-port wire \cpu.s.R1406.
  removing unused non-port wire \cpu.s.R1407.
  removing unused non-port wire \cpu.s.R1408.
  removing unused non-port wire \cpu.s.R1409.
  removing unused non-port wire \cpu.s.R1410.
  removing unused non-port wire \cpu.s.R1411.
  removing unused non-port wire \cpu.s.R1412.
  removing unused non-port wire \cpu.s.R1413.
  removing unused non-port wire \cpu.s.R1414.
  removing unused non-port wire \cpu.s.R1415.
  removing unused non-port wire \cpu.s.R1416.
  removing unused non-port wire \cpu.s.R1417.
  removing unused non-port wire \cpu.s.R1418.
  removing unused non-port wire \cpu.s.R1419.
  removing unused non-port wire \cpu.s.R1420.
  removing unused non-port wire \cpu.s.R1421.
  removing unused non-port wire \cpu.s.R1422.
  removing unused non-port wire \cpu.s.R1423.
  removing unused non-port wire \cpu.s.R1424.
  removing unused non-port wire \cpu.s.R1425.
  removing unused non-port wire \cpu.s.R1426.
  removing unused non-port wire \cpu.s.R1427.
  removing unused non-port wire \cpu.s.R1428.
  removing unused non-port wire \cpu.s.R1429.
  removing unused non-port wire \cpu.s.R1430.
  removing unused non-port wire \cpu.s.R1431.
  removing unused non-port wire \cpu.s.R1432.
  removing unused non-port wire \cpu.s.R1433.
  removing unused non-port wire \cpu.s.R1434.
  removing unused non-port wire \cpu.s.R1435.
  removing unused non-port wire \cpu.s.R1436.
  removing unused non-port wire \cpu.s.R1437.
  removing unused non-port wire \cpu.s.R1438.
  removing unused non-port wire \cpu.s.R1439.
  removing unused non-port wire \cpu.s.R1440.
  removing unused non-port wire \cpu.s.R1441.
  removing unused non-port wire \cpu.s.R1442.
  removing unused non-port wire \cpu.s.R1443.
  removing unused non-port wire \cpu.s.R1444.
  removing unused non-port wire \cpu.s.R1445.
  removing unused non-port wire \cpu.s.R1446.
  removing unused non-port wire \cpu.s.R1447.
  removing unused non-port wire \cpu.s.R1448.
  removing unused non-port wire \cpu.s.R1449.
  removing unused non-port wire \cpu.s.R1450.
  removing unused non-port wire \cpu.s.R1451.
  removing unused non-port wire \cpu.s.R1452.
  removing unused non-port wire \cpu.s.R1453.
  removing unused non-port wire \cpu.s.R1454.
  removing unused non-port wire \cpu.s.R1455.
  removing unused non-port wire \cpu.s.R1456.
  removing unused non-port wire \cpu.s.R1457.
  removing unused non-port wire \cpu.s.R1458.
  removing unused non-port wire \cpu.s.R1459.
  removing unused non-port wire \cpu.s.R1460.
  removing unused non-port wire \cpu.s.R1461.
  removing unused non-port wire \cpu.s.R1462.
  removing unused non-port wire \cpu.s.R1463.
  removing unused non-port wire \cpu.s.R1464.
  removing unused non-port wire \cpu.s.R1465.
  removing unused non-port wire \cpu.s.R1466.
  removing unused non-port wire \cpu.s.R1467.
  removing unused non-port wire \cpu.s.R1468.
  removing unused non-port wire \cpu.s.R1469.
  removing unused non-port wire \cpu.s.R1470.
  removing unused non-port wire \cpu.s.R1471.
  removing unused non-port wire \cpu.s.R1472.
  removing unused non-port wire \cpu.s.R1473.
  removing unused non-port wire \cpu.s.R1474.
  removing unused non-port wire \cpu.s.R1475.
  removing unused non-port wire \cpu.s.R1476.
  removing unused non-port wire \cpu.s.R1477.
  removing unused non-port wire \cpu.s.R1478.
  removing unused non-port wire \cpu.s.R1479.
  removing unused non-port wire \cpu.s.R1480.
  removing unused non-port wire \cpu.s.R1481.
  removing unused non-port wire \cpu.s.R1482.
  removing unused non-port wire \cpu.s.R1483.
  removing unused non-port wire \cpu.s.R1484.
  removing unused non-port wire \cpu.s.R1485.
  removing unused non-port wire \cpu.s.R1486.
  removing unused non-port wire \cpu.s.R1487.
  removing unused non-port wire \cpu.s.R1488.
  removing unused non-port wire \cpu.s.R1489.
  removing unused non-port wire \cpu.s.R1490.
  removing unused non-port wire \cpu.s.R1491.
  removing unused non-port wire \cpu.s.R1492.
  removing unused non-port wire \cpu.s.R1493.
  removing unused non-port wire \cpu.s.R1494.
  removing unused non-port wire \cpu.s.R1495.
  removing unused non-port wire \cpu.s.R1496.
  removing unused non-port wire \cpu.s.R1497.
  removing unused non-port wire \cpu.s.R1498.
  removing unused non-port wire \cpu.s.R1499.
  removing unused non-port wire \cpu.s.R1500.
  removing unused non-port wire \cpu.s.R1501.
  removing unused non-port wire \cpu.s.R1502.
  removing unused non-port wire \cpu.s.R1503.
  removing unused non-port wire \cpu.s.R1504.
  removing unused non-port wire \cpu.s.R1505.
  removing unused non-port wire \cpu.s.alua_0.
  removing unused non-port wire \cpu.s.alua_cdat.
  removing unused non-port wire \cpu.s.alua_ia.
  removing unused non-port wire \cpu.s.alua_rdat.
  removing unused non-port wire \cpu.s.alub_imm12i.
  removing unused non-port wire \cpu.s.alub_imm12s.
  removing unused non-port wire \cpu.s.alub_imm12sb.
  removing unused non-port wire \cpu.s.alub_imm20u.
  removing unused non-port wire \cpu.s.alub_imm20uj.
  removing unused non-port wire \cpu.s.alub_imm5.
  removing unused non-port wire \cpu.s.alub_rdat.
  removing unused non-port wire \cpu.s.and_en.
  removing unused non-port wire \cpu.s.ccr.
  removing unused non-port wire \cpu.s.ccr_alu.
  removing unused non-port wire \cpu.s.cdat_alu.
  removing unused non-port wire \cpu.s.cdat_imm5.
  removing unused non-port wire \cpu.s.cdat_rdat.
  removing unused non-port wire \cpu.s.cflag_i.
  removing unused non-port wire \cpu.s.csrok_i.
  removing unused non-port wire \cpu.s.cwe_o.
  removing unused non-port wire \cpu.s.dack_i.
  removing unused non-port wire \cpu.s.dadr_alu.
  removing unused non-port wire \cpu.s.dcyc_1.
  removing unused non-port wire \cpu.s.ddat_rdat.
  removing unused non-port wire \cpu.s.dsiz_fn3.
  removing unused non-port wire \cpu.s.dstb_1.
  removing unused non-port wire \cpu.s.dwe_o.
  removing unused non-port wire \cpu.s.fn3_is_000.
  removing unused non-port wire \cpu.s.fn3_is_001.
  removing unused non-port wire \cpu.s.fn3_is_010.
  removing unused non-port wire \cpu.s.fn3_is_011.
  removing unused non-port wire \cpu.s.fn3_is_100.
  removing unused non-port wire \cpu.s.fn3_is_101.
  removing unused non-port wire \cpu.s.fn3_is_110.
  removing unused non-port wire \cpu.s.fn3_is_111.
  removing unused non-port wire \cpu.s.invB_en.
  removing unused non-port wire \cpu.s.isBr.
  removing unused non-port wire \cpu.s.isCsrRc.
  removing unused non-port wire \cpu.s.isCsrRcI.
  removing unused non-port wire \cpu.s.isCsrRs.
  removing unused non-port wire \cpu.s.isCsrRsI.
  removing unused non-port wire \cpu.s.isCsrRw.
  removing unused non-port wire \cpu.s.isCsrRwI.
  removing unused non-port wire \cpu.s.isEBreak.
  removing unused non-port wire \cpu.s.isECall.
  removing unused non-port wire \cpu.s.isFence.
  removing unused non-port wire \cpu.s.isJal.
  removing unused non-port wire \cpu.s.isJalr.
  removing unused non-port wire \cpu.s.isLoad.
  removing unused non-port wire \cpu.s.isLuiAuipc.
  removing unused non-port wire \cpu.s.isMRet.
  removing unused non-port wire \cpu.s.isOpI.
  removing unused non-port wire \cpu.s.isOpR.
  removing unused non-port wire \cpu.s.isStore.
  removing unused non-port wire \cpu.s.lsh_en.
  removing unused non-port wire \cpu.s.lts_en.
  removing unused non-port wire \cpu.s.ltu_en.
  removing unused non-port wire \cpu.s.mcause_11.
  removing unused non-port wire \cpu.s.mcause_3.
  removing unused non-port wire \cpu.s.mie_0.
  removing unused non-port wire \cpu.s.mie_mpie.
  removing unused non-port wire \cpu.s.out1531.
  removing unused non-port wire \cpu.s.out1532.
  removing unused non-port wire \cpu.s.out1533.
  removing unused non-port wire \cpu.s.out1534.
  removing unused non-port wire \cpu.s.out1535.
  removing unused non-port wire \cpu.s.out1536.
  removing unused non-port wire \cpu.s.out1537.
  removing unused non-port wire \cpu.s.out1538.
  removing unused non-port wire \cpu.s.out1539.
  removing unused non-port wire \cpu.s.out1540.
  removing unused non-port wire \cpu.s.out1541.
  removing unused non-port wire \cpu.s.out1542.
  removing unused non-port wire \cpu.s.out1543.
  removing unused non-port wire \cpu.s.out1544.
  removing unused non-port wire \cpu.s.out1545.
  removing unused non-port wire \cpu.s.out1546.
  removing unused non-port wire \cpu.s.out1547.
  removing unused non-port wire \cpu.s.out1548.
  removing unused non-port wire \cpu.s.out1549.
  removing unused non-port wire \cpu.s.out1550.
  removing unused non-port wire \cpu.s.out1551.
  removing unused non-port wire \cpu.s.out1552.
  removing unused non-port wire \cpu.s.out1553.
  removing unused non-port wire \cpu.s.out1554.
  removing unused non-port wire \cpu.s.out1555.
  removing unused non-port wire \cpu.s.out1556.
  removing unused non-port wire \cpu.s.out1557.
  removing unused non-port wire \cpu.s.out1558.
  removing unused non-port wire \cpu.s.out1559.
  removing unused non-port wire \cpu.s.out1560.
  removing unused non-port wire \cpu.s.out1561.
  removing unused non-port wire \cpu.s.out1562.
  removing unused non-port wire \cpu.s.out1563.
  removing unused non-port wire \cpu.s.out1564.
  removing unused non-port wire \cpu.s.out1565.
  removing unused non-port wire \cpu.s.out1566.
  removing unused non-port wire \cpu.s.out1567.
  removing unused non-port wire \cpu.s.out1568.
  removing unused non-port wire \cpu.s.out1569.
  removing unused non-port wire \cpu.s.out1570.
  removing unused non-port wire \cpu.s.out1571.
  removing unused non-port wire \cpu.s.out1572.
  removing unused non-port wire \cpu.s.out1573.
  removing unused non-port wire \cpu.s.out1574.
  removing unused non-port wire \cpu.s.out1575.
  removing unused non-port wire \cpu.s.out1576.
  removing unused non-port wire \cpu.s.out1577.
  removing unused non-port wire \cpu.s.out1578.
  removing unused non-port wire \cpu.s.out1579.
  removing unused non-port wire \cpu.s.out1580.
  removing unused non-port wire \cpu.s.out1581.
  removing unused non-port wire \cpu.s.out1582.
  removing unused non-port wire \cpu.s.out1583.
  removing unused non-port wire \cpu.s.out1584.
  removing unused non-port wire \cpu.s.out1585.
  removing unused non-port wire \cpu.s.out1586.
  removing unused non-port wire \cpu.s.out1587.
  removing unused non-port wire \cpu.s.out1588.
  removing unused non-port wire \cpu.s.out1589.
  removing unused non-port wire \cpu.s.out1590.
  removing unused non-port wire \cpu.s.out1591.
  removing unused non-port wire \cpu.s.out1592.
  removing unused non-port wire \cpu.s.out1593.
  removing unused non-port wire \cpu.s.out1594.
  removing unused non-port wire \cpu.s.out1595.
  removing unused non-port wire \cpu.s.out1596.
  removing unused non-port wire \cpu.s.out1597.
  removing unused non-port wire \cpu.s.out1598.
  removing unused non-port wire \cpu.s.out1599.
  removing unused non-port wire \cpu.s.out1600.
  removing unused non-port wire \cpu.s.out1601.
  removing unused non-port wire \cpu.s.out1602.
  removing unused non-port wire \cpu.s.out1603.
  removing unused non-port wire \cpu.s.out1604.
  removing unused non-port wire \cpu.s.out1605.
  removing unused non-port wire \cpu.s.out1606.
  removing unused non-port wire \cpu.s.out1607.
  removing unused non-port wire \cpu.s.out1608.
  removing unused non-port wire \cpu.s.out1609.
  removing unused non-port wire \cpu.s.out1610.
  removing unused non-port wire \cpu.s.out1611.
  removing unused non-port wire \cpu.s.out1612.
  removing unused non-port wire \cpu.s.out1613.
  removing unused non-port wire \cpu.s.out1614.
  removing unused non-port wire \cpu.s.out1615.
  removing unused non-port wire \cpu.s.out1616.
  removing unused non-port wire \cpu.s.out1617.
  removing unused non-port wire \cpu.s.out1618.
  removing unused non-port wire \cpu.s.out1619.
  removing unused non-port wire \cpu.s.out1620.
  removing unused non-port wire \cpu.s.out1621.
  removing unused non-port wire \cpu.s.out1622.
  removing unused non-port wire \cpu.s.out1623.
  removing unused non-port wire \cpu.s.out1624.
  removing unused non-port wire \cpu.s.out1625.
  removing unused non-port wire \cpu.s.out1626.
  removing unused non-port wire \cpu.s.out1627.
  removing unused non-port wire \cpu.s.out1628.
  removing unused non-port wire \cpu.s.out1629.
  removing unused non-port wire \cpu.s.out1630.
  removing unused non-port wire \cpu.s.out1631.
  removing unused non-port wire \cpu.s.out1632.
  removing unused non-port wire \cpu.s.out1633.
  removing unused non-port wire \cpu.s.out1634.
  removing unused non-port wire \cpu.s.out1635.
  removing unused non-port wire \cpu.s.out1636.
  removing unused non-port wire \cpu.s.out1637.
  removing unused non-port wire \cpu.s.out1638.
  removing unused non-port wire \cpu.s.out1639.
  removing unused non-port wire \cpu.s.out1640.
  removing unused non-port wire \cpu.s.out1641.
  removing unused non-port wire \cpu.s.out1642.
  removing unused non-port wire \cpu.s.out1643.
  removing unused non-port wire \cpu.s.out1644.
  removing unused non-port wire \cpu.s.out1645.
  removing unused non-port wire \cpu.s.out1646.
  removing unused non-port wire \cpu.s.out1647.
  removing unused non-port wire \cpu.s.out1648.
  removing unused non-port wire \cpu.s.out1649.
  removing unused non-port wire \cpu.s.out1650.
  removing unused non-port wire \cpu.s.out1651.
  removing unused non-port wire \cpu.s.out1652.
  removing unused non-port wire \cpu.s.out1653.
  removing unused non-port wire \cpu.s.out1654.
  removing unused non-port wire \cpu.s.out1655.
  removing unused non-port wire \cpu.s.out1656.
  removing unused non-port wire \cpu.s.out1657.
  removing unused non-port wire \cpu.s.out1658.
  removing unused non-port wire \cpu.s.out1659.
  removing unused non-port wire \cpu.s.out1660.
  removing unused non-port wire \cpu.s.out1661.
  removing unused non-port wire \cpu.s.out1662.
  removing unused non-port wire \cpu.s.out1663.
  removing unused non-port wire \cpu.s.out1664.
  removing unused non-port wire \cpu.s.out1665.
  removing unused non-port wire \cpu.s.out1666.
  removing unused non-port wire \cpu.s.out1667.
  removing unused non-port wire \cpu.s.out1668.
  removing unused non-port wire \cpu.s.out1669.
  removing unused non-port wire \cpu.s.out1670.
  removing unused non-port wire \cpu.s.out1671.
  removing unused non-port wire \cpu.s.out1672.
  removing unused non-port wire \cpu.s.out1673.
  removing unused non-port wire \cpu.s.out1674.
  removing unused non-port wire \cpu.s.out1675.
  removing unused non-port wire \cpu.s.out1676.
  removing unused non-port wire \cpu.s.out1677.
  removing unused non-port wire \cpu.s.out1678.
  removing unused non-port wire \cpu.s.out1679.
  removing unused non-port wire \cpu.s.out1680.
  removing unused non-port wire \cpu.s.out1681.
  removing unused non-port wire \cpu.s.out1682.
  removing unused non-port wire \cpu.s.out1683.
  removing unused non-port wire \cpu.s.out1684.
  removing unused non-port wire \cpu.s.out1685.
  removing unused non-port wire \cpu.s.out1686.
  removing unused non-port wire \cpu.s.out1687.
  removing unused non-port wire \cpu.s.out1688.
  removing unused non-port wire \cpu.s.out1689.
  removing unused non-port wire \cpu.s.out1690.
  removing unused non-port wire \cpu.s.out1691.
  removing unused non-port wire \cpu.s.out1692.
  removing unused non-port wire \cpu.s.out1693.
  removing unused non-port wire \cpu.s.out1694.
  removing unused non-port wire \cpu.s.out1695.
  removing unused non-port wire \cpu.s.out1696.
  removing unused non-port wire \cpu.s.out1697.
  removing unused non-port wire \cpu.s.out1698.
  removing unused non-port wire \cpu.s.out1699.
  removing unused non-port wire \cpu.s.out1700.
  removing unused non-port wire \cpu.s.out1701.
  removing unused non-port wire \cpu.s.out1702.
  removing unused non-port wire \cpu.s.out1704.
  removing unused non-port wire \cpu.s.out1706.
  removing unused non-port wire \cpu.s.out1708.
  removing unused non-port wire \cpu.s.out1710.
  removing unused non-port wire \cpu.s.out1711.
  removing unused non-port wire \cpu.s.out1712.
  removing unused non-port wire \cpu.s.out1713.
  removing unused non-port wire \cpu.s.out1714.
  removing unused non-port wire \cpu.s.out1715.
  removing unused non-port wire \cpu.s.out1716.
  removing unused non-port wire \cpu.s.out1717.
  removing unused non-port wire \cpu.s.out1718.
  removing unused non-port wire \cpu.s.out1719.
  removing unused non-port wire \cpu.s.out1720.
  removing unused non-port wire \cpu.s.out1721.
  removing unused non-port wire \cpu.s.out1722.
  removing unused non-port wire \cpu.s.out1723.
  removing unused non-port wire \cpu.s.out1724.
  removing unused non-port wire \cpu.s.out1725.
  removing unused non-port wire \cpu.s.out1726.
  removing unused non-port wire \cpu.s.out1727.
  removing unused non-port wire \cpu.s.out1728.
  removing unused non-port wire \cpu.s.out1729.
  removing unused non-port wire \cpu.s.out1730.
  removing unused non-port wire \cpu.s.out1732.
  removing unused non-port wire \cpu.s.out1733.
  removing unused non-port wire \cpu.s.out1734.
  removing unused non-port wire \cpu.s.out1735.
  removing unused non-port wire \cpu.s.out1736.
  removing unused non-port wire \cpu.s.out1737.
  removing unused non-port wire \cpu.s.out1738.
  removing unused non-port wire \cpu.s.out1740.
  removing unused non-port wire \cpu.s.out1741.
  removing unused non-port wire \cpu.s.out1742.
  removing unused non-port wire \cpu.s.out1743.
  removing unused non-port wire \cpu.s.out1744.
  removing unused non-port wire \cpu.s.out1745.
  removing unused non-port wire \cpu.s.out1746.
  removing unused non-port wire \cpu.s.out1747.
  removing unused non-port wire \cpu.s.out1748.
  removing unused non-port wire \cpu.s.out1750.
  removing unused non-port wire \cpu.s.out1751.
  removing unused non-port wire \cpu.s.out1752.
  removing unused non-port wire \cpu.s.out1753.
  removing unused non-port wire \cpu.s.out1754.
  removing unused non-port wire \cpu.s.out1755.
  removing unused non-port wire \cpu.s.out1756.
  removing unused non-port wire \cpu.s.out1757.
  removing unused non-port wire \cpu.s.out1758.
  removing unused non-port wire \cpu.s.out1759.
  removing unused non-port wire \cpu.s.out1760.
  removing unused non-port wire \cpu.s.out1761.
  removing unused non-port wire \cpu.s.out1763.
  removing unused non-port wire \cpu.s.out1764.
  removing unused non-port wire \cpu.s.out1765.
  removing unused non-port wire \cpu.s.out1766.
  removing unused non-port wire \cpu.s.out1767.
  removing unused non-port wire \cpu.s.out1768.
  removing unused non-port wire \cpu.s.out1769.
  removing unused non-port wire \cpu.s.out1770.
  removing unused non-port wire \cpu.s.out1771.
  removing unused non-port wire \cpu.s.out1772.
  removing unused non-port wire \cpu.s.out1773.
  removing unused non-port wire \cpu.s.out1774.
  removing unused non-port wire \cpu.s.out1775.
  removing unused non-port wire \cpu.s.out1777.
  removing unused non-port wire \cpu.s.out1778.
  removing unused non-port wire \cpu.s.out1779.
  removing unused non-port wire \cpu.s.out1780.
  removing unused non-port wire \cpu.s.out1781.
  removing unused non-port wire \cpu.s.out1782.
  removing unused non-port wire \cpu.s.out1783.
  removing unused non-port wire \cpu.s.out1784.
  removing unused non-port wire \cpu.s.out1785.
  removing unused non-port wire \cpu.s.out1786.
  removing unused non-port wire \cpu.s.out1787.
  removing unused non-port wire \cpu.s.out1788.
  removing unused non-port wire \cpu.s.out1790.
  removing unused non-port wire \cpu.s.out1791.
  removing unused non-port wire \cpu.s.out1792.
  removing unused non-port wire \cpu.s.out1793.
  removing unused non-port wire \cpu.s.out1794.
  removing unused non-port wire \cpu.s.out1795.
  removing unused non-port wire \cpu.s.out1796.
  removing unused non-port wire \cpu.s.out1797.
  removing unused non-port wire \cpu.s.pc_alu.
  removing unused non-port wire \cpu.s.pc_mepc.
  removing unused non-port wire \cpu.s.ra_ir1.
  removing unused non-port wire \cpu.s.ra_ir2.
  removing unused non-port wire \cpu.s.ra_ird.
  removing unused non-port wire \cpu.s.rdat_alu.
  removing unused non-port wire \cpu.s.rdat_cdat.
  removing unused non-port wire \cpu.s.rdat_ddat.
  removing unused non-port wire \cpu.s.rdat_pc.
  removing unused non-port wire \cpu.s.rsh_en.
  removing unused non-port wire \cpu.s.rwe_o.
  removing unused non-port wire \cpu.s.sum_en.
  removing unused non-port wire \cpu.s.sx32_en.
  removing unused non-port wire \cpu.s.useAlu.
  removing unused non-port wire \cpu.s.useAlu2.
  removing unused non-port wire \cpu.s.xor_en.
  removing unused non-port wire \cpu.s.xt1.
  removing unused non-port wire \cpu.s.xt1_o.
  removing unused non-port wire \cpu.s.xt2.
  removing unused non-port wire \cpu.s.xt2_o.
  removing unused non-port wire \cpu.s.xt3.
  removing unused non-port wire \cpu.s.xt3_o.
  removing unused non-port wire \cpu.s.xt4.
  removing unused non-port wire \cpu.s.xt4_o.
  removing unused non-port wire \cpu.sum_en.
  removing unused non-port wire \cpu.sx32_en.
  removing unused non-port wire \cpu.ucdat_i.
  removing unused non-port wire \cpu.vflag_o.
  removing unused non-port wire \cpu.xor_en.
  removing unused non-port wire \cpu.xrs.addr.
  removing unused non-port wire \cpu.xrs.column0.addr.
  removing unused non-port wire \cpu.xrs.column0.din.
  removing unused non-port wire \cpu.xrs.column0.dout.
  removing unused non-port wire \cpu.xrs.column0.write_en.
  removing unused non-port wire \cpu.xrs.column1.addr.
  removing unused non-port wire \cpu.xrs.column1.din.
  removing unused non-port wire \cpu.xrs.column1.dout.
  removing unused non-port wire \cpu.xrs.column1.write_en.
  removing unused non-port wire \cpu.xrs.column2.addr.
  removing unused non-port wire \cpu.xrs.column2.din.
  removing unused non-port wire \cpu.xrs.column2.dout.
  removing unused non-port wire \cpu.xrs.column2.write_en.
  removing unused non-port wire \cpu.xrs.column3.addr.
  removing unused non-port wire \cpu.xrs.column3.din.
  removing unused non-port wire \cpu.xrs.column3.dout.
  removing unused non-port wire \cpu.xrs.column3.write_en.
  removing unused non-port wire \cpu.xrs.q.
  removing unused non-port wire \cpu.xrs.ra_i.
  removing unused non-port wire \cpu.xrs.rdat_i.
  removing unused non-port wire \cpu.xrs.rdat_o.
  removing unused non-port wire \cpu.xrs.rmask_i.
  removing unused non-port wire \cpu.xt1.
  removing unused non-port wire \cpu.xt1_o.
  removing unused non-port wire \cpu.xt2.
  removing unused non-port wire \cpu.xt2_o.
  removing unused non-port wire \cpu.xt3.
  removing unused non-port wire \cpu.xt3_o.
  removing unused non-port wire \cpu.xt4.
  removing unused non-port wire \cpu.xt4_o.
  removing unused non-port wire \cpu.zflag_o.
  removing unused non-port wire \dack.
  removing unused non-port wire \dadr.
  removing unused non-port wire \dcyc.
  removing unused non-port wire \ddato.
  removing unused non-port wire \dsiz.
  removing unused non-port wire \dstb.
  removing unused non-port wire \dwe.
  removing unused non-port wire \ram.sram_dat_i.
  removing unused non-port wire \ram.sram_lbe_on.
  removing unused non-port wire \ram.sram_sel_i.
  removing unused non-port wire \ram.sram_ube_on.
  removing unused non-port wire \ram.sram_we_i.
  removing unused non-port wire \ram.sram_we_on.
  removing unused non-port wire \sdato.
  removing unused non-port wire \swe.
  removing unused non-port wire \wb_bridge.ab0.
  removing unused non-port wire \wb_bridge.ben0.
  removing unused non-port wire \wb_bridge.ben1.
  removing unused non-port wire \wb_bridge.f_dat_i.
  removing unused non-port wire \wb_bridge.hen0.
  removing unused non-port wire \wb_bridge.od0.
  removing unused non-port wire \wb_bridge.od1.
  removing unused non-port wire \wb_bridge.sel0.
  removing unused non-port wire \wb_bridge.sel1.
  removing unused non-port wire \wb_bridge.size_byte.
  removing unused non-port wire \wb_bridge.wb_dat_o.
  removing unused non-port wire \wb_bridge.wb_sel_o.
  removing unused non-port wire \wbdato.
  removing unused non-port wire \wbsel.
  removing unused non-port wire \xdato.
  removing unused non-port wire \xwe.
  removed 798 unused temporary wires.

12.12.15. Executing OPT_EXPR pass (perform const folding).
Replacing $not cell `$techmap\cpu.s.$not$seq.v:125$1271' (1'0) in module `\TOP' with constant driver `$techmap\arb.$not$arbiter.v:67$56_Y = 1'1'.
Replacing $reduce_or cell `$techmap\cpu.csrs.$reduce_or$polaris.v:510$1109' (unary_buffer) in module `\TOP' with constant driver `$techmap\cpu.csrs.$reduce_or$polaris.v:510$1109_Y = \cpu_reset'.

12.12.16. Rerunning OPT passes. (Maybe there is more to do..)

12.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$2373 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$78 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$90 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$648 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$670 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:69$677 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$715 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:181$1009 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:182$1011 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:184$1015 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:186$1019 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:536$1147 (pure)
    Root of a mux tree: $techmap\cpu.csrs.$ternary$polaris.v:537$1150 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

12.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TOP.
Performed a total of 0 changes.

12.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.12.20. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $techmap\cpu.csrs.$procdff$2394 ($dff) from module TOP.
Replaced 1 DFF cells.

12.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..
  removing unused `$or' cell `$auto$opt_expr.cc:158:group_cell_inputs$2721'.
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:537$1150'.
  removing unused `$mux' cell `$techmap\cpu.csrs.$ternary$polaris.v:536$1147'.
  removing unused non-port wire \cpu.csrs.csrd_mtvec.
  removing unused non-port wire \cpu.csrs.mtvec.
  removing unused non-port wire \cpu.csrs.mtvec_mux.
  removing unused non-port wire \cpu.csrs.mtvec_o.
  removing unused non-port wire \cpu.mtvec_i.
  removed 5 unused temporary wires.

12.12.22. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$techmap\cpu.$ternary$polaris.v:184$1015' (?) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:184$1015_Y = 64'0000000000000000000000000000000000000000000000000000000000000000'.
Replacing $or cell `$techmap\cpu.$or$polaris.v:184$1016' in module `\TOP' with identity for port A.

12.12.23. Rerunning OPT passes. (Maybe there is more to do..)

12.12.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$2373 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$78 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$90 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$648 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$670 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:69$677 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$715 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:181$1009 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:182$1011 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:186$1019 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

12.12.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TOP.
Performed a total of 0 changes.

12.12.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.12.27. Executing OPT_RMDFF pass (remove dff with constant values).

12.12.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..
  removing buffer cell `$techmap\cpu.$or$polaris.v:184$1016': $techmap\cpu.$or$polaris.v:184$1016_Y = { $auto$opt_expr.cc:145:group_cell_inputs$2622 $auto$opt_expr.cc:145:group_cell_inputs$2624 }

12.12.29. Executing OPT_EXPR pass (perform const folding).

12.12.30. Rerunning OPT passes. (Maybe there is more to do..)

12.12.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TOP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$2373 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:74$78 (pure)
    Root of a mux tree: $techmap\arb.$ternary$arbiter.v:78$90 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:59$648 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:68$670 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:69$677 (pure)
    Root of a mux tree: $techmap\bot.$ternary$bottleneck.v:91$715 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:181$1009 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:182$1011 (pure)
    Root of a mux tree: $techmap\cpu.$ternary$polaris.v:186$1019 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

12.12.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TOP.
Performed a total of 0 changes.

12.12.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.12.34. Executing OPT_RMDFF pass (remove dff with constant values).

12.12.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..

12.12.36. Executing OPT_EXPR pass (perform const folding).

12.12.37. Finished OPT passes. (There is nothing left to do.)

12.13. Executing TECHMAP pass (map to technology primitives).

12.13.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

12.13.2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.
Mapping TOP.$procdff$2390 ($dff) with simplemap.
Mapping TOP.$procdff$2389 ($dff) with simplemap.
Mapping TOP.$procmux$2373 ($mux) with simplemap.
Mapping TOP.$not$TOP.v:42$2337 ($not) with simplemap.
Mapping TOP.$techmap\cpu.$procdff$2415 ($dff) with simplemap.
Mapping TOP.$techmap\cpu.$procdff$2407 ($dff) with simplemap.
Mapping TOP.$techmap\cpu.$procdff$2404 ($dff) with simplemap.
Mapping TOP.$techmap\cpu.$procdff$2403 ($dff) with simplemap.
Mapping TOP.$techmap\cpu.$procdff$2402 ($dff) with simplemap.
Mapping TOP.$techmap\cpu.$ternary$polaris.v:190$1028 ($mux) with simplemap.
Mapping TOP.$techmap\cpu.$or$polaris.v:186$1020 ($or) with simplemap.
Mapping TOP.$techmap\cpu.$ternary$polaris.v:186$1019 ($mux) with simplemap.
Mapping TOP.$techmap\cpu.$ternary$polaris.v:182$1011 ($mux) with simplemap.
Mapping TOP.$techmap\cpu.$ternary$polaris.v:181$1009 ($mux) with simplemap.
Mapping TOP.$techmap\cpu.$reduce_or$polaris.v:180$1007 ($reduce_or) with simplemap.
Mapping TOP.$techmap\ram.$not$sram.v:27$2304 ($not) with simplemap.
Mapping TOP.$techmap\ram.$not$sram.v:35$2297 ($not) with simplemap.
Mapping TOP.$techmap\ram.$and$sram.v:35$2296 ($and) with simplemap.
Mapping TOP.$techmap\ram.$and$sram.v:35$2295 ($and) with simplemap.
Mapping TOP.$techmap\bot.$procdff$2418 ($dff) with simplemap.
Mapping TOP.$techmap\bot.$or$bottleneck.v:91$717 ($or) with simplemap.
Mapping TOP.$techmap\bot.$ternary$bottleneck.v:91$715 ($mux) with simplemap.
Mapping TOP.$techmap\bot.$ternary$bottleneck.v:69$677 ($mux) with simplemap.
Mapping TOP.$techmap\bot.$ternary$bottleneck.v:68$670 ($mux) with simplemap.
Mapping TOP.$techmap\bot.$or$bottleneck.v:59$650 ($or) with simplemap.
Mapping TOP.$techmap\bot.$ternary$bottleneck.v:59$648 ($mux) with simplemap.
Mapping TOP.$techmap\arb.$and$arbiter.v:81$96 ($and) with simplemap.
Mapping TOP.$techmap\arb.$ternary$arbiter.v:78$90 ($mux) with simplemap.
Mapping TOP.$techmap\arb.$and$arbiter.v:76$84 ($and) with simplemap.
Mapping TOP.$techmap\arb.$ternary$arbiter.v:74$78 ($mux) with simplemap.
Mapping TOP.$techmap\arb.$and$arbiter.v:70$64 ($and) with simplemap.
Mapping TOP.$techmap\arb.$and$arbiter.v:66$51 ($and) with simplemap.
Mapping TOP.$techmap\arb.$not$arbiter.v:66$48 ($not) with simplemap.
Mapping TOP.$techmap\cpu.s.$or$seq.v:599$2243 ($or) with simplemap.
Mapping TOP.$techmap\cpu.s.$or$seq.v:599$2242 ($or) with simplemap.
Mapping TOP.$auto$opt_expr.cc:158:group_cell_inputs$2755 ($or) with simplemap.

12.13.3. Executing AST frontend in derive mode using pre-parsed AST for module `\_80_ice40_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 3
Parameter \B_WIDTH = 64
Parameter \Y_WIDTH = 64
Generating RTLIL representation for module `$paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=64\Y_WIDTH=64'.

12.13.4. Continuing TECHMAP pass.
Mapping TOP.$auto$alumacc.cc:470:replace_alu$2460 using $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=64\Y_WIDTH=64.
Mapping TOP.$auto$opt_expr.cc:158:group_cell_inputs$2623 ($or) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:125$1281 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:125$1278 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:125$1275 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:125$1272 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:125$1269 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$not$seq.v:125$1268 ($not) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:125$1266 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:125$1263 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$not$seq.v:125$1262 ($not) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:123$1252 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:123$1250 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:122$1245 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:121$1233 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$not$seq.v:121$1232 ($not) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:120$1220 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$not$seq.v:120$1219 ($not) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:120$1217 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$and$seq.v:120$1214 ($and) with simplemap.
Mapping TOP.$techmap\cpu.s.$not$seq.v:120$1212 ($not) with simplemap.
Mapping TOP.$techmap\cpu.csrs.$not$polaris.v:566$1193 ($not) with simplemap.
Mapping TOP.$techmap\bot.bs.$or$bottleneckSequencer.v:174$638 ($or) with simplemap.
Mapping TOP.$techmap\bot.bs.$or$bottleneckSequencer.v:163$619 ($or) with simplemap.
Mapping TOP.$techmap\bot.bs.$or$bottleneckSequencer.v:160$606 ($or) with simplemap.
Mapping TOP.$techmap\bot.bs.$and$bottleneckSequencer.v:56$305 ($and) with simplemap.
Mapping TOP.$techmap\bot.bs.$and$bottleneckSequencer.v:56$303 ($and) with simplemap.
Mapping TOP.$techmap\bot.bs.$and$bottleneckSequencer.v:56$301 ($and) with simplemap.
Mapping TOP.$techmap\bot.bs.$and$bottleneckSequencer.v:53$239 ($and) with simplemap.
Mapping TOP.$techmap\bot.bs.$and$bottleneckSequencer.v:52$218 ($and) with simplemap.
Mapping TOP.$techmap\bot.bs.$not$bottleneckSequencer.v:52$217 ($not) with simplemap.
Mapping TOP.$techmap\bot.bs.$and$bottleneckSequencer.v:51$196 ($and) with simplemap.
Mapping TOP.$techmap\bot.bs.$and$bottleneckSequencer.v:50$177 ($and) with simplemap.
Mapping TOP.$techmap\bot.bs.$and$bottleneckSequencer.v:49$155 ($and) with simplemap.
Mapping TOP.$techmap\bot.bs.$not$bottleneckSequencer.v:49$154 ($not) with simplemap.
Mapping TOP.$techmap\bot.bs.$and$bottleneckSequencer.v:49$152 ($and) with simplemap.
Mapping TOP.$techmap\bot.bs.$and$bottleneckSequencer.v:49$149 ($and) with simplemap.
Mapping TOP.$techmap\bot.bs.$not$bottleneckSequencer.v:49$148 ($not) with simplemap.
Mapping TOP.$techmap\bot.bs.$and$bottleneckSequencer.v:49$146 ($and) with simplemap.
Mapping TOP.$techmap\bot.bs.$not$bottleneckSequencer.v:48$134 ($not) with simplemap.
Mapping TOP.$techmap\bot.bs.$and$bottleneckSequencer.v:47$121 ($and) with simplemap.
Mapping TOP.$techmap\bot.bs.$and$bottleneckSequencer.v:47$118 ($and) with simplemap.
Mapping TOP.$techmap\bot.bs.$not$bottleneckSequencer.v:47$117 ($not) with simplemap.
Mapping TOP.$auto$alumacc.cc:470:replace_alu$2460.A_conv ($pos) with simplemap.
Mapping TOP.$auto$alumacc.cc:470:replace_alu$2460.B_conv ($pos) with simplemap.
Mapping TOP.$techmap$auto$alumacc.cc:470:replace_alu$2460.$not$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3213 ($not) with simplemap.
Mapping TOP.$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214 ($mux) with simplemap.
Mapping TOP.$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215 ($xor) with simplemap.
No more expansions possible.

12.14. Executing ICE40_OPT pass (performing simple optimizations).

12.14.1. Running ICE40 specific optimizations.

12.14.2. Executing OPT_EXPR pass (perform const folding).
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3288' (?1) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:120$1217_Y = $techmap\cpu.s.$and$seq.v:120$1214_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3275' (?1) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:125$1272_Y = $techmap\cpu.s.$and$seq.v:125$1269_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3274' (?1) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:125$1275_Y = $techmap\cpu.s.$and$seq.v:125$1269_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3273' (?1) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:125$1278_Y = $techmap\cpu.s.$and$seq.v:125$1269_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3272' (?1) in module `\TOP' with constant driver `\cpu.csrs.mcause_2 = $techmap\cpu.s.$and$seq.v:125$1269_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3208' (?1) in module `\TOP' with constant driver `\arb.en_i = $techmap\arb.$and$arbiter.v:66$49_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3185' (01?) in module `\TOP' with constant driver `\bot.bs.MSiz1 = $techmap\arb.$and$arbiter.v:66$49_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3310' (?1) in module `\TOP' with constant driver `\bot.MAckO_SAckI = $techmap\bot.bs.$and$bottleneckSequencer.v:47$118_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3308' (?1) in module `\TOP' with constant driver `$techmap\bot.bs.$and$bottleneckSequencer.v:49$146_Y = $techmap\bot.bs.$and$bottleneckSequencer.v:49$143_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3282' (?1) in module `\TOP' with constant driver `$techmap\cpu.s.$and$seq.v:123$1250_Y = $techmap\cpu.s.$not$seq.v:120$1212_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3149' (01?) in module `\TOP' with constant driver `$techmap\cpu.$ternary$polaris.v:181$1009_Y [63] = \cpu.rst'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3181' (01?) in module `\TOP' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$2540 [1] = \bot.Hold1_SDatI'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3157' (1?) in module `\TOP' with constant driver `$techmap\ram.$and$sram.v:35$2295_Y = $not$TOP.v:44$2338_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3440' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [63] = \cpu.pc [63]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3504' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [63] = \cpu.pc [63]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3439' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [62] = \cpu.pc [62]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3503' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [62] = \cpu.pc [62]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3438' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [61] = \cpu.pc [61]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3502' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [61] = \cpu.pc [61]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3437' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [60] = \cpu.pc [60]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3501' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [60] = \cpu.pc [60]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3436' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [59] = \cpu.pc [59]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3500' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [59] = \cpu.pc [59]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3435' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [58] = \cpu.pc [58]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3499' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [58] = \cpu.pc [58]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3434' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [57] = \cpu.pc [57]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3498' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [57] = \cpu.pc [57]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3433' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [56] = \cpu.pc [56]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3497' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [56] = \cpu.pc [56]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3432' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [55] = \cpu.pc [55]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3496' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [55] = \cpu.pc [55]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3431' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [54] = \cpu.pc [54]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3495' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [54] = \cpu.pc [54]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3430' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [53] = \cpu.pc [53]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3494' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [53] = \cpu.pc [53]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3429' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [52] = \cpu.pc [52]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3493' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [52] = \cpu.pc [52]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3428' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [51] = \cpu.pc [51]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3492' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [51] = \cpu.pc [51]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3427' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [50] = \cpu.pc [50]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3491' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [50] = \cpu.pc [50]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3426' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [49] = \cpu.pc [49]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3490' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [49] = \cpu.pc [49]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3425' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [48] = \cpu.pc [48]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3489' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [48] = \cpu.pc [48]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3424' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [47] = \cpu.pc [47]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3488' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [47] = \cpu.pc [47]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3423' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [46] = \cpu.pc [46]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3487' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [46] = \cpu.pc [46]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3422' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [45] = \cpu.pc [45]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3486' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [45] = \cpu.pc [45]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3421' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [44] = \cpu.pc [44]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3485' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [44] = \cpu.pc [44]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3420' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [43] = \cpu.pc [43]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3484' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [43] = \cpu.pc [43]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3419' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [42] = \cpu.pc [42]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3483' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [42] = \cpu.pc [42]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3418' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [41] = \cpu.pc [41]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3482' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [41] = \cpu.pc [41]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3417' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [40] = \cpu.pc [40]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3481' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [40] = \cpu.pc [40]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3416' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [39] = \cpu.pc [39]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3480' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [39] = \cpu.pc [39]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3415' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [38] = \cpu.pc [38]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3479' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [38] = \cpu.pc [38]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3414' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [37] = \cpu.pc [37]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3478' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [37] = \cpu.pc [37]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3413' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [36] = \cpu.pc [36]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3477' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [36] = \cpu.pc [36]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3412' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [35] = \cpu.pc [35]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3476' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [35] = \cpu.pc [35]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3411' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [34] = \cpu.pc [34]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3475' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [34] = \cpu.pc [34]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3410' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [33] = \cpu.pc [33]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3474' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [33] = \cpu.pc [33]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3409' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [32] = \cpu.pc [32]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3473' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [32] = \cpu.pc [32]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3408' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [31] = \cpu.pc [31]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3472' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [31] = \cpu.pc [31]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3407' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [30] = \cpu.pc [30]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3471' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [30] = \cpu.pc [30]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3406' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [29] = \cpu.pc [29]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3470' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [29] = \cpu.pc [29]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3405' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [28] = \cpu.pc [28]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3469' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [28] = \cpu.pc [28]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3404' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [27] = \cpu.pc [27]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3468' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [27] = \cpu.pc [27]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3403' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [26] = \cpu.pc [26]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3467' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [26] = \cpu.pc [26]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3402' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [25] = \cpu.pc [25]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3466' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [25] = \cpu.pc [25]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3401' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [24] = \cpu.pc [24]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3465' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [24] = \cpu.pc [24]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3400' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [23] = \cpu.pc [23]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3464' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [23] = \cpu.pc [23]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3399' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [22] = \cpu.pc [22]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3463' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [22] = \cpu.pc [22]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3398' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [21] = \cpu.pc [21]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3462' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [21] = \cpu.pc [21]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3397' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [20] = \cpu.pc [20]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3461' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [20] = \cpu.pc [20]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3396' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [19] = \cpu.pc [19]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3460' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [19] = \cpu.pc [19]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3395' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [18] = \cpu.pc [18]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3459' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [18] = \cpu.pc [18]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3394' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [17] = \cpu.pc [17]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3458' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [17] = \cpu.pc [17]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3393' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [16] = \cpu.pc [16]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3457' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [16] = \cpu.pc [16]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3392' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [15] = \cpu.pc [15]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3456' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [15] = \cpu.pc [15]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3391' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [14] = \cpu.pc [14]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3455' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [14] = \cpu.pc [14]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3390' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [13] = \cpu.pc [13]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3454' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [13] = \cpu.pc [13]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3389' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [12] = \cpu.pc [12]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3453' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [12] = \cpu.pc [12]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3388' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [11] = \cpu.pc [11]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3452' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [11] = \cpu.pc [11]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3387' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [10] = \cpu.pc [10]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3451' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [10] = \cpu.pc [10]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3386' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [9] = \cpu.pc [9]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3450' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [9] = \cpu.pc [9]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3385' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [8] = \cpu.pc [8]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3449' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [8] = \cpu.pc [8]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3384' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [7] = \cpu.pc [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3448' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [7] = \cpu.pc [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3383' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [6] = \cpu.pc [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3447' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [6] = \cpu.pc [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3382' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [5] = \cpu.pc [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3446' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [5] = \cpu.pc [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3381' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [4] = \cpu.pc [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3445' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [4] = \cpu.pc [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3380' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [3] = \cpu.pc [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3444' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [3] = \cpu.pc [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3379' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [2] = \cpu.pc [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3378' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [1] = \cpu.pc [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3442' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [1] = \cpu.pc [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3377' (??0) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$ternary$/usr/local/bin/../share/yosys/ice40/arith_map.v:42$3214_Y [0] = \cpu.pc [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3441' (0?) in module `\TOP' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2460.$xor$/usr/local/bin/../share/yosys/ice40/arith_map.v:68$3215_Y [0] = \cpu.pc [0]'.

12.14.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.14.4. Executing OPT_RMDFF pass (remove dff with constant values).

12.14.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2979'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2978'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2977'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[27].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[21].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[38].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[29].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[29].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[37].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[24].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[24].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[22].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[26].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[25].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[33].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[33].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[32].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[35].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[36].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[27].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[26].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[28].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[28].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[22].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[19].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[20].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[20].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[21].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[30].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[30].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[37].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[32].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[31].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[34].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[31].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[35].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[34].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[36].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[23].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[23].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[25].carry'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2891'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2915'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2914'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2913'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2912'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2911'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2910'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2909'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2908'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2907'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2906'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2901'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2900'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2899'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2905'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2898'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2904'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2897'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2896'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2903'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2895'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2894'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2893'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2892'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2902'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3161'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3148'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3147'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3146'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3145'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3144'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3143'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3142'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3141'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3140'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3139'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3138'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3137'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3136'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3135'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3134'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3133'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3132'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3131'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3130'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3129'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3128'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3127'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3126'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3125'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3124'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3123'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3122'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3121'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3120'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3119'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3118'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3117'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3116'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3115'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3114'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3113'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3112'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3111'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3110'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3109'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3108'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3107'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3106'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3105'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3084'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3083'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3082'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3081'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3080'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3079'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3078'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3077'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3076'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3075'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3059'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3058'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3057'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3056'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3055'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3054'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3053'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3052'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3051'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3050'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3049'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3048'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3066'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3047'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3046'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3045'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3044'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3065'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3064'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3043'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3042'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3041'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3074'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3073'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3063'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3072'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3071'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3062'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3061'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3060'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3070'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3069'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3068'.
  removing unused `$_MUX_' cell `$auto$simplemap.cc:277:simplemap_mux$3067'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3443'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3376'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3375'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3374'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3373'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3372'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3371'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3370'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3369'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3368'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3367'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3366'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3365'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3364'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3363'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3362'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3361'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3360'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3359'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3358'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3357'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3356'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3271'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3270'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3269'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3268'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3267'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3266'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3265'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3264'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3263'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3262'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3261'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3260'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3259'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3258'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3257'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3256'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3255'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3254'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3253'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3252'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3251'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3250'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3249'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3248'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3247'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3246'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3245'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3244'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3243'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3242'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3241'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3240'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3239'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3238'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3237'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3236'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3235'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3234'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3233'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3232'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3231'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3230'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3229'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3228'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3346'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3347'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3342'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3322'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3323'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3324'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3325'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3326'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3327'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3328'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3329'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3344'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3343'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3348'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3341'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3331'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3340'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3339'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3338'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3345'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3336'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3337'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3334'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3335'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3332'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3333'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3349'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3330'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2990'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3350'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3351'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2988'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2989'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3316'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2987'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3317'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3320'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3319'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3318'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3321'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3354'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3005'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3352'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3353'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3020'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3355'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3000'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3019'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3314'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3018'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3004'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3315'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2999'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3017'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3016'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3003'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$3313'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2998'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3015'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2997'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3014'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3002'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3013'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3001'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3012'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2996'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3011'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2995'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3010'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2994'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3009'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2993'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3008'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2992'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3007'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2991'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$3006'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[51].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[49].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[46].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[39].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[38].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[39].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[53].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[53].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[59].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[57].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[63].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[59].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[63].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[62].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[58].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[56].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[60].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[61].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[62].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[57].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[61].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[60].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[56].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[58].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[42].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[48].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[52].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[49].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[47].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[40].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[44].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[41].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[54].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[43].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[48].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[52].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[51].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[47].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[40].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[45].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[42].carry'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2984'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2983'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2982'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2981'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[50].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[50].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[41].carry'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2986'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[43].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[54].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[46].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[44].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[45].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[55].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$2460.slice[55].adder'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2985'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2980'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2934'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2933'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2932'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2931'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2930'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2925'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2924'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2923'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2929'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2922'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2928'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2921'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2920'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2919'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2918'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2927'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2917'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2916'.
  removing unused `$_DFF_P_' cell `$auto$simplemap.cc:420:simplemap_dff$2926'.

12.14.6. Rerunning OPT passes. (Removed registers in this run.)

12.14.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell TOP.$auto$alumacc.cc:470:replace_alu$2460.slice[0].carry: CO=1'0
Mapping SB_LUT4 cell TOP.$auto$alumacc.cc:470:replace_alu$2460.slice[1].adder back to logic.

12.14.8. Executing OPT_EXPR pass (perform const folding).
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [38]
Setting undriven signal in TOP to undef: \cpu.pc_mux [52]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [29]
Setting undriven signal in TOP to undef: \cpu.pc_mux [53]
Setting undriven signal in TOP to undef: \cpu.pc_mux [48]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [36]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [34]
Setting undriven signal in TOP to undef: \cpu.pc_mux [32]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [44]
Setting undriven signal in TOP to undef: \cpu.pc_mux [28]
Setting undriven signal in TOP to undef: \cpu.pc_mux [26]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [58]
Setting undriven signal in TOP to undef: \cpu.pc_mux [33]
Setting undriven signal in TOP to undef: \cpu.pc_mux [45:34]
Setting undriven signal in TOP to undef: \cpu.pc_mux [55:54]
Setting undriven signal in TOP to undef: \cpu.pc_mux [24]
Setting undriven signal in TOP to undef: \cpu.pc_mux [56]
Setting undriven signal in TOP to undef: \cpu.pc_mux [63]
Setting undriven signal in TOP to undef: \cpu.pc_mux [62]
Setting undriven signal in TOP to undef: \cpu.pc_mux [61]
Setting undriven signal in TOP to undef: \cpu.pc_mux [27]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [59]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [48]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [30]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [32]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [56]
Setting undriven signal in TOP to undef: \cpu.pc_mux [59]
Setting undriven signal in TOP to undef: \cpu.pc_mux [58]
Setting undriven signal in TOP to undef: \cpu.pc_mux [57]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [47]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [46]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [43]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [42]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [41]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [40]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [39]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [37]
Setting undriven signal in TOP to undef: \cpu.pc_mux [47]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [35]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [33]
Setting undriven signal in TOP to undef: \cpu.pc_mux [25]
Setting undriven signal in TOP to undef: \cpu.pc_mux [30]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [31]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [57]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [60]
Setting undriven signal in TOP to undef: \bot.s_adr_o [0]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [55:49]
Setting undriven signal in TOP to undef: \cpu.pc_mux [23]
Setting undriven signal in TOP to undef: \cpu.pc_mux [46]
Setting undriven signal in TOP to undef: \cpu.pc_mux [49]
Setting undriven signal in TOP to undef: \cpu.pc_mux [22]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [63:61]
Setting undriven signal in TOP to undef: \cpu.pc_mux [31]
Setting undriven signal in TOP to undef: \cpu.pc_mux [50]
Setting undriven signal in TOP to undef: \cpu.pc_mux [21:20]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [28:20]
Setting undriven signal in TOP to undef: \cpu.pc_mux [29]
Setting undriven signal in TOP to undef: \cpu.pc_mux [51]
Setting undriven signal in TOP to undef: \cpu.pc_mux [60]
Setting undriven signal in TOP to undef: \cpu.csrs.pc_i [45]
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3507' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3505 [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3506' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3505 [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3515' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3514 [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3508' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3505 [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3509' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3505 [3] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3516' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3514 [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3520' (01?) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3519 [0] = \cpu.pc [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3511' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3505 [5] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3510' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3505 [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3517' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3514 [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3512' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3505 [6] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3513' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3505 [7] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3518' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3514 [3] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3523' (??0) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3522 = \cpu.pc [1]'.

12.14.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.14.10. Executing OPT_RMDFF pass (remove dff with constant values).

12.14.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:311:simplemap_lut$3521'.
  removing unused non-port wire \wb_bridge.ab1.
  removing unused non-port wire \wb_bridge.f_adr_i.
  removed 2 unused temporary wires.

12.14.12. Rerunning OPT passes. (Removed registers in this run.)

12.14.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell TOP.$auto$alumacc.cc:470:replace_alu$2460.slice[1].carry: CO=1'0
Mapping SB_LUT4 cell TOP.$auto$alumacc.cc:470:replace_alu$2460.slice[2].adder back to logic.

12.14.14. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3525' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3524 [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3526' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3524 [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3534' (011) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3533 [0] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3527' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3524 [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3528' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3524 [3] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3535' (101) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3533 [1] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3532' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3524 [7] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3531' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3524 [6] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3537' (011) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3533 [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3530' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3524 [5] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3529' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3524 [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3536' (101) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3533 [2] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3540' (01?) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3538 [1] = \cpu.pc [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3542' (??0) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3541 = $auto$simplemap.cc:309:simplemap_lut$3538 [0]'.

12.14.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.14.16. Executing OPT_RMDFF pass (remove dff with constant values).

12.14.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..

12.14.18. Rerunning OPT passes. (Removed registers in this run.)

12.14.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell TOP.$auto$alumacc.cc:470:replace_alu$2460.slice[2].carry: CO=\cpu.pc [2]
Mapping SB_LUT4 cell TOP.$auto$alumacc.cc:470:replace_alu$2460.slice[3].adder back to logic.

12.14.20. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3551' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3543 [7] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3550' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3543 [6] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3556' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3552 [3] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3549' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3543 [5] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3548' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3543 [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3555' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3552 [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3546' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3543 [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3547' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3543 [3] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3554' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3552 [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3544' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3543 [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3545' (100) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3543 [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3553' (010) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3552 [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$3558' (01?) in module `\TOP' with constant driver `$auto$simplemap.cc:309:simplemap_lut$3557 [0] = \cpu.pc [3]'.

12.14.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.14.22. Executing OPT_RMDFF pass (remove dff with constant values).

12.14.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..

12.14.24. Rerunning OPT passes. (Removed registers in this run.)

12.14.25. Running ICE40 specific optimizations.

12.14.26. Executing OPT_EXPR pass (perform const folding).

12.14.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.14.28. Executing OPT_RMDFF pass (remove dff with constant values).

12.14.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..

12.14.30. Finished OPT passes. (There is nothing left to do.)

12.15. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

12.16. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module TOP:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2865 to $_DFFE_PP_ for $0\cpu_clk[0:0] -> \cpu_clk.

12.17. Executing TECHMAP pass (map to technology primitives).

12.17.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2865 using \$_DFFE_PP_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$3158 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2871 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2875 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2876 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2877 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2878 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2879 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2880 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2881 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2882 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2883 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2884 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2885 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2886 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2887 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2888 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2889 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2890 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2866 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2869 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2870 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2872 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2873 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2874 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2936 using \$_DFF_P_.
Mapping TOP.$auto$simplemap.cc:420:simplemap_dff$2935 using \$_DFF_P_.
No more expansions possible.

12.18. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2867' (x??) in module `\TOP' with constant driver `$0\cpu_clk[0:0] = $not$TOP.v:44$2338_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$3566' (?0) in module `\TOP' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$3564 = \div2'.

12.19. Executing SIMPLEMAP pass (map simple cells to gate primitives).

12.20. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in TOP.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2866 (SB_DFF): \div2 = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2865 (SB_DFFE): \cpu_clk = 0

12.21. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in TOP.

12.22. Executing ICE40_OPT pass (performing simple optimizations).

12.22.1. Running ICE40 specific optimizations.

12.22.2. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3183' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2938' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3188' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2937' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3187' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3160' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2956' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2955' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3104' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2954' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3103' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3102' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3101' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2953' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3100' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2952' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3099' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2951' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3098' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2950' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3097' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2949' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3096' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2948' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3095' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2947' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3094' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3093' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3092' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2946' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3091' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2945' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3090' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3089' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3086' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3085' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2943' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2942' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2941' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2944' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3088' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3087' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3205' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3179' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3206' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3180' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3198' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3199' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3200' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3201' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3202' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3203' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3204' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3193' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3194' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3195' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3177' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3176' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3175' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3174' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3173' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3197' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3172' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3171' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3196' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3170' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3169' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3168' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3167' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2940' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3190' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3191' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3192' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2939' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3189' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3166' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3165' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3164' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3163' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3162' in module `TOP' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$3178' in module `TOP' with and-gate.

12.22.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TOP'.
Removed a total of 0 cells.

12.22.4. Executing OPT_RMDFF pass (remove dff with constant values).

12.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TOP..

12.22.6. Finished OPT passes. (There is nothing left to do.)

12.23. Executing TECHMAP pass (map to technology primitives).

12.23.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.
No more expansions possible.

12.24. Executing ABC pass (technology mapping using ABC).

12.24.1. Extracting gate netlist of module `\TOP' to `<abc-temp-dir>/input.blif'..
Extracted 184 gates and 230 wires to a netlist network with 45 inputs and 46 outputs.

12.24.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.24.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      128
ABC RESULTS:        internal signals:      139
ABC RESULTS:           input signals:       45
ABC RESULTS:          output signals:       46
Removing temp directory.
Removed 0 unused cells and 226 unused wires.

12.25. Executing TECHMAP pass (map to technology primitives).

12.25.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

12.25.2. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 2
Parameter \LUT = 4'0001
Generating RTLIL representation for module `$paramod\$lut\WIDTH=2\LUT=4'0001'.

12.25.3. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3610 using $paramod\$lut\WIDTH=2\LUT=4'0001.

12.25.4. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 3
Parameter \LUT = 8'00010000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=3\LUT=8'00010000'.

12.25.5. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3611 using $paramod\$lut\WIDTH=3\LUT=8'00010000.

12.25.6. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 4
Parameter \LUT = 16'1000000000000000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=4\LUT=16'1000000000000000'.

12.25.7. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3650 using $paramod\$lut\WIDTH=4\LUT=16'1000000000000000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3634 using $paramod\$lut\WIDTH=2\LUT=4'0001.

12.25.8. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 4
Parameter \LUT = 16'0111111100000000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=4\LUT=16'0111111100000000'.

12.25.9. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3636 using $paramod\$lut\WIDTH=4\LUT=16'0111111100000000.

12.25.10. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 4
Parameter \LUT = 16'1111111111111000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=4\LUT=16'1111111111111000'.

12.25.11. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3649 using $paramod\$lut\WIDTH=4\LUT=16'1111111111111000.

12.25.12. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 3
Parameter \LUT = 8'10000000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=3\LUT=8'10000000'.

12.25.13. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3609 using $paramod\$lut\WIDTH=3\LUT=8'10000000.

12.25.14. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 3
Parameter \LUT = 8'01001111
Generating RTLIL representation for module `$paramod\$lut\WIDTH=3\LUT=8'01001111'.

12.25.15. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3669 using $paramod\$lut\WIDTH=3\LUT=8'01001111.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3668 using $paramod\$lut\WIDTH=4\LUT=16'1000000000000000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3667 using $paramod\$lut\WIDTH=4\LUT=16'1111111111111000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3654 using $paramod\$lut\WIDTH=4\LUT=16'1000000000000000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3653 using $paramod\$lut\WIDTH=4\LUT=16'1111111111111000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3666 using $paramod\$lut\WIDTH=4\LUT=16'1000000000000000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3665 using $paramod\$lut\WIDTH=4\LUT=16'1111111111111000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3652 using $paramod\$lut\WIDTH=4\LUT=16'1000000000000000.

12.25.16. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 4
Parameter \LUT = 16'0100000000000000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=4\LUT=16'0100000000000000'.

12.25.17. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3639 using $paramod\$lut\WIDTH=4\LUT=16'0100000000000000.

12.25.18. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 4
Parameter \LUT = 16'1111110000001010
Generating RTLIL representation for module `$paramod\$lut\WIDTH=4\LUT=16'1111110000001010'.

12.25.19. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3640 using $paramod\$lut\WIDTH=4\LUT=16'1111110000001010.

12.25.20. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 4
Parameter \LUT = 16'1111100010001000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=4\LUT=16'1111100010001000'.

12.25.21. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3643 using $paramod\$lut\WIDTH=4\LUT=16'1111100010001000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3642 using $paramod\$lut\WIDTH=4\LUT=16'1111100010001000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3646 using $paramod\$lut\WIDTH=4\LUT=16'1000000000000000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3645 using $paramod\$lut\WIDTH=4\LUT=16'1111111111111000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3644 using $paramod\$lut\WIDTH=4\LUT=16'1111100010001000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3648 using $paramod\$lut\WIDTH=4\LUT=16'1000000000000000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3647 using $paramod\$lut\WIDTH=4\LUT=16'1111111111111000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3664 using $paramod\$lut\WIDTH=4\LUT=16'1000000000000000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3663 using $paramod\$lut\WIDTH=4\LUT=16'1111111111111000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3662 using $paramod\$lut\WIDTH=4\LUT=16'1000000000000000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3661 using $paramod\$lut\WIDTH=4\LUT=16'1111111111111000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3660 using $paramod\$lut\WIDTH=4\LUT=16'1000000000000000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3659 using $paramod\$lut\WIDTH=4\LUT=16'1111111111111000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3658 using $paramod\$lut\WIDTH=4\LUT=16'1000000000000000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3657 using $paramod\$lut\WIDTH=4\LUT=16'1111111111111000.

12.25.22. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 2
Parameter \LUT = 4'1000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=2\LUT=4'1000'.

12.25.23. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3613 using $paramod\$lut\WIDTH=2\LUT=4'1000.

12.25.24. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 2
Parameter \LUT = 4'0100
Generating RTLIL representation for module `$paramod\$lut\WIDTH=2\LUT=4'0100'.

12.25.25. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3612 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3614 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3615 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3616 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3617 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3618 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3619 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3620 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3621 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3622 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3626 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3625 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3623 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3624 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3656 using $paramod\$lut\WIDTH=4\LUT=16'1000000000000000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3655 using $paramod\$lut\WIDTH=4\LUT=16'1111111111111000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3628 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3627 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3651 using $paramod\$lut\WIDTH=4\LUT=16'1111111111111000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3629 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3631 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3630 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3633 using $paramod\$lut\WIDTH=3\LUT=8'00010000.

12.25.26. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 2
Parameter \LUT = 4'1011
Generating RTLIL representation for module `$paramod\$lut\WIDTH=2\LUT=4'1011'.

12.25.27. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3632 using $paramod\$lut\WIDTH=2\LUT=4'1011.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3635 using $paramod\$lut\WIDTH=4\LUT=16'1111100010001000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3637 using $paramod\$lut\WIDTH=2\LUT=4'1000.

12.25.28. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 1
Parameter \LUT = 2'01
Generating RTLIL representation for module `$paramod\$lut\WIDTH=1\LUT=2'01'.

12.25.29. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3670 using $paramod\$lut\WIDTH=1\LUT=2'01.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3671 using $paramod\$lut\WIDTH=1\LUT=2'01.

12.25.30. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 3
Parameter \LUT = 8'11111000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=3\LUT=8'11111000'.

12.25.31. Continuing TECHMAP pass.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3638 using $paramod\$lut\WIDTH=3\LUT=8'11111000.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3672 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping TOP.$abc$3608$auto$blifparse.cc:375:parse_blif$3641 using $paramod\$lut\WIDTH=4\LUT=16'1111100010001000.
No more expansions possible.
Removed 0 unused cells and 128 unused wires.

12.26. Executing HIERARCHY pass (managing design hierarchy).

12.26.1. Analyzing design hierarchy..
Top module:  \TOP

12.26.2. Analyzing design hierarchy..
Top module:  \TOP
Removed 0 unused modules.

12.27. Printing statistics.

=== TOP ===

   Number of wires:                122
   Number of wire bits:            677
   Number of public wires:          84
   Number of public wire bits:     576
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                140
     SB_CARRY                       16
     SB_DFF                         26
     SB_DFFE                         1
     SB_IO                          16
     SB_LUT4                        81

12.28. Executing CHECK pass (checking for obvious problems).
checking module TOP..
found and reported 0 problems.

12.29. Executing BLIF backend.

End of script. Logfile hash: 03ab573b7a
CPU: user 3.21s system 0.02s, MEM: 64.61 MB total, 34.57 MB resident
Yosys 0.7+57 (git sha1 81bb952, clang 3.6.0-2ubuntu1 -fPIC -Os)
Time spent: 24% 24x opt_expr (0 sec), 20% 24x opt_clean (0 sec), ...
